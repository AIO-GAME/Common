<#@ template language="C#" #>
<#@ include file="ClassParam.ttinclude" #>

<#+
    public class ClassParamSingleton
    {
        public List<ClassParam> ClassParams { get; }

        public ClassParamSingleton()
        {
            ClassParams = new List<ClassParam>
            {
                GetColor(),
                GetGradient(),
                GetAnimationCurve(),
                GetFieldToggle(),
                GetObject(),
                GetText(),
                GetLayer(),
                GetPassword(),
                GetSlider(),
                GetSliderInt(),
                GetRightToggle(),
                GetLeftToggle(),
                GetPopup(),
                GetHelpBox(),
            };

            ClassParams.AddRange(new List<string>
            {
                "float",
                "int",
                "double",
                "long"
            }.Select(type => new ClassParam()
            {
                FunctionName = "Field",
                InputType = type,
                APIFunction = $"EditorGUILayout.{char.ToUpper(type[0])}{type.Substring(1, type.Length - 1)}Field",
                ReturnType = type,
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>
                        {
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    }
                },
            }));

            ClassParams.AddRange(new List<string>
            {
                "float",
                "int",
                "double",
                "text"
            }.Select(type => new ClassParam()
            {
                Comments = "绘制延迟字段",
                FunctionName = "FieldDelayed",
                InputType = type == "text" ? "string" : type,
                APIFunction = $"EditorGUILayout.Delayed{char.ToUpper(type[0])}{type.Substring(1, type.Length - 1)}Field",
                ReturnType = type == "text" ? "string" : type,
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    }
                },
            }));

            ClassParams.AddRange(new List<string>
            {
                "Bounds",
                "BoundsInt",
                "RectInt",
                "Rect",
                "Vector2",
                "Vector2Int",
                "Vector3",
                "Vector3Int",
                "Vector4"
            }.Select(type => new ClassParam
            {
                FunctionName = "Field",
                InputType = type,
                APIFunction = $"EditorGUILayout.{char.ToUpper(type[0])}{type.Substring(1, type.Length - 1)}Field",
                ReturnType = type,
            }));
        }

        private static ClassParam GetAnimationCurve()
        {
            var param = new ClassParam()
            {
                FunctionName = "Field",
                InputType = "AnimationCurve",
                ReturnType = "AnimationCurve",
                APIFunction = "EditorGUILayout.CurveField",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("Color", "color"),
                            new FunctionParam("Rect", "ranges"),
                        }
                    }
                }
            };
            return param;
        }

        private static ClassParam GetColor()
        {
            return new ClassParam()
            {
                FunctionName = "Field",
                InputType = "Color",
                ReturnType = "Color",
                APIFunction = "EditorGUILayout.ColorField",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("bool", "showEyedropper"),
                            new FunctionParam("bool", "showAlpha"),
                            new FunctionParam("bool", "hdr"),
                        }
                    }
                }
            };
        }

        private static ClassParam GetGradient()
        {
            return new ClassParam()
            {
                Comments = "绘制渐变字段",
                FunctionName = "Field",
                InputType = "Gradient",
                ReturnType = "Gradient",
                APIFunction = "EditorGUILayout.GradientField",
                MacroDefinition = "UNITY_2019_1_OR_NEWER",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("bool", "hdr"),
                        }
                    }
                }
            };
        }

        private static ClassParam GetText()
        {
            return new ClassParam()
            {
                FunctionName = "Field",
                InputType = "string",
                ReturnType = "string",
                APIFunction = "EditorGUILayout.TextField",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    }
                }
            };
        }

        private static ClassParam GetObject()
        {
            return new ClassParam()
            {
                Comments = "绘制 Object 字段",
                FunctionName = "Field",
                InputType = "T",
                ReturnType = "T",
                Generics = new Dictionary<string, string>() { { "T", "UnityEngine.Object" } },
                APIFunction = "EditorGUILayout.ObjectField",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("Type", "type"),
                            new FunctionParam("bool", "allowSceneObjects"),
                        }
                    }
                }
            };
        }

        private static ClassParam GetLayer()
        {
            return new ClassParam()
            {
                Comments = "绘制 Layer 字段",
                FunctionName = "Layer",
                InputType = "int",
                ReturnType = "int",
                APIFunction = "EditorGUILayout.LayerField",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    }
                }
            };
        }

        private static ClassParam GetPassword()
        {
            return new ClassParam()
            {
                Comments = "绘制 密码文本框",
                FunctionName = "Password",
                InputType = "string",
                ReturnType = "string",
                APIFunction = "EditorGUILayout.PasswordField",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    }
                }
            };
        }

        private static ClassParam GetSliderInt()
        {
            return new ClassParam()
            {
                Comments = "绘制 滑动条",
                FunctionName = "Slider",
                InputType = "int",
                ReturnType = "int",
                APIFunction = "EditorGUILayout.IntSlider",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("int", "leftValue"),
                            new FunctionParam("int", "rightValue"),
                        }
                    },
                }
            };
        }

        private static ClassParam GetSlider()
        {
            return new ClassParam()
            {
                Comments = "绘制 滑动条",
                FunctionName = "Slider",
                InputType = "float",
                ReturnType = "float",
                APIFunction = "EditorGUILayout.Slider",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("int", "leftValue"),
                            new FunctionParam("int", "rightValue"),
                        }
                    }
                }
            };
        }

        private static ClassParam GetTagField()
        {
            return new ClassParam()
            {
                Comments = "绘制 标签字段",
                FunctionName = "Tag",
                InputType = "string",
                ReturnType = "string",
                APIFunction = "EditorGUILayout.TagField",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    }
                }
            };
        }

        private static ClassParam GetRightToggle()
        {
            return new ClassParam()
            {
                Comments = "绘制 左侧按钮",
                FunctionName = "Toggle",
                InputType = "bool",
                ReturnType = "bool",
                APIFunction = "EditorGUILayout.Toggle",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    }
                }
            };
        }

        private static ClassParam GetFieldToggle()
        {
            return new ClassParam()
            {
                Comments = "绘制 左侧按钮",
                FunctionName = "Field",
                InputType = "bool",
                ReturnType = "bool",
                APIFunction = "EditorGUILayout.Toggle",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    }
                }
            };
        }

        private static ClassParam GetLeftToggle()
        {
            return new ClassParam()
            {
                Comments = "绘制 右侧按钮",
                FunctionName = "ToggleLeft",
                InputType = "bool",
                ReturnType = "bool",
                APIFunction = "EditorGUILayout.ToggleLeft",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    }
                }
            };
        }

        private static ClassParam GetPopup()
        {
            var param = new ClassParam()
            {
                Comments = "绘制 整数选择 字段",
                FunctionName = "Popup",
                InputType = "int",
                APIFunction = "EditorGUILayout.IntPopup",
                ReturnType = "int",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "label", "new GUIContent(label)") { Comments = "标题" },
                            new FunctionParam("int", "value", "value") { Comments = "值" },
                            new FunctionParam("GUIContent[]", "displayedOptions", "displayedOptions")
                            {
                                Comments = "弹窗内容"
                            },
                            new FunctionParam("int[]", "optionValues", "optionValues") { Comments = "排版格式" },
                        }
                    },
                    {
                        "2", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "label", "new GUIContent(label)") { Comments = "标题" },
                            new FunctionParam("int", "value", "value") { Comments = "值" },
                            new FunctionParam("GUIContent[]", "displayedOptions", "displayedOptions")
                            {
                                Comments = "弹窗内容"
                            },
                            new FunctionParam("int[]", "optionValues", "optionValues") { Comments = "排版格式" },
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    },
                    {
                        "3", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "label", "label") { Comments = "标题" },
                            new FunctionParam("int", "value", "value") { Comments = "值" },
                            new FunctionParam("string[]", "displayedOptions", "displayedOptions") { Comments = "弹窗内容" },
                            new FunctionParam("int[]", "optionValues", "optionValues") { Comments = "排版格式" },
                        }
                    },
                    {
                        "4", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "label", "label") { Comments = "标题" },
                            new FunctionParam("int", "value", "value") { Comments = "值" },
                            new FunctionParam("string[]", "displayedOptions", "displayedOptions") { Comments = "弹窗内容" },
                            new FunctionParam("int[]", "optionValues", "optionValues") { Comments = "排版格式" },
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    },
                    {
                        "5", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "label", "new GUIContent(label)") { Comments = "标题" },
                            new FunctionParam("int", "value", "value") { Comments = "值" },
                            new FunctionParam("IEnumerable<GUIContent>", "displayedOptions",
                                "displayedOptions.ToArray()")
                            {
                                Comments = "弹窗内容"
                            },
                            new FunctionParam("IEnumerable<int>", "optionValues", "optionValues.ToArray()")
                            {
                                Comments = "排版格式"
                            },
                        }
                    },
                    {
                        "6", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "label", "new GUIContent(label)") { Comments = "标题" },
                            new FunctionParam("int", "value", "value") { Comments = "值" },
                            new FunctionParam("IEnumerable<GUIContent>", "displayedOptions",
                                "displayedOptions.ToArray()")
                            {
                                Comments = "弹窗内容"
                            },
                            new FunctionParam("IEnumerable<int>", "optionValues", "optionValues.ToArray()")
                            {
                                Comments = "排版格式"
                            },
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    },
                    {
                        "7", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "label", "label") { Comments = "标题" },
                            new FunctionParam("int", "value", "value") { Comments = "值" },
                            new FunctionParam("IEnumerable<string>", "displayedOptions", "displayedOptions.ToArray()")
                            {
                                Comments = "弹窗内容"
                            },
                            new FunctionParam("IEnumerable<int>", "optionValues", "optionValues.ToArray()")
                            {
                                Comments = "排版格式"
                            },
                        }
                    },
                    {
                        "8", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "label", "label") { Comments = "标题" },
                            new FunctionParam("int", "value", "value") { Comments = "值" },
                            new FunctionParam("IEnumerable<string>", "displayedOptions", "displayedOptions.ToArray()")
                            {
                                Comments = "弹窗内容"
                            },
                            new FunctionParam("IEnumerable<int>", "optionValues", "optionValues.ToArray()")
                            {
                                Comments = "排版格式"
                            },
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    },
                    {
                        "9", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "label", "label") { Comments = "标题" },
                            new FunctionParam("int", "value", "value") { Comments = "值" },
                            new FunctionParam("int[]", "displayedOptions",
                                "Array.ConvertAll<int, string>(displayedOptions, (i => i.ToString()))")
                            {
                                Comments = "弹窗内容"
                            },
                            new FunctionParam("int[]", "optionValues", "optionValues")
                            {
                                Comments = "排版格式"
                            },
                        }
                    },
                    {
                        "10", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "label", "label") { Comments = "标题" },
                            new FunctionParam("int", "value", "value") { Comments = "值" },
                            new FunctionParam("int[]", "displayedOptions",
                                "Array.ConvertAll<int, string>(displayedOptions, (i => i.ToString()))")
                            {
                                Comments = "弹窗内容"
                            },
                            new FunctionParam("int[]", "optionValues", "optionValues")
                            {
                                Comments = "排版格式"
                            },
                            new FunctionParam("GUIStyle", "style") { Comments = "样式" },
                        }
                    },
                }
            };
            return param;
        }

        private static ClassParam GetHelpBox()
        {
            var param = new ClassParam()
            {
                Comments = "帮助框 HelpBox",
                FunctionName = "HelpBox",
                APIFunction = "EditorGUILayout.HelpBox",
                FunctionParams = new Dictionary<string, List<FunctionParam>>()
                {
                    {
                        "1", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "message", "message") { Comments = "消息" },
                            new FunctionParam("MessageType", "type", "type") { Comments = "消息类型" },
                        }
                    },
                    {
                        "2", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "message", "message") { Comments = "消息" },
                            new FunctionParam("MessageType", "type", "type") { Comments = "消息类型" },
                            new FunctionParam("bool", "wide = true", "wide")
                            {
                                Comments = "true:帮助框覆盖整个窗口宽度;false:只覆盖控制部分"
                            },
                        }
                    },
                    {
                        "3", new List<FunctionParam>()
                        {
                            new FunctionParam("Texture", "message", "new GUIContent(message)") { Comments = "消息" },
                            new FunctionParam("bool", "wide") { Comments = "true:帮助框覆盖整个窗口宽度;false:只覆盖控制部分" },
                        }
                    },
                    {
                        "4", new List<FunctionParam>()
                        {
                            new FunctionParam("string", "message", "new GUIContent(message)") { Comments = "消息" },
                            new FunctionParam("bool", "wide = true", "wide")
                            {
                                Comments = "true:帮助框覆盖整个窗口宽度;false:只覆盖控制部分"
                            },
                        }
                    },
                    {
                        "5", new List<FunctionParam>()
                        {
                            new FunctionParam("GUIContent", "message", "message") { Comments = "消息" },
                            new FunctionParam("bool", "wide = true", "wide")
                            {
                                Comments = "true:帮助框覆盖整个窗口宽度;false:只覆盖控制部分"
                            },
                        }
                    },
                }
            };
            return param;
        }
    }
#>
<#@ include file="$(SolutionDir)Packages\com.self.package\T4~\ClassChunk.ttinclude" #>

<#+
    public class ClassParamSingleton
    {
        public ClassParam ClassParams { get; }

        private static FunctionParam _Style;

        private static FunctionParam Style
        {
            get
            {
                if (_Style is null)
                {
                    _Style = new FunctionParam("GUIStyle", "style", "style")
                    {
                        Comments = "样式",
                    };
                }
                return _Style;
            }
        }

        private static FunctionParam _Options;

        private static FunctionParam Options
        {
            get
            {
                if (_Options is not null) return _Options;
                _Options = new FunctionParam("GUILayoutOption", "options", "options")
                {
                    Comments = "排版格式",
                    IsParams = true
                };
                return _Options;
            }
        }

        public ClassParamSingleton()
        {
            ClassParams = ClassHelper.Create();
            var methods = typeof(ClassParamSingleton).GetMethods(BindingFlags.Static | BindingFlags.NonPublic);
            foreach (var method in methods)
            {
                try
                {
                    var attr = method.GetCustomAttribute<FuncParamAttribute>();
                    if (attr is null) continue;
                    if (string.IsNullOrEmpty(attr.Group)) attr.Group = "Default";
                    if (!ClassParams.FunctionGroups.ContainsKey(attr.Group))
                        ClassParams.FunctionGroups.Add(attr.Group, new List<FunctionChunk>());

                    if (attr.IsArray)
                    {
                        var chunks = (IEnumerable<FunctionChunk>)method.Invoke(null, null);
                        ClassParams.FunctionGroups[attr.Group].AddRange(chunks);
                    }
                    else
                    {
                        var chunk = (FunctionChunk)method.Invoke(null, null);
                        ClassParams.FunctionGroups[attr.Group].Add(chunk);
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }
            }

            ClassParams.Comments = "Layout";
            ClassParams.Header.AppendLine("/*|✩ - - - - - |||");
            ClassParams.Header.AppendLine("|||✩ Date:     ||| -> Automatic Generate");
            ClassParams.Header.AppendLine("|||✩ Document: ||| ->");
            ClassParams.Header.AppendLine("|||✩ - - - - - |*/");
            ClassParams.Pragma.Add("warning disable CS1591 // Missing XML comment for publicly visible type or member");
            ClassParams.Using.Add("System");
            ClassParams.Using.Add("System.Collections.Generic");
            ClassParams.Using.Add("System.Linq");
            ClassParams.Using.Add("UnityEngine");
            ClassParams.Using.Add("UnityEditor");
            ClassParams.Using.Add("UnityEngine.Internal");
            ClassParams.NameSpace = "AIO.UEditor";
            ClassParams.Name = "GELayout";
            ClassParams.IsPartial = true;
            ClassParams.State = TChunkState.None;
            ClassParams.Accessibility = "public";
        }

        #region Slider

        [FuncParam(Group = "Struct", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetFieldStruct()
        {
            var chunks = new List<FunctionChunk>();
            foreach (var type in new string[]
            {
                "Bounds",
                "BoundsInt",
                "RectInt",
                "Rect",
            })
            {
                var value = new FunctionParam(type, "value", "value") { Comments = "值" };
                foreach (var item in new string[] { "string", "GUIContent", "Texture" })
                {
                    var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                    if (item == "Texture") label.Output = "new GUIContent(label)";
                    var paramsList = new FunctionParam[][]
                    {
                        new FunctionParam[] { value, Options, },
                        new FunctionParam[] { label, value, Options, },
                    };
                    foreach (var param in paramsList)
                    {
                        var chunk = new FunctionChunk
                        {
                            State = TChunkState.Static,
                            Comments = $"绘制 {type}",
                            Name = "Field",
                            Params = param,
                            ReturnType = type,
                        };
                        var api = $"EditorGUILayout.{char.ToUpper(type[0])}{type.Substring(1, type.Length - 1)}Field";
                        chunk.Content = $"return {api}({chunk.GetParamValues()});";
                        chunks.Add(chunk);
                    }
                }
            }
            foreach (var type in new string[]
            {
                "Vector2Int",
                "Vector3Int",
                "Vector4", "Vector3",
                "Vector2",
            })
            {
                var value = new FunctionParam(type, "value", "value") { Comments = "值" };
                foreach (var item in new string[] { "string", "GUIContent", "Texture" })
                {
                    var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                    if (item == "Texture") label.Output = "new GUIContent(label)";
                    var paramsList = new FunctionParam[][]
                    {
                        new FunctionParam[] { label, value, Options, },
                    };
                    foreach (var param in paramsList)
                    {
                        var chunk = new FunctionChunk
                        {
                            State = TChunkState.Static,
                            Comments = $"绘制 {type}",
                            Name = "Field",
                            Params = param,
                            ReturnType = type,
                        };
                        var api = $"EditorGUILayout.{char.ToUpper(type[0])}{type.Substring(1, type.Length - 1)}Field";
                        chunk.Content = $"return {api}({chunk.GetParamValues()});";
                        chunks.Add(chunk);
                    }
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Delayed", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetFieldDelayed()
        {
            var chunks = new List<FunctionChunk>();
            foreach (var type in new string[]
            {
                "float",
                "int",
                "double",
                "text"
            })
            {
                var value = new FunctionParam(type == "text" ? "string" : type, "value", "value") { Comments = "值" };
                foreach (var item in new string[] { "string", "GUIContent", "Texture" })
                {
                    var label = new FunctionParam(item, "label", "label")
                    {
                        Comments = "标签"
                    };
                    if (item == "Texture") label.Output = "new GUIContent(label)";
                    var paramsList = new FunctionParam[][]
                    {
                        new FunctionParam[] { value, Options, },
                        new FunctionParam[] { label, value, Options, },
                        new FunctionParam[] { value, Style, Options, },
                        new FunctionParam[] { label, value, Style, Options, },
                    }
                        ;
                    foreach (var param in paramsList)
                    {
                        var chunk = new FunctionChunk
                        {
                            State = TChunkState.Static,
                            Comments = $"绘制 {value.Type}",
                            Name = "FieldDelayed",
                            Params = param,
                            ReturnType = value.Type,
                        };
                        var api =
                            $"EditorGUILayout.Delayed{char.ToUpper(type[0])}{type.Substring(1, type.Length - 1)}Field";
                        chunk.Content = $"return {api}({chunk.GetParamValues()});";
                        chunks.Add(chunk);
                    }
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Number", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetFieldNumber()
        {
            var chunks = new List<FunctionChunk>();
            foreach (var type in new string[]
            {
                "float",
                "int",
                "double",
                "long"
            })
            {
                var value = new FunctionParam(type, "value", "value") { Comments = "值" };
                foreach (var item in new string[] { "string", "GUIContent", "Texture" })
                {
                    var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                    if (item == "Texture") label.Output = "new GUIContent(label)";
                    var paramsList = new FunctionParam[][]
                    {
                        new FunctionParam[] { value, Options, },
                        new FunctionParam[] { value, Style, Options, },
                        new FunctionParam[] { label, value, Options, },
                        new FunctionParam[] { label, value, Style, Options, },
                    };
                    foreach (var param in paramsList)
                    {
                        var chunk = new FunctionChunk
                        {
                            State = TChunkState.Static,
                            Comments = $"绘制 {value.Type}",
                            Name = "Field",
                            Params = param,
                            ReturnType = value.Type,
                        };
                        var api =
                            $"EditorGUILayout.{char.ToUpper(type[0])}{type.Substring(1, type.Length - 1)}Field";
                        chunk.Content = $"return {api}({chunk.GetParamValues()});";
                        chunks.Add(chunk);
                    }
                }
            }
            return chunks;
        }

        [FuncParam(Group = "AnimationCurve", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetAnimationCurve()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("AnimationCurve", "value", "value") { Comments = "值" };
            var color = new FunctionParam("Color", "color", "color") { Comments = "颜色" };
            var ranges = new FunctionParam("Rect", "ranges", "ranges") { Comments = "区间值" };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, Options, },
                    new FunctionParam[] { label, value, Options, },
                    new FunctionParam[] { value, color, ranges, Options, },
                    new FunctionParam[] { label, value, color, ranges, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 {value.Type}",
                        Name = "Field",
                        Params = param,
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return EditorGUILayout.CurveField({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Color", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetColor()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("Color", "value", "value") { Comments = "值" };
            var showEyedropper = new FunctionParam("bool", "showEyedropper", "showEyedropper") { Comments = "颜色" };
            var showAlpha = new FunctionParam("bool", "showAlpha", "showAlpha") { Comments = "区间值" };
            var hdr = new FunctionParam("bool", "hdr", "hdr") { Comments = "区间值" };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item != "GUIContent") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, Options, },
                    new FunctionParam[] { label, value, Options, },
                    new FunctionParam[] { label, value, showEyedropper, showAlpha, hdr, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 {value.Type}",
                        Name = "Field",
                        Params = param,
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return EditorGUILayout.ColorField({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Gradient", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetGradient()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("Gradient", "value", "value") { Comments = "值" };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item != "GUIContent") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, Options, },
                    new FunctionParam[] { label, value, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 {value.Type}",
                        Name = "Field",
                        Params = param,
                        MacroDefinition = "UNITY_2019_1_OR_NEWER",
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return EditorGUILayout.GradientField({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Text", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetText()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("string", "value", "value") { Comments = "值" };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, Options, },
                    new FunctionParam[] { label, value, Options, },
                    new FunctionParam[] { value, Style, Options, },
                    new FunctionParam[] { label, value, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 {value.Type}",
                        Name = "Field",
                        Params = param,
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return EditorGUILayout.TextField({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Object", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetObject()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("T", "value", "value") { Comments = "值" };
            var type = new FunctionParam("Type", "type", "type") { Comments = "类型" };
            var allowSceneObjects = new FunctionParam("bool", "allowSceneObjects", "allowSceneObjects")
            {
                Comments = "是否允许选择场景物体"
            };
            var allowSceneObjects1 = new FunctionParam(allowSceneObjects) { Output = "typeof(T), allowSceneObjects" };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, allowSceneObjects1, Options, },
                    new FunctionParam[] { value, type, allowSceneObjects, Options, },
                    new FunctionParam[] { label, value, type, allowSceneObjects, Options, },
                    new FunctionParam[] { label, value, allowSceneObjects1, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 Object",
                        Name = "Field",
                        Generics = new Dictionary<string, string> { { "T", "UnityEngine.Object" } },
                        Params = param,
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return (T)EditorGUILayout.ObjectField({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            chunks.Add(new FunctionChunk
            {
                State = TChunkState.Static,
                Comments = $"绘制 Object",
                Name = "Field",
                Generics = new Dictionary<string, string> { { "T", "UnityEngine.Object" } },
                Params = new[] { value, type, Options, },
                Content = "return (T)EditorGUILayout.ObjectField(value, type, true, options);",
                ReturnType = value.Type,
            });
            chunks.Add(new FunctionChunk
            {
                State = TChunkState.Static,
                Comments = $"绘制 Object",
                Name = "Field",
                Generics = new Dictionary<string, string> { { "T", "UnityEngine.Object" } },
                Params = new[] { value, Options, },
                Content = "return (T)EditorGUILayout.ObjectField(value, typeof(T), true, options);",
                ReturnType = value.Type,
            });
            return chunks;
        }

        [FuncParam(Group = "Layer", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetLayer()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("int", "value", "value") { Comments = "值" };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, Options, },
                    new FunctionParam[] { label, value, Options, },
                    new FunctionParam[] { value, Style, Options, },
                    new FunctionParam[] { label, value, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 Layer",
                        Name = "Layer",
                        Params = param,
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return EditorGUILayout.LayerField({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Password", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetPassword()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("string", "value", "value") { Comments = "值" };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, Options, },
                    new FunctionParam[] { label, value, Options, },
                    new FunctionParam[] { value, Style, Options, },
                    new FunctionParam[] { label, value, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 密码文本框",
                        Name = "Password",
                        Params = param,
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return EditorGUILayout.PasswordField({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        #endregion

        #region Slider

        [FuncParam(Group = "Slider", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetSliderInt()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("int", "value", "value") { Comments = "值" };
            var leftValue = new FunctionParam("int", "leftValue", "leftValue") { Comments = "左侧值" };
            var rightValue = new FunctionParam("int", "rightValue", "rightValue") { Comments = "右侧值" };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, leftValue, rightValue, Options, },
                    new FunctionParam[] { label, value, leftValue, rightValue, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 滑动条",
                        Name = "Slider",
                        Params = param,
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return EditorGUILayout.IntSlider({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Slider", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetSlider()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("float", "value", "value") { Comments = "值" };
            var leftValue = new FunctionParam("float", "leftValue", "leftValue") { Comments = "左侧值" };
            var rightValue = new FunctionParam("float", "rightValue", "rightValue") { Comments = "右侧值" };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, leftValue, rightValue, Options, },
                    new FunctionParam[] { label, value, leftValue, rightValue, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 滑动条",
                        Name = "Slider",
                        Params = param,
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return EditorGUILayout.Slider({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Slider", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetMinMaxSlider()
        {
            var chunks = new List<FunctionChunk>();
            var minValue = new FunctionParam("float", "minValue", "ref minValue")
            {
                Comments = "滑动条最左边的值",
                Modifier = ParamModifier.Ref
            };
            var maxValue = new FunctionParam("float", "maxValue", "ref maxValue")
            {
                Comments = "滑动条最右边的值",
                Modifier = ParamModifier.Ref
            };
            var minLimit = new FunctionParam("float", "minLimit", "minLimit") { Comments = "限制滑动条最左边的值" };
            var maxLimit = new FunctionParam("float", "maxLimit", "maxLimit") { Comments = "限制滑动条最右边的值" };
            foreach (var item in new string[] { "string", "GUIContent" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { minValue, maxValue, minLimit, maxLimit, Options, },
                    new FunctionParam[] { label, minValue, maxValue, minLimit, maxLimit, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 限制滑动条",
                        Name = "Slider",
                        Params = param,
                    };
                    chunk.Content = $"EditorGUILayout.MinMaxSlider({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        #endregion

        #region Other

        [FuncParam(Group = "Tag", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetTagField()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("string", "value", "value") { Comments = "值" };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, Options, },
                    new FunctionParam[] { label, value, Options, },
                    new FunctionParam[] { value, Style, Options, },
                    new FunctionParam[] { label, value, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 标签字段",
                        Name = "Tag",
                        Params = param,
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return EditorGUILayout.TagField({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "HelpBox", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetHelpBox()
        {
            var chunks = new List<FunctionChunk>();

            var type = new FunctionParam("MessageType", "type = MessageType.None", "type") { Comments = "消息类型" };
            var wide = new FunctionParam("bool", "wide = true", "wide")
            {
                Comments = "true:帮助框覆盖整个窗口宽度;false:只覆盖控制部分"
            };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var message = new FunctionParam(item, "message", "message") { Comments = "消息" };
                var paramsList = new List<FunctionParam[]>();
                switch (item)
                {
                    case "GUIContent":
                        paramsList.Add(new FunctionParam[] { message, wide });
                        break;
                    case "string":
                        paramsList.Add(new FunctionParam[] { message, type, wide });
                        break;
                    case "Texture":
                        message.Output = "new GUIContent(message)";
                        paramsList.Add(new FunctionParam[] { message, wide });
                        break;
                }

                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 帮助框 字段",
                        Name = "HelpBox",
                        Params = param,
                    };
                    chunk.Content = $"EditorGUILayout.HelpBox({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "TextArea", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetTextArea()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("string", "value", "value") { Comments = "文本内容" };
            var paramsList = new FunctionParam[][]
            {
                new FunctionParam[] { value, Options, },
                new FunctionParam[] { value, Style, Options, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 文本域",
                    Name = "AreaText",
                    Params = param,
                    ReturnType = value.Type,
                };
                chunk.Content = $"return EditorGUILayout.TextArea({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            return chunks;
        }

        #endregion

        #region Toggle

        [FuncParam(Group = "Toggle", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetRightToggle()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("bool", "value", "value") { Comments = "值" };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, Options, },
                    new FunctionParam[] { label, value, Options, },
                    new FunctionParam[] { value, Style, Options, },
                    new FunctionParam[] { label, value, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 左侧按钮",
                        Name = "Toggle",
                        Params = param,
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return EditorGUILayout.Toggle({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 左侧按钮",
                        Name = "Field",
                        Params = param,
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return EditorGUILayout.Toggle({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Toggle", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetLeftToggle()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("bool", "value", "value") { Comments = "值" };
            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { label, value, Options, },
                    new FunctionParam[] { label, value, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 右侧按钮",
                        Name = "ToggleLeft",
                        Params = param,
                        ReturnType = value.Type,
                    };
                    chunk.Content = $"return EditorGUILayout.ToggleLeft({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        #endregion

        #region Popup

        [FuncParam(Group = "Popup", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetPopupInt()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("int", "value", "value") { Comments = "值" };

            var optionValues = new FunctionParam[]
            {
                new FunctionParam("int[]", "optionValues", "optionValues") { Comments = "排版格式" },
                new FunctionParam("IEnumerable<int>", "optionValues", "optionValues.ToArray()") { Comments = "排版格式" }
            };

            foreach (var item in new string[] { "string", "GUIContent" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                var displayedOptions = new List<FunctionParam>()
                {
                    new FunctionParam($"{item}[]", "displayedOptions", "displayedOptions"),
                    new FunctionParam($"IEnumerable<{item}>", "displayedOptions", "displayedOptions.ToArray()"),
                };
                if (item == "string")
                {
                    displayedOptions.Add(new FunctionParam($"int[]", "displayedOptions",
                        "displayedOptions.Select(T => T.ToString()).ToArray()"));
                    displayedOptions.Add(new FunctionParam($"IEnumerable<int>", "displayedOptions",
                        "displayedOptions.Select(T => T.ToString()).ToArray()"));
                }
                foreach (var displayedOption in displayedOptions)
                {
                    displayedOption.Comments = "弹窗内容";
                    foreach (var optionValue in optionValues)
                    {
                        var paramsList = new FunctionParam[][]
                        {
                            new FunctionParam[] { value, displayedOption, optionValue, Options, },
                            new FunctionParam[] { label, value, displayedOption, optionValue, Options, },
                            new FunctionParam[] { value, displayedOption, optionValue, Style, Options, },
                            new FunctionParam[] { label, value, displayedOption, optionValue, Style, Options, },
                        };
                        foreach (var param in paramsList)
                        {
                            var chunk = new FunctionChunk
                            {
                                State = TChunkState.Static,
                                Comments = $"绘制 整数弹窗 字段",
                                Name = "Popup",
                                Params = param,
                                ReturnType = "int",
                            };
                            chunk.Content = $"return EditorGUILayout.IntPopup({chunk.GetParamValues()});";
                            chunks.Add(chunk);
                        }
                    }
                    {
                        var paramsList = new FunctionParam[][]
                        {
                            new FunctionParam[] { value, displayedOption, Options, },
                            new FunctionParam[] { label, value, displayedOption, Options, },
                            new FunctionParam[] { value, displayedOption, Style, Options, },
                            new FunctionParam[] { label, value, displayedOption, Style, Options, },
                        };
                        foreach (var param in paramsList)
                        {
                            var chunk = new FunctionChunk
                            {
                                State = TChunkState.Static,
                                Comments = $"绘制 弹窗 字段",
                                Name = "Popup",
                                Params = param,
                                ReturnType = "int",
                            };
                            chunk.Content = $"return EditorGUILayout.Popup({chunk.GetParamValues()});";
                            chunks.Add(chunk);
                        }
                    }
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Popup", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetPopupEnum_2018_3_OR_NEWER()
        {
            var chunks = new List<FunctionChunk>();
            var checkEnabled = new FunctionParam("Func<Enum, bool>", "checkEnabled", "checkEnabled")
            {
                Comments = "显示每个Enum值,返回指定的方法"
            };
            var includeObsolete = new FunctionParam("bool", "includeObsolete", "includeObsolete")
            {
                Comments = "true:包含带有attribute的枚举值,false:排除"
            };
            var value = new FunctionParam("T", "selected", "selected") { Comments = "枚举值" };
            foreach (var item in new string[] { "string", "GUIContent" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item != "GUIContent") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, Options },
                    new FunctionParam[] { value, Style, Options },
                    new FunctionParam[] { label, value, Options },
                    new FunctionParam[] { label, value, Style, Options },
                    new FunctionParam[] { label, value, checkEnabled, includeObsolete, Options },
                    new FunctionParam[] { label, value, checkEnabled, includeObsolete, Style, Options },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        Generics = new Dictionary<string, string> { { "T", "Enum" } },
                        State = TChunkState.Static,
                        Comments = $"绘制 弹窗枚举 字段",
                        Name = "Popup",
                        Params = param,
                        ReturnType = value.Type,
                        MacroDefinition = "UNITY_2018_3_OR_NEWER",
                    };
                    chunk.Content = $"return (T)EditorGUILayout.EnumPopup({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        #endregion

        #region Label

        [FuncParam(Group = "Label", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetLabelField()
        {
            var chunks = new List<FunctionChunk>();


            foreach (var item in new string[] { "GUIContent", "string", "int", "bool" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "第一个标签" };
                if (item != "GUIContent" && item != "string") label.Output = "label.ToString()";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { label, Options },
                    new FunctionParam[] { label, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 标签文本框",
                        Name = "Label",
                        Params = param,
                    };
                    chunk.Content = $"EditorGUILayout.LabelField({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }

            foreach (var item in new string[] { "GUIContent", "string", })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "第一个标签" };
                var label2 = new FunctionParam(item, "label2", "label2") { Comments = "向右显示的标签" };
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { label, label2, Options },
                    new FunctionParam[] { label, label2, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 标签文本框",
                        Name = "Label",
                        Params = param,
                    };
                    chunk.Content = $"EditorGUILayout.LabelField({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Label", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetLabelPrefix()
        {
            var chunks = new List<FunctionChunk>();
            var followingStyle = new FunctionParam("GUIStyle", "followingStyle", "followingStyle")
            { Comments = "后面的显示风格", };
            var labelStyle = new FunctionParam("GUIStyle", "labelStyle", "labelStyle")
            { Comments = "显示风格", };
            var followingStyle1 = new FunctionParam("[UnityEngine.Internal.DefaultValue(\"\\\"Button\\\"\")] GUIStyle",
                "followingStyle", "followingStyle")
            { Comments = "后面的显示风格", };

            foreach (var item in new string[] { "GUIContent", "string", "int", "bool" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "第一个标签" };
                if (item != "GUIContent" && item != "string") label.Output = "label.ToString()";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { label },
                    new FunctionParam[] { label, followingStyle1 },
                    new FunctionParam[] { label, followingStyle, labelStyle, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 可选择标签",
                        Name = "LabelPrefix",
                        Params = param,
                    };
                    chunk.Content = $"EditorGUILayout.PrefixLabel({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Label", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetLabelSelectable()
        {
            var chunks = new List<FunctionChunk>();
            foreach (var item in new string[] { "string", "int" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "第一个标签" };
                if (item != "string") label.Output = "label.ToString()";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { label, Options, },
                    new FunctionParam[] { label, Style, Options, }
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 可选择标签",
                        Name = "LabelSelectable",
                        Params = param,
                    };
                    chunk.Content = $"EditorGUILayout.SelectableLabel({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        #endregion

        #region Enum

        [FuncParam(Group = "Mask", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetMaskField()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("int", "mask", "mask") { Comments = "选择值" };

            foreach (var item in new string[] { "string", "GUIContent" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                foreach (var displayedOption in new FunctionParam[]
                {
                    new FunctionParam("string[]", "displayedOptions", "displayedOptions"),
                    new FunctionParam("IEnumerable<string>", "displayedOptions", "displayedOptions.ToArray()"),
                })
                {
                    displayedOption.Comments = "选择内容";
                    var paramsList = new FunctionParam[][]
                    {
                        new FunctionParam[] { value, displayedOption, Options, },
                        new FunctionParam[] { value, displayedOption, Style, Options, },
                        new FunctionParam[] { label, value, displayedOption, Options, },
                        new FunctionParam[] { label, value, displayedOption, Style, Options, },
                    };
                    foreach (var param in paramsList)
                    {
                        var chunk = new FunctionChunk
                        {
                            State = TChunkState.Static,
                            Comments = $"绘制 可选择标签",
                            Name = "Mask",
                            Params = param,
                            ReturnType = "int",
                        };
                        chunk.Content = $"return EditorGUILayout.MaskField({chunk.GetParamValues()});";
                        chunks.Add(chunk);
                    }
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Enum", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetEnumFlagsField()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("T", "selected", "selected") { Comments = "枚举值" };
            var includeObsolete = new FunctionParam("bool", "includeObsolete", "includeObsolete")
            {
                Comments = "true:包含带有ObsoleteAttribute的枚举值,false:排除"
            };
            foreach (var item in new string[] { "GUIContent", "string", "int", "bool" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                switch (item)
                {
                    case "int":
                    case "bool":
                        label.Output = "new GUIContent(label.ToString())";
                        break;
                    case "Texture":
                    case "string":
                        label.Output = "new GUIContent(label)";
                        break;
                }
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, Options, },
                    new FunctionParam[] { label, value, Options, },
                    new FunctionParam[] { label, value, includeObsolete, Options, },
                    new FunctionParam[] { value, Style, Options, },
                    new FunctionParam[] { label, value, Style, Options, },
                    new FunctionParam[] { label, value, includeObsolete, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 枚举菜单",
                        Name = "EnumFlags",
                        Params = param,
                        MacroDefinition = "UNITY_2018_1_OR_NEWER",
                        Generics = new Dictionary<string, string> { { "T", "Enum" } },
                        ReturnType = "T",
                    };
                    chunk.Content = $"return (T)EditorGUILayout.EnumFlagsField({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Enum", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetEnumMaskPopup2020_OR_LOWER()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("T", "selected", "selected") { Comments = "枚举值" };
            foreach (var item in new string[] { "GUIContent", "string" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { label, value, Options, },
                    new FunctionParam[] { label, value, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 枚举菜单",
                        Name = "EnumPopupMask",
                        Params = param,
                        MacroDefinition = "!UNITY_2020_1_OR_NEWER",
                        Generics = new Dictionary<string, string> { { "T", "Enum" } },
                        ReturnType = "T",
                    };
                    chunk.Content = $"return (T)EditorGUILayout.EnumMaskPopup({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Enum", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetEnumMaskField2020_OR_LOWER()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("T", "value", "value") { Comments = "枚举值" };
            foreach (var item in new string[] { "GUIContent", "string" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { value, Options, },
                    new FunctionParam[] { value, Style, Options, },
                    new FunctionParam[] { label, value, Options, },
                    new FunctionParam[] { label, value, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 枚举菜单",
                        Name = "EnumMask",
                        Params = param,
                        MacroDefinition = "!UNITY_2020_1_OR_NEWER",
                        Generics = new Dictionary<string, string> { { "T", "Enum" } },
                        ReturnType = "T",
                    };
                    chunk.Content = $"return (T)EditorGUILayout.EnumMaskField({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        #endregion

        #region Button

        [FuncParam(Group = "Button", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetButtonDropdown()
        {
            var chunks = new List<FunctionChunk>();
            foreach (var item in new string[] { "GUIContent", "string", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label, FocusType.Passive") { Comments = "标签" };
                if (item != "GUIContent") label.Output = "new GUIContent(label), FocusType.Passive";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { label, Options, },
                    new FunctionParam[] { label, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 下拉按钮",
                        Name = "ButtonDropdown",
                        Params = param,
                        ReturnType = "bool",
                    };
                    chunk.Content = $"return EditorGUILayout.DropdownButton({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Button", IsArray = true)]
        private static IEnumerable<FunctionChunk> GetButtonLink()
        {
            var chunks = new List<FunctionChunk>();
            foreach (var item in new string[] { "GUIContent", "string", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new FunctionParam[][]
                {
                    new FunctionParam[] { label, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = $"绘制 Link按钮",
                        Name = "ButtonLink",
                        Params = param,
                        ReturnType = "bool",
                        MacroDefinition = "UNITY_2021_1_OR_NEWER",
                    };
                    chunk.Content = $"return EditorGUILayout.LinkButton({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        #endregion

        #region Space

        [FuncParam(Group = "Scope Horizontal", IsArray = true)]
        private static List<FunctionChunk> Horizontal()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var width_float = new FunctionParam("float", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_float = new FunctionParam("float", "height", "GUILayout.Width(height)") { Comments = "高度" };
            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, Options, },
                new FunctionParam[] { value, width_float, },
                new FunctionParam[] { value, width_float, height_float },
                new FunctionParam[] { value, Style, Options, },
                new FunctionParam[] { value, Style, width_float, },
                new FunctionParam[] { value, Style, width_float, height_float },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 横排视图",
                    Name = "VHorizontal",
                    Params = param,
                    ReturnType = "void",
                };
                chunk.ContentBuilder.AppendLine("if (action == null) return;");
                chunk.ContentBuilder.AppendLine($"EditorGUILayout.BeginHorizontal({chunk.GetParamValues()});");
                chunk.ContentBuilder.AppendLine("action?.Invoke();");
                chunk.ContentBuilder.AppendLine("EditorGUILayout.EndHorizontal();");
                chunks.Add(chunk);
            }
            paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { width_float, },
                new FunctionParam[] { width_float, height_float, },
                new FunctionParam[] { Options, },
                new FunctionParam[] { Style, Options, },
                new FunctionParam[] { Style, width_float, },
                new FunctionParam[] { Style, width_float, height_float, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 横排视图",
                    Name = "BeginHorizontal",
                    Params = param,
                    ReturnType = "void",
                };
                chunk.Content = $"EditorGUILayout.BeginHorizontal({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 横排视图",
                    Name = "EndHorizontal",
                    ReturnType = "void",
                    Content = "EditorGUILayout.EndHorizontal();"
                };
                chunks.Add(chunk);
            }
            return chunks;
        }

        [FuncParam(Group = "Scope Vertical", IsArray = true)]
        private static List<FunctionChunk> Vertical()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var width_float = new FunctionParam("float", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_float = new FunctionParam("float", "height", "GUILayout.Width(height)") { Comments = "高度" };
            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, Options, },
                new FunctionParam[] { value, width_float, },
                new FunctionParam[] { value, width_float, height_float },
                new FunctionParam[] { value, Style, Options, },
                new FunctionParam[] { value, Style, width_float, },
                new FunctionParam[] { value, Style, width_float, height_float },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 竖排视图",
                    Name = "Vertical",
                    Params = param,
                    ReturnType = "void",
                };
                chunk.ContentBuilder.AppendLine("if (action == null) return;");
                chunk.ContentBuilder.AppendLine($"EditorGUILayout.BeginVertical({chunk.GetParamValues()});");
                chunk.ContentBuilder.AppendLine("action?.Invoke();");
                chunk.ContentBuilder.AppendLine("EditorGUILayout.EndVertical();");
                chunks.Add(chunk);
            }
            paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { width_float, },
                new FunctionParam[] { width_float, height_float, },
                new FunctionParam[] { Options, },
                new FunctionParam[] { Style, Options, },
                new FunctionParam[] { Style, width_float, },
                new FunctionParam[] { Style, width_float, height_float, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 竖排视图",
                    Name = "BeginVertical",
                    Params = param,
                    ReturnType = "void",
                };
                chunk.Content = $"EditorGUILayout.BeginVertical({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 竖排视图",
                    Name = "EndVertical",
                    ReturnType = "void",
                    Content = "EditorGUILayout.EndVertical();"
                };
                chunks.Add(chunk);
            }
            return chunks;
        }

        [FuncParam(Group = "Scope ScrollView", IsArray = true)]
        private static List<FunctionChunk> ScrollView()
        {
            var chunks = new List<FunctionChunk>();
            var width_float = new FunctionParam("float", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_float = new FunctionParam("float", "height", "GUILayout.Width(height)") { Comments = "高度" };

            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var v2 = new FunctionParam("Vector2", "v2", "v2") { Comments = "视图在X和Y方向上滚动的像素距离" };
            var alwaysShowHorizontal = new FunctionParam("bool", "alwaysShowHorizontal") { Comments = "始终显示水平滚动条" };
            var alwaysShowVertical = new FunctionParam("bool", "alwaysShowVertical") { Comments = "始终显示垂直滚动条" };
            var styles_h = new FunctionParam("GUIStyle", "styles_h") { Comments = "水平滚动条风格" };
            var styles_v = new FunctionParam("GUIStyle", "styles_v") { Comments = "垂直滚动条风格" };
            var styles_b = new FunctionParam("GUIStyle", "styles_b") { Comments = "底板风格" };

            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, v2, Options, },
                new FunctionParam[] { value, v2, width_float, },
                new FunctionParam[] { value, v2, width_float, height_float },
                new FunctionParam[] { value, v2, Options, },
                new FunctionParam[] { value, v2, width_float, },
                new FunctionParam[] { value, v2, width_float, height_float },
                new FunctionParam[] { value, v2, alwaysShowHorizontal, alwaysShowVertical, Options, },
                new FunctionParam[] { value, v2, styles_h, styles_v, Options, },
                new FunctionParam[]
                { value, v2, alwaysShowHorizontal, alwaysShowVertical, styles_h, styles_v, styles_b, Options, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 滚动视图",
                    Name = "VScrollView",
                    Params = param,
                    ReturnType = "Vector2",
                };
                chunk.ContentBuilder.AppendLine($"v2 = EditorGUILayout.BeginScrollView({chunk.GetParamValues()});");
                chunk.ContentBuilder.AppendLine("action?.Invoke();");
                chunk.ContentBuilder.AppendLine("EditorGUILayout.EndScrollView();");
                chunk.ContentBuilder.AppendLine("return v2;");
                chunks.Add(chunk);
            }
            paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { v2, Options, },
                new FunctionParam[] { v2, width_float, },
                new FunctionParam[] { v2, width_float, height_float },
                new FunctionParam[] { v2, Options, },
                new FunctionParam[] { v2, width_float, },
                new FunctionParam[] { v2, width_float, height_float },
                new FunctionParam[] { v2, alwaysShowHorizontal, alwaysShowVertical, Options, },
                new FunctionParam[] { v2, styles_h, styles_v, Options, },
                new FunctionParam[]
                { v2, alwaysShowHorizontal, alwaysShowVertical, styles_h, styles_v, styles_b, Options, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 滚动视图",
                    Name = "BeginScrollView",
                    Params = param,
                    ReturnType = "Vector2",
                };
                chunk.Content = $"return EditorGUILayout.BeginScrollView({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 滚动视图",
                    Name = "EndScrollView",
                    ReturnType = "void",
                    Content = "EditorGUILayout.EndScrollView();"
                };
                chunks.Add(chunk);
            }


            return chunks;
        }

        [FuncParam(Group = "Scope Group", IsArray = true)]
        private static List<FunctionChunk> VGroup()
        {
            var chunks = new List<FunctionChunk>();

            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var toggle = new FunctionParam("bool", "toggle", "toggle") { Comments = "显示开关" };
            foreach (var item in new string[] { "string", "GUIContent" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                var paramsList = new List<FunctionParam[]>
                {
                    new FunctionParam[] { value, label, toggle, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 组视图",
                        Name = "VGroup",
                        Params = param,
                        ReturnType = "bool",
                    };
                    chunk.ContentBuilder.AppendLine(
                        $"toggle = EditorGUILayout.BeginToggleGroup({chunk.GetParamValues()});");
                    chunk.ContentBuilder.AppendLine("if (toggle) action?.Invoke();");
                    chunk.ContentBuilder.AppendLine("EditorGUILayout.EndToggleGroup();");
                    chunk.ContentBuilder.AppendLine("return toggle;");
                    chunks.Add(chunk);
                }

                paramsList = new List<FunctionParam[]>
                {
                    new FunctionParam[] { label, toggle, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "开始绘制 组视图",
                        Name = "BeginGroup",
                        Params = param,
                        ReturnType = "bool",
                    };
                    chunk.Content = $"return EditorGUILayout.BeginToggleGroup({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }

            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "结束绘制 组视图",
                    Name = "EndGroup",
                    ReturnType = "void",
                    Content = "EditorGUILayout.EndToggleGroup();"
                };
                chunks.Add(chunk);
            }


            return chunks;
        }

        [FuncParam(Group = "Scope Group", IsArray = true)]
        private static List<FunctionChunk> VGroupDisabled()
        {
            var chunks = new List<FunctionChunk>();

            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var toggle = new FunctionParam("bool", "toggle", "toggle") { Comments = "显示开关" };
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 禁用组视图",
                    Name = "VGroupDisabled",
                    Params = new FunctionParam[] { value, toggle, },
                };
                chunk.ContentBuilder.AppendLine($"EditorGUI.BeginDisabledGroup({chunk.GetParamValues()});");
                chunk.ContentBuilder.AppendLine("action?.Invoke();");
                chunk.ContentBuilder.AppendLine("EditorGUI.EndDisabledGroup();");
                chunks.Add(chunk);
            }

            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "开始绘制 禁用组视图",
                    Name = "BeginGroupDisabled",
                    Params = new FunctionParam[] { toggle, },
                };
                chunk.Content = $"EditorGUI.BeginDisabledGroup({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }

            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "结束绘制 禁用组视图",
                    Name = "EndGroupDisabled",
                    ReturnType = "void",
                    Content = "EditorGUI.EndDisabledGroup();"
                };
                chunks.Add(chunk);
            }


            return chunks;
        }

        [FuncParam(Group = "Scope Group", IsArray = true)]
        private static List<FunctionChunk> VGroupBuildTargetSelection()
        {
            var chunks = new List<FunctionChunk>();

            var value = new FunctionParam("Action<BuildTargetGroup>", "action", "") { Comments = "回调函数" };
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 开始构建目标分组",
                    Name = "VGroupBuildTargetSelection",
                    Params = new FunctionParam[] { value, },
                    MacroDefinition = "UNITY_2019_1_OR_NEWER",
                };
                chunk.ContentBuilder.AppendLine($"var value = EditorGUILayout.BeginBuildTargetSelectionGrouping();");
                chunk.ContentBuilder.AppendLine("action?.Invoke(value);");
                chunk.ContentBuilder.AppendLine("EditorGUILayout.EndBuildTargetSelectionGrouping();");
                chunks.Add(chunk);
            }
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 开始构建目标分组",
                    Name = "VGroupBuildTargetSelection",
                    Params = new FunctionParam[] { value, new FunctionParam("BuildTargetGroup", "value") },
                    MacroDefinition = "UNITY_2019_1_OR_NEWER",
                    ReturnType = "BuildTargetGroup",
                };
                chunk.ContentBuilder.AppendLine("value = EditorGUILayout.BeginBuildTargetSelectionGrouping();");
                chunk.ContentBuilder.AppendLine("action?.Invoke(value);");
                chunk.ContentBuilder.AppendLine("EditorGUILayout.EndBuildTargetSelectionGrouping();");
                chunk.ContentBuilder.AppendLine("return value;");
                chunks.Add(chunk);
            }
            {
                var chunk = new FunctionChunk
                {
                    MacroDefinition = "UNITY_2019_1_OR_NEWER",
                    State = TChunkState.Static,
                    Comments = "开始绘制 目标分组视图",
                    Name = "BeginGroupBuildTargetSelection",
                    Params = new FunctionParam[] { },
                    ReturnType = "BuildTargetGroup",
                    Content = $"return EditorGUILayout.BeginBuildTargetSelectionGrouping();"
                };
                chunks.Add(chunk);
            }

            {
                var chunk = new FunctionChunk
                {
                    MacroDefinition = "UNITY_2019_1_OR_NEWER",
                    State = TChunkState.Static,
                    Comments = "结束绘制 目标分组视图",
                    Name = "EndGroupBuildTargetSelection",
                    ReturnType = "void",
                    Content = "EditorGUILayout.EndBuildTargetSelectionGrouping();"
                };
                chunks.Add(chunk);
            }


            return chunks;
        }

        [FuncParam(Group = "Scope Group", IsArray = true)]
        private static List<FunctionChunk> VGroupFade()
        {
            var chunks = new List<FunctionChunk>();

            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var alpha = new FunctionParam("float", "alpha", "alpha") { Comments = "介于0到1之间的值，0是隐藏的，1是完全可见的" };
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 隐藏显示分组视图",
                    Name = "VGroupFade",
                    Params = new FunctionParam[] { value, alpha },
                };
                chunk.ContentBuilder.AppendLine($"if (action == null) return;");
                chunk.ContentBuilder.AppendLine("if (EditorGUILayout.BeginFadeGroup(alpha)) action?.Invoke();");
                chunk.ContentBuilder.AppendLine("EditorGUILayout.EndFadeGroup();");
                chunks.Add(chunk);
            }
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 隐藏显示分组视图",
                    Name = "VGroupFade",
                    Params = new FunctionParam[]
                    {
                        new FunctionParam(value) { Type = "Action<bool>" },
                        new FunctionParam("bool", "show"),
                        alpha
                    },
                    ReturnType = "bool",
                };
                chunk.ContentBuilder.AppendLine("show = EditorGUILayout.BeginFadeGroup(alpha);");
                chunk.ContentBuilder.AppendLine("action?.Invoke(show);");
                chunk.ContentBuilder.AppendLine("EditorGUILayout.EndFadeGroup();");
                chunk.ContentBuilder.AppendLine("return show;");
                chunks.Add(chunk);
            }
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "开始绘制 隐藏显示分组视图",
                    Name = "BeginGroupFade",
                    Params = new FunctionParam[] { alpha },
                    ReturnType = "bool",
                    Content = $"return EditorGUILayout.BeginFadeGroup(alpha);"
                };
                chunks.Add(chunk);
            }

            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "结束绘制 隐藏显示分组视图",
                    Name = "EndGroupFade",
                    ReturnType = "void",
                    Content = "EditorGUILayout.EndFadeGroup();"
                };
                chunks.Add(chunk);
            }


            return chunks;
        }

        #endregion

        #region Foldout

        [FuncParam(Group = "Foldout", IsArray = true)]
        private static List<FunctionChunk> VFoldout()
        {
            var chunks = new List<FunctionChunk>();

            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var foldout = new FunctionParam("bool", "foldout", "foldout") { Comments = "显示的折叠状态" };
            var toggleOnLabelClick = new FunctionParam("bool", "toggleOnLabelClick", "toggleOnLabelClick")
            {
                Comments = "是否在单击标签时切换折叠状态"
            };
            foreach (var item in new string[] { "string", "GUIContent" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                foreach (var param in new FunctionParam[][]
                {
                    new FunctionParam[] { label, foldout, },
                    new FunctionParam[] { label, foldout, Style },
                    new FunctionParam[] { label, foldout, toggleOnLabelClick },
                    new FunctionParam[] { label, foldout, toggleOnLabelClick, Style },
                })
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 折叠式箭头",
                        Name = "VFoldout",
                        Params = param,
                        ReturnType = "bool",
                        ReturnComments = "true:呈现子对象,false:隐藏",
                        Attributes = new List<string> { "ExcludeFromDocs" }
                    };
                    chunk.Content =
                        $"return EditorGUILayout.Foldout({chunk.GetParamValues().Replace("label, foldout", "foldout, label")});";
                    chunks.Add(chunk);
                }
                foreach (var param in new FunctionParam[][]
                {
                    new FunctionParam[] { value, label, foldout, },
                    new FunctionParam[] { value, label, foldout, Style },
                    new FunctionParam[] { value, label, foldout, toggleOnLabelClick },
                    new FunctionParam[] { value, label, foldout, toggleOnLabelClick, Style },
                })
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 折叠式箭头",
                        Name = "VFoldout",
                        Params = param,
                        ReturnType = "bool",
                        ReturnComments = "true:呈现子对象,false:隐藏",
                        Attributes = new List<string> { "ExcludeFromDocs" }
                    };
                    chunk.ContentBuilder.AppendLine(
                        $"foldout = EditorGUILayout.Foldout({chunk.GetParamValues().Replace("label, foldout", "foldout, label")});");
                    chunk.ContentBuilder.AppendLine("if (foldout) action?.Invoke();");
                    chunk.ContentBuilder.AppendLine("return foldout;");
                    chunks.Add(chunk);
                }
            }


            return chunks;
        }

        [FuncParam(Group = "Foldout", IsArray = true)]
        private static List<FunctionChunk> VFoldoutHeader()
        {
            var chunks = new List<FunctionChunk>();

            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var foldout = new FunctionParam("bool", "foldout", "foldout") { Comments = "显示的折叠状态" };
            var style = new FunctionParam("GUIStyle", "style = null", "style") { Comments = "显示风格" };
            var menuAction = new FunctionParam("Action<Rect>", "menuAction = null", "menuAction") { Comments = "操作菜单" };
            var menuIcon = new FunctionParam("GUIStyle", "menuIcon = null", "menuIcon") { Comments = "菜单ICON显示风格" };

            foreach (var item in new string[] { "string", "GUIContent" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 折页排版",
                        Name = "VFoldoutHeader",
                        Params = new FunctionParam[] { value, label, foldout, style, menuAction, menuIcon },
                        ReturnType = "bool",
                        ReturnComments = "true:呈现子对象,false:隐藏",
                        Attributes = new List<string> { "ExcludeFromDocs" },
                        MacroDefinition = "UNITY_2019_1_OR_NEWER"
                    };
                    chunk.ContentBuilder.AppendLine(
                        $"foldout = EditorGUILayout.BeginFoldoutHeaderGroup({chunk.GetParamValues().Replace("label, foldout", "foldout, label")});");
                    chunk.ContentBuilder.AppendLine("if (foldout) action?.Invoke();");
                    chunk.ContentBuilder.AppendLine("EditorGUILayout.EndFoldoutHeaderGroup();");
                    chunk.ContentBuilder.AppendLine("return foldout;");
                    chunks.Add(chunk);
                }
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "开始绘制 折页排版",
                        Name = "BeginFoldoutHeader",
                        Params = new FunctionParam[] { label, foldout, style, menuAction, menuIcon },
                        ReturnType = "bool",
                        ReturnComments = "true:呈现子对象,false:隐藏",
                        Attributes = new List<string> { "ExcludeFromDocs" },
                        MacroDefinition = "UNITY_2019_1_OR_NEWER",
                    };
                    chunk.Content =
                        $"return EditorGUILayout.BeginFoldoutHeaderGroup({chunk.GetParamValues().Replace("label, foldout", "foldout, label")});";
                    chunks.Add(chunk);
                }
            }
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "结束绘制 折页排版",
                    Name = "EndFoldoutHeader",
                    Params = new FunctionParam[] { },
                    Attributes = new List<string> { "ExcludeFromDocs" },
                    MacroDefinition = "UNITY_2019_1_OR_NEWER",
                    Content = "EditorGUILayout.EndFoldoutHeaderGroup();"
                };
                chunks.Add(chunk);
            }
            return chunks;
        }

        [FuncParam(Group = "Foldout", IsArray = true)]
        private static List<FunctionChunk> VFoldoutHeaderToggle()
        {
            var chunks = new List<FunctionChunk>();

            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var foldout = new FunctionParam("bool", "foldout", "foldout") { Comments = "显示的折叠状态" };
            var style = new FunctionParam("GUIStyle", "style = null", "style") { Comments = "显示风格" };

            foreach (var item in new string[] { "string", "GUIContent" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 折页排版",
                        Name = "VFoldoutHeaderGroup",
                        Params = new FunctionParam[] { value, label, foldout, style, },
                        ReturnType = "bool",
                        ReturnComments = "true:呈现子对象,false:隐藏",
                        Attributes = new List<string> { "ExcludeFromDocs" },
                        MacroDefinition = "UNITY_2018_1_OR_NEWER"
                    };
                    chunk.ContentBuilder.AppendLine("#if UNITY_2019_1_OR_NEWER");
                    chunk.ContentBuilder.AppendLine(
                        "foldout = EditorGUILayout.ToggleLeft(label, foldout, style ?? \"FoldoutHeader\", GTOption.WidthExpand(true));");
                    chunk.ContentBuilder.AppendLine("#else");
                    chunk.ContentBuilder.AppendLine(
                        "foldout = EditorGUILayout.ToggleLeft(label, foldout, style ?? \"GUIEditor.BreadcrumbLeft\", GTOption.WidthExpand(true));");
                    chunk.ContentBuilder.AppendLine("#endif");
                    chunk.ContentBuilder.AppendLine("EditorGUILayout.Space();");
                    chunk.ContentBuilder.AppendLine("if (foldout) action?.Invoke();");
                    chunk.ContentBuilder.AppendLine("return foldout;");
                    chunks.Add(chunk);
                }
            }

            return chunks;
        }

        #endregion
    }
#>
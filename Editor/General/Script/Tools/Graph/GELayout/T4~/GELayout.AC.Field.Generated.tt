<#@ template debug="false" hostspecific="false" language="C#" linePragmas="true" visibility="public"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System"#>
<#@ import namespace="System.Collections"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ include file="GELayout.AC.Field.ttinclude" #><#@ import namespace="System.Reflection" #>
<#
    var singleton = new ClassParamSingleton();

    var headers = new List<FunctionParam>
    {
        null,
        new FunctionParam("string", "label", "new GUIContent(label)") { Comments = "标题" },
        new FunctionParam("GUIContent", "label", "label") { Comments = "标题" },
        new FunctionParam("Texture", "label", "new GUIContent(label)") { Comments = "标题" },
    };

    var filter_no_label = new List<string> // 在没有Label的情况下过滤直接过滤
    {
        "EditorGUILayout.Vector",
        "EditorGUILayout.ToggleLeft",
    };

    var filter_no_label_ext = new List<string> // 在没有Label的情况下过滤扩展字段
    {
        "EditorGUILayout.Vector",
        "EditorGUILayout.GradientField",
        "EditorGUILayout.ColorField",
        "EditorGUILayout.ToggleLeft",
    };

    var filter_header = new List<string>
    {
        "EditorGUILayout.IntPopup",
    };

    var filter_total = new List<string>
    {
        "EditorGUILayout.TextArea",
        "EditorGUILayout.HelpBox",
        "EditorGUILayout.LabelField",
        "EditorGUILayout.PrefixLabel",
        "EditorGUILayout.SelectableLabel",
        "EditorGUILayout.MaskField",
        "EditorGUILayout.EnumFlagsField",
        "EditorGUILayout.EnumMaskPopup",
        "EditorGUILayout.EnumMaskField",
        "EditorGUILayout.Popup",
        "EditorGUILayout.EnumPopup",
        "EditorGUILayout.DropdownButton",
        "EditorGUILayout.LinkButton",
    };

    var filter_no_ext_no_auto_add = new List<string> // 过滤没有扩展字段 就不自动扩增值
    {
        "EditorGUILayout.IntPopup",
        "EditorGUILayout.Slider",
        "EditorGUILayout.IntSlider",
        "EditorGUILayout.ObjectField",
    };

    var ClassParams = new List<ClassParam>();
    foreach (var classParm in singleton.ClassParams)
    {
        if (classParm.FunctionParams is null)
        {
            classParm.FunctionParams = new List<FunctionParam[]>();
        }

        if (!filter_no_ext_no_auto_add.Any(vale => classParm.APIFunction.Contains(vale)))
        {
            classParm.FunctionParams.Add(null);
        }

        var temp = new ClassParam
        {
            FunctionName = classParm.FunctionName ?? "Field",
            Comments = classParm.Comments ?? "绘制字段",
            InputType = classParm.InputType,
            APIFunction = classParm.APIFunction ?? "[请输入API]",
            ReturnType = classParm.ReturnType ?? "[请输入返回类型]",
            Generics = classParm.Generics,
            MacroDefinition = classParm.MacroDefinition,
            FunctionParams = new List<FunctionParam[]>()
        };

        foreach (var header in headers)
        {
            foreach (var functionParam in classParm.FunctionParams)
            {
                var list = new List<FunctionParam>();
                if (filter_total.Any(vale => classParm.APIFunction == vale))
                {
                    if (functionParam is null) continue;
                    temp.FunctionParams.Add(functionParam);
                    continue;
                }

                if (filter_header.Any(vale => classParm.APIFunction.Contains(vale)))
                {
                    if (functionParam != null) list.AddRange(functionParam);
                    list.Add(new FunctionParam("GUILayoutOption", "options", "options")
                    {
                        IsParams = true,
                        Comments = "格式参数"
                    });
                    temp.FunctionParams.Add(list.ToArray());
                    continue;
                }

                if (header != null)
                {
                    list.Add(header);
                    list.Add(new FunctionParam(temp.InputType, "value", "value") { Comments = "值" });
                    if (functionParam != null) list.AddRange(functionParam);
                    list.Add(new FunctionParam("GUILayoutOption", "options", "options")
                    {
                        IsParams = true,
                        Comments = "格式参数"
                    });
                }
                else
                {
                    if (filter_no_label.Any(vale => classParm.APIFunction.Contains(vale))) continue;
                    list.Add(new FunctionParam(temp.InputType, "value", "value"));
                    if (!filter_no_label_ext.Any(vale => classParm.APIFunction.Contains(vale)))
                        if (functionParam != null) list.AddRange(functionParam);
                    list.Add(new FunctionParam("GUILayoutOption", "options", "options")
                    {
                        IsParams = true,
                        Comments = "格式参数"
                    });
                }

                temp.FunctionParams.Add(list.ToArray());
            }
        }

        ClassParams.Add(temp);
    }
#>
/*|✩ - - - - - |||
|||✩ Date:     ||| -> Automatic Generate
|||✩ Document: ||| ->
|||✩ - - - - - |*/
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using System;
using UnityEditor;
using UnityEngine;
using System.Collections.Generic;
using System.Linq;

namespace AIO.UEditor
{
<#
    var headerDic = new Dictionary<string, int>();
    foreach (var classParam in ClassParams)
    {
#>

    #region <#=
            string.IsNullOrEmpty(classParam.InputType) ? "" : classParam.InputType #> : <#= classParam.APIFunction #>
<#
        if (!string.IsNullOrEmpty(classParam.MacroDefinition))
        {
#>
<#=
                string.Concat("\n#if ", classParam.MacroDefinition) #>
<#
        }
#>
    public partial class GELayout 
    {
<#
        foreach (var item in classParam.FunctionParams)
        {
            var header = classParam.GetFunctionHeader(item, "        ");
            if (headerDic.ContainsKey(header)) continue;
            headerDic.Add(header, 0);
            var comment = "\r\n" + classParam.GetFunctionComment(item, "绘制字段", classParam.InputType, "        ");
#>
<#= comment #>
<#= header #>
        {
<#=
                classParam.GetFunctionContent(item, "            ") #>
        }
<#
        }
#>
    }
<#
        if (!string.IsNullOrEmpty(classParam.MacroDefinition))
        {
#>
<#= "\n#endif" #>
<#
        }
#>
    #endregion
<#
    }
#>
}

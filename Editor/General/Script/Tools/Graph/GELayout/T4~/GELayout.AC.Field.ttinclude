<#@ include file="$(SolutionDir)Packages\com.self.package\T4~\ClassParam.ttinclude" #>

<#+
    public class ClassParamSingleton
    {
        public List<ClassParam> ClassParams { get; }

        private static FunctionParam _Style;

        private static FunctionParam Style
        {
            get
            {
                if (_Style is null)
                {
                    _Style = new FunctionParam("GUIStyle", "style", "style")
                    {
                        Comments = "样式",
                    };
                }
                return _Style;
            }
        }

        private static FunctionParam _Options;

        private static FunctionParam Options
        {
            get
            {
                if (_Options is null)
                {
                    _Options = new FunctionParam("GUILayoutOption", "options", "options")
                    {
                        Comments = "排版格式",
                        IsParams = true
                    };
                }
                return _Options;
            }
        }

        public ClassParamSingleton()
        {
            ClassParams = new List<ClassParam>();
            var methods = typeof(ClassParamSingleton).GetMethods(BindingFlags.Static | BindingFlags.NonPublic);
            foreach (var method in methods)
            {
                try
                {
                    var attr = method.GetCustomAttribute<ParamAttribute>();
                    if (attr is null) continue;


                    if (attr.IsArray)
                        ClassParams.AddRange((IEnumerable<ClassParam>)method.Invoke(null, null));
                    else
                        ClassParams.Add((ClassParam)method.Invoke(null, null));
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }
            }
        }

        [Param(IsArray = true)]
        private static IEnumerable<ClassParam> GetFieldStruct()
        {
            return new List<string>
            {
                "Bounds",
                "BoundsInt",
                "RectInt",
                "Rect",
                "Vector2",
                "Vector2Int",
                "Vector3",
                "Vector3Int",
                "Vector4"
            }.Select(type => new ClassParam
            {
                FunctionName = "Field",
                InputType = type,
                APIFunction = $"EditorGUILayout.{char.ToUpper(type[0])}{type.Substring(1, type.Length - 1)}Field",
                ReturnType = type,
            });
        }

        [Param(IsArray = true)]
        private static IEnumerable<ClassParam> GetFieldDelayed()
        {
            return new List<string>
            {
                "float",
                "int",
                "double",
                "text"
            }.Select(type => new ClassParam()
            {
                Comments = "绘制延迟字段",
                FunctionName = "FieldDelayed",
                InputType = type == "text" ? "string" : type,
                APIFunction =
                    $"EditorGUILayout.Delayed{char.ToUpper(type[0])}{type.Substring(1, type.Length - 1)}Field",
                ReturnType = type == "text" ? "string" : type,
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        Style,
                    }
                },
            });
        }

        [Param(IsArray = true)]
        private static IEnumerable<ClassParam> GetFieldNumber()
        {
            return new List<string>
            {
                "float",
                "int",
                "double",
                "long"
            }.Select(type => new ClassParam()
            {
                Comments = "绘制字段",
                FunctionName = "Field",
                InputType = type,
                APIFunction = $"EditorGUILayout.{char.ToUpper(type[0])}{type.Substring(1, type.Length - 1)}Field",
                ReturnType = type,
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        Style,
                    }
                },
            });
        }

        [Param]
        private static ClassParam GetAnimationCurve()
        {
            var param = new ClassParam()
            {
                FunctionName = "Field",
                InputType = "AnimationCurve",
                ReturnType = "AnimationCurve",
                APIFunction = "EditorGUILayout.CurveField",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        new FunctionParam("Color", "color"),
                        new FunctionParam("Rect", "ranges"),
                    }
                }
            };
            return param;
        }

        [Param]
        private static ClassParam GetColor()
        {
            return new ClassParam()
            {
                FunctionName = "Field",
                InputType = "Color",
                ReturnType = "Color",
                APIFunction = "EditorGUILayout.ColorField",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        new FunctionParam("bool", "showEyedropper"),
                        new FunctionParam("bool", "showAlpha"),
                        new FunctionParam("bool", "hdr"),
                    }
                }
            };
        }

        [Param]
        private static ClassParam GetGradient()
        {
            return new ClassParam()
            {
                Comments = "绘制渐变字段",
                FunctionName = "Field",
                InputType = "Gradient",
                ReturnType = "Gradient",
                APIFunction = "EditorGUILayout.GradientField",
                MacroDefinition = "UNITY_2019_1_OR_NEWER",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        new FunctionParam("bool", "hdr"),
                    }
                }
            };
        }

        [Param]
        private static ClassParam GetText()
        {
            return new ClassParam()
            {
                FunctionName = "Field",
                InputType = "string",
                ReturnType = "string",
                APIFunction = "EditorGUILayout.TextField",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        Style,
                    }
                }
            };
        }

        [Param]
        private static ClassParam GetObject()
        {
            return new ClassParam()
            {
                Comments = "绘制 Object 字段",
                FunctionName = "Field",
                InputType = "T",
                ReturnType = "T",
                Generics = new Dictionary<string, string>() { { "T", "UnityEngine.Object" } },
                APIFunction = "EditorGUILayout.ObjectField",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        new FunctionParam("Type", "type"),
                        new FunctionParam("bool", "allowSceneObjects"),
                    }
                }
            };
        }

        [Param]
        private static ClassParam GetLayer()
        {
            return new ClassParam()
            {
                Comments = "绘制 Layer 字段",
                FunctionName = "Layer",
                InputType = "int",
                ReturnType = "int",
                APIFunction = "EditorGUILayout.LayerField",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        Style,
                    }
                }
            };
        }

        [Param]
        private static ClassParam GetPassword()
        {
            return new ClassParam()
            {
                Comments = "绘制 密码文本框",
                FunctionName = "Password",
                InputType = "string",
                ReturnType = "string",
                APIFunction = "EditorGUILayout.PasswordField",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        Style,
                    }
                }
            };
        }

        [Param]
        private static ClassParam GetSliderInt()
        {
            return new ClassParam()
            {
                Comments = "绘制 滑动条",
                FunctionName = "Slider",
                InputType = "int",
                ReturnType = "int",
                APIFunction = "EditorGUILayout.IntSlider",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        new FunctionParam("int", "leftValue"),
                        new FunctionParam("int", "rightValue"),
                    },
                }
            };
        }

        [Param]
        private static ClassParam GetSlider()
        {
            return new ClassParam()
            {
                Comments = "绘制 滑动条",
                FunctionName = "Slider",
                InputType = "float",
                ReturnType = "float",
                APIFunction = "EditorGUILayout.Slider",
                FunctionParams = new List<FunctionParam[]>
                {
                    {
                        new FunctionParam[]
                        {
                            new FunctionParam("int", "leftValue"),
                            new FunctionParam("int", "rightValue"),
                        }
                    }
                }
            };
        }

        [Param]
        private static ClassParam GetTagField()
        {
            return new ClassParam()
            {
                Comments = "绘制 标签字段",
                FunctionName = "Tag",
                InputType = "string",
                ReturnType = "string",
                APIFunction = "EditorGUILayout.TagField",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        Style,
                    }
                }
            };
        }

        [Param]
        private static ClassParam GetRightToggle()
        {
            return new ClassParam()
            {
                Comments = "绘制 左侧按钮",
                FunctionName = "Toggle",
                InputType = "bool",
                ReturnType = "bool",
                APIFunction = "EditorGUILayout.Toggle",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        Style,
                    }
                }
            };
        }

        [Param]
        private static ClassParam GetFieldToggle()
        {
            return new ClassParam()
            {
                Comments = "绘制 左侧按钮",
                FunctionName = "Field",
                InputType = "bool",
                ReturnType = "bool",
                APIFunction = "EditorGUILayout.Toggle",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        Style,
                    }
                }
            };
        }

        [Param]
        private static ClassParam GetLeftToggle()
        {
            return new ClassParam()
            {
                Comments = "绘制 右侧按钮",
                FunctionName = "ToggleLeft",
                InputType = "bool",
                ReturnType = "bool",
                APIFunction = "EditorGUILayout.ToggleLeft",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        Style,
                    }
                }
            };
        }

        [Param]
        private static ClassParam GetPopupInt()
        {
            var param = new ClassParam()
            {
                Comments = "绘制 弹窗整数 字段",
                FunctionName = "Popup",
                InputType = "int",
                APIFunction = "EditorGUILayout.IntPopup",
                ReturnType = "int",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "label", "new GUIContent(label)") { Comments = "标题" },
                        new FunctionParam("int", "value", "value") { Comments = "值" },
                        new FunctionParam("GUIContent[]", "displayedOptions", "displayedOptions")
                        {
                            Comments = "弹窗内容"
                        },
                        new FunctionParam("int[]", "optionValues", "optionValues") { Comments = "排版格式" },
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "label", "new GUIContent(label)") { Comments = "标题" },
                        new FunctionParam("int", "value", "value") { Comments = "值" },
                        new FunctionParam("GUIContent[]", "displayedOptions", "displayedOptions")
                        {
                            Comments = "弹窗内容"
                        },
                        new FunctionParam("int[]", "optionValues", "optionValues") { Comments = "排版格式" },
                        Style,
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "label", "label") { Comments = "标题" },
                        new FunctionParam("int", "value", "value") { Comments = "值" },
                        new FunctionParam("string[]", "displayedOptions", "displayedOptions") { Comments = "弹窗内容" },
                        new FunctionParam("int[]", "optionValues", "optionValues") { Comments = "排版格式" },
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "label", "label") { Comments = "标题" },
                        new FunctionParam("int", "value", "value") { Comments = "值" },
                        new FunctionParam("string[]", "displayedOptions", "displayedOptions") { Comments = "弹窗内容" },
                        new FunctionParam("int[]", "optionValues", "optionValues") { Comments = "排版格式" },
                        Style,
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "label", "new GUIContent(label)") { Comments = "标题" },
                        new FunctionParam("int", "value", "value") { Comments = "值" },
                        new FunctionParam("IEnumerable<GUIContent>", "displayedOptions",
                            "displayedOptions.ToArray()")
                        {
                            Comments = "弹窗内容"
                        },
                        new FunctionParam("IEnumerable<int>", "optionValues", "optionValues.ToArray()")
                        {
                            Comments = "排版格式"
                        },
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "label", "new GUIContent(label)") { Comments = "标题" },
                        new FunctionParam("int", "value", "value") { Comments = "值" },
                        new FunctionParam("IEnumerable<GUIContent>", "displayedOptions", "displayedOptions.ToArray()")
                        {
                            Comments = "弹窗内容"
                        },
                        new FunctionParam("IEnumerable<int>", "optionValues", "optionValues.ToArray()")
                        {
                            Comments = "排版格式"
                        },
                        Style,
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "label", "label") { Comments = "标题" },
                        new FunctionParam("int", "value", "value") { Comments = "值" },
                        new FunctionParam("IEnumerable<string>", "displayedOptions", "displayedOptions.ToArray()")
                        {
                            Comments = "弹窗内容"
                        },
                        new FunctionParam("IEnumerable<int>", "optionValues", "optionValues.ToArray()")
                        {
                            Comments = "排版格式"
                        },
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "label", "label") { Comments = "标题" },
                        new FunctionParam("int", "value", "value") { Comments = "值" },
                        new FunctionParam("IEnumerable<string>", "displayedOptions", "displayedOptions.ToArray()")
                        {
                            Comments = "弹窗内容"
                        },
                        new FunctionParam("IEnumerable<int>", "optionValues", "optionValues.ToArray()")
                        {
                            Comments = "排版格式"
                        },
                        Style,
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "label", "label") { Comments = "标题" },
                        new FunctionParam("int", "value", "value") { Comments = "值" },
                        new FunctionParam("int[]", "displayedOptions",
                            "Array.ConvertAll<int, string>(displayedOptions, (i => i.ToString()))")
                        {
                            Comments = "弹窗内容"
                        },
                        new FunctionParam("int[]", "optionValues", "optionValues")
                        {
                            Comments = "排版格式"
                        },
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "label", "label") { Comments = "标题" },
                        new FunctionParam("int", "value", "value") { Comments = "值" },
                        new FunctionParam("int[]", "displayedOptions",
                            "Array.ConvertAll<int, string>(displayedOptions, (i => i.ToString()))")
                        {
                            Comments = "弹窗内容"
                        },
                        new FunctionParam("int[]", "optionValues", "optionValues")
                        {
                            Comments = "排版格式"
                        },
                        Style,
                    },
                }
            };
            return param;
        }

        [Param]
        private static ClassParam GetPopup()
        {
            var param = new ClassParam()
            {
                Comments = "绘制 弹窗枚举 字段",
                FunctionName = "Popup",
                InputType = "int",
                APIFunction = "EditorGUILayout.Popup",
                ReturnType = "int",
            };
            var value = new FunctionParam("int", "selectedIndex", "selectedIndex") { Comments = "选择下标" };
            var displayedOptionsStringArray = new FunctionParam("string[]", "displayedOptions", "displayedOptions")
            {
                Comments = "弹窗内容"
            };
            var displayedOptionsContentArray = new FunctionParam("GUIContent[]", "displayedOptions", "displayedOptions")
            {
                Comments = "弹窗内容"
            };
            var displayedOptionsStringList = new FunctionParam("IEnumerable<string> ", "displayedOptions",
                "displayedOptions.ToArray()")
            {
                Comments = "弹窗内容"
            };
            var displayedOptionsContentList = new FunctionParam("IEnumerable<GUIContent> ", "displayedOptions",
                "displayedOptions.ToArray()")
            {
                Comments = "弹窗内容"
            };

            var displayedOptionsList = new List<FunctionParam>()
            {
                displayedOptionsStringArray,
                displayedOptionsContentArray,
                displayedOptionsStringList,
                displayedOptionsContentList
            };

            foreach (var item in new string[] { "GUIContent", "string" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                foreach (var displayedOptions in displayedOptionsList)
                {
                    if (displayedOptions.Type.Contains("string") && item == "GUIContent") continue;
                    if (displayedOptions.Type.Contains("GUIContent") && item == "string") continue;

                    var list = new List<FunctionParam[]>
                    {
                        new FunctionParam[] { value, displayedOptions, Options },
                        new FunctionParam[] { value, displayedOptions, Style, Options },
                        new FunctionParam[] { label, value, displayedOptions, Options },
                        new FunctionParam[] { label, value, displayedOptions, Style, Options },
                    };
                    param.FunctionParams.AddRange(list);
                }
            }
            return param;
        }

        [Param]
        private static ClassParam GetPopupEnum_2018_3_OR_NEWER()
        {
            var param = new ClassParam()
            {
                Comments = "绘制 弹窗枚举 字段",
                FunctionName = "Popup",
                APIFunction = "EditorGUILayout.EnumPopup",
                ReturnType = "T",
                Generics = new Dictionary<string, string> { { "T", "Enum" } }
            };
            var value = new FunctionParam("T", "selected", "selected") { Comments = "枚举值" };
            var checkEnabled = new FunctionParam("Func<Enum, bool>", "checkEnabled", "checkEnabled")
            {
                Comments = "显示每个Enum值,返回指定的方法"
            };
            var includeObsolete = new FunctionParam("bool", "includeObsolete", "includeObsolete")
            {
                Comments = "true:包含带有attribute的枚举值,false:排除"
            };
            foreach (var item in new string[] { "GUIContent", "string" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "string") label.Output = "new GUIContent(label)";
                var list = new List<FunctionParam[]>
                {
                    new FunctionParam[] { value, Options },
                    new FunctionParam[] { value, Style, Options },
                    new FunctionParam[] { label, value, Options },
                    new FunctionParam[] { label, value, Style, Options },
                    new FunctionParam[] { label, value, checkEnabled, includeObsolete, Options },
                    new FunctionParam[] { label, value, checkEnabled, includeObsolete, Style, Options },
                };

                param.FunctionParams.AddRange(list);
            }
            return param;
        }

        [Param]
        private static ClassParam GetHelpBox()
        {
            var param = new ClassParam()
            {
                Comments = "帮助框 HelpBox",
                FunctionName = "HelpBox",
                APIFunction = "EditorGUILayout.HelpBox",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "message", "message") { Comments = "消息" },
                        new FunctionParam("MessageType", "type", "type") { Comments = "消息类型" },
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "message", "message") { Comments = "消息" },
                        new FunctionParam("MessageType", "type", "type") { Comments = "消息类型" },
                        new FunctionParam("bool", "wide = true", "wide")
                        {
                            Comments = "true:帮助框覆盖整个窗口宽度;false:只覆盖控制部分"
                        },
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("Texture", "message", "new GUIContent(message)") { Comments = "消息" },
                        new FunctionParam("bool", "wide") { Comments = "true:帮助框覆盖整个窗口宽度;false:只覆盖控制部分" },
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "message", "new GUIContent(message)") { Comments = "消息" },
                        new FunctionParam("bool", "wide = true", "wide")
                        {
                            Comments = "true:帮助框覆盖整个窗口宽度;false:只覆盖控制部分"
                        },
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("GUIContent", "message", "message") { Comments = "消息" },
                        new FunctionParam("bool", "wide = true", "wide")
                        {
                            Comments = "true:帮助框覆盖整个窗口宽度;false:只覆盖控制部分"
                        },
                    },
                }
            };
            return param;
        }

        [Param]
        private static ClassParam GetTextArea()
        {
            var param = new ClassParam
            {
                Comments = "绘制文本域 TextArea",
                FunctionName = "Area",
                APIFunction = "EditorGUILayout.TextArea",
                FunctionParams = new List<FunctionParam[]>
                {
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "value", "value") { Comments = "文本内容" },
                        Style, Options,
                    },
                    new FunctionParam[]
                    {
                        new FunctionParam("string", "value", "value") { Comments = "文本内容" },
                        Options,
                    },
                }
            };
            return param;
        }

        [Param]
        private static ClassParam GetLabelField()
        {
            var param = new ClassParam
            {
                Comments = "绘制 标签文本框",
                FunctionName = "Label",
                APIFunction = "EditorGUILayout.LabelField",
                FunctionParams = new List<FunctionParam[]>(),
            };
            foreach (var item in new string[] { "GUIContent", "string", "int", "bool" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "第一个标签" };
                if (item != "GUIContent" && item != "string") label.Output = "label.ToString()";
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[]
                    {
                        label,
                        Options,
                    },
                    new FunctionParam[]
                    {
                        label,
                        Style, Options,
                    },
                };

                param.FunctionParams.AddRange(paramsList);
            }
            foreach (var item in new string[] { "GUIContent", "string" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "第一个标签" };
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[]
                    {
                        label,
                        new FunctionParam(item, "label2", "label2") { Comments = "向右显示的标签" },
                        Options,
                    },
                    new FunctionParam[]
                    {
                        label,
                        new FunctionParam(item, "label2", "label2") { Comments = "向右显示的标签" },
                        Style, Options,
                    },
                };

                param.FunctionParams.AddRange(paramsList);
            }
            return param;
        }

        [Param]
        private static ClassParam GetLabelPrefix()
        {
            var param = new ClassParam
            {
                Comments = "绘制 标签文本框",
                FunctionName = "LabelPrefix",
                APIFunction = "EditorGUILayout.PrefixLabel",
                FunctionParams = new List<FunctionParam[]>(),
            };
            foreach (var item in new string[] { "GUIContent", "string", "int", "bool" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "第一个标签" };
                if (item != "GUIContent" && item != "string") label.Output = "label.ToString()";

                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[]
                    {
                        label,
                    },
                    new FunctionParam[]
                    {
                        label,
                        new FunctionParam("GUIStyle", "followingStyle", "followingStyle")
                        {
                            Comments = "后面的显示风格",
                        },
                        new FunctionParam("GUIStyle", "labelStyle", "labelStyle")
                        {
                            Comments = "显示风格",
                        },
                    },
                    new FunctionParam[]
                    {
                        label,
                        new FunctionParam("[UnityEngine.Internal.DefaultValue(\"\\\"Button\\\"\")] GUIStyle",
                            "followingStyle", "followingStyle")
                        {
                            Comments = "后面的显示风格",
                        },
                    },
                };

                param.FunctionParams.AddRange(paramsList);
            }
            return param;
        }

        [Param]
        private static ClassParam GetLabelSelectable()
        {
            var param = new ClassParam
            {
                Comments = "绘制 可选择标签",
                FunctionName = "LabelSelectable",
                APIFunction = "EditorGUILayout.SelectableLabel",
                FunctionParams = new List<FunctionParam[]>(),
            };
            foreach (var item in new string[] { "string", "int" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "第一个标签" };
                if (item == "int") label.Output = "label.ToString()";

                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[]
                    {
                        label,
                        Options,
                    },
                    new FunctionParam[]
                    {
                        label,
                        Style,
                        Options,
                    },
                };
                param.FunctionParams.AddRange(paramsList);
            }
            return param;
        }

        [Param]
        private static ClassParam GetMaskField()
        {
            var param = new ClassParam
            {
                Comments = "绘制 可选择标签",
                FunctionName = "Mask",
                APIFunction = "EditorGUILayout.MaskField",
                ReturnType = "int",
                FunctionParams = new List<FunctionParam[]>(),
            };
            var value = new FunctionParam("int", "mask", "mask") { Comments = "选择值" };

            var displayedOptionsArray = new FunctionParam("string[]", "displayedOptions", "displayedOptions")
            {
                Comments = "选择内容"
            };
            var displayedOptionsList = new FunctionParam("IEnumerable<string>", "displayedOptions",
                "displayedOptions.ToArray()")
            {
                Comments = "选择内容"
            };
            foreach (var item in new string[] { "string", "GUIContent", "int", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "int") label.Output = "label.ToString()";
                if (item == "Texture") label.Output = "new GUIContent(label)";


                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[]
                    {
                        label, value, displayedOptionsArray,
                        Options,
                    },
                    new FunctionParam[]
                    {
                        label, value, displayedOptionsArray,
                        Style, Options,
                    },
                    new FunctionParam[]
                    {
                        label, value, displayedOptionsList,
                        Options,
                    },
                    new FunctionParam[]
                    {
                        label, value, displayedOptionsList,
                        Style, Options,
                    },
                    new FunctionParam[]
                    {
                        label, value, displayedOptionsArray,
                        Options,
                    },
                    new FunctionParam[]
                    {
                        label, value, displayedOptionsArray,
                        Style, Options,
                    },
                    /* ----------------------- */
                    new FunctionParam[]
                    {
                        value, displayedOptionsArray,
                        Options,
                    },
                    new FunctionParam[]
                    {
                        value, displayedOptionsArray,
                        Style, Options,
                    },
                    new FunctionParam[]
                    {
                        value, displayedOptionsList,
                        Options,
                    },
                    new FunctionParam[]
                    {
                        value, displayedOptionsList,
                        Style, Options,
                    },
                    new FunctionParam[]
                    {
                        value, displayedOptionsArray,
                        Options,
                    },
                    new FunctionParam[]
                    {
                        value, displayedOptionsArray,
                        Style, Options,
                    },
                };
                param.FunctionParams.AddRange(paramsList);
            }
            return param;
        }

        [Param]
        private static ClassParam GetEnumFlagsField()
        {
            var param = new ClassParam
            {
                Comments = "绘制 枚举菜单",
                FunctionName = "EnumFlags",
                APIFunction = "EditorGUILayout.EnumFlagsField",
                FunctionParams = new List<FunctionParam[]>(),
                MacroDefinition = "UNITY_2018_1_OR_NEWER",
                Generics = new Dictionary<string, string> { { "T", "Enum" } },
                ReturnType = "T",
            };
            var value = new FunctionParam("T", "value", "value") { Comments = "枚举值" };
            var includeObsolete = new FunctionParam("bool", "includeObsolete", "includeObsolete")
            {
                Comments = "true:包含带有ObsoleteAttribute的枚举值,false:排除"
            };
            foreach (var item in new string[] { "GUIContent", "string", "int", "bool", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "int" || item == "bool") label.Output = "new GUIContent(label.ToString())";
                if (item == "Texture" || item == "string") label.Output = "new GUIContent(label)";
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[]
                    {
                        value, Options,
                    },
                    new FunctionParam[]
                    {
                        label, value, Options,
                    },
                    new FunctionParam[]
                    {
                        label, value, includeObsolete, Options,
                    },
                    new FunctionParam[]
                    {
                        value, Style, Options,
                    },
                    new FunctionParam[]
                    {
                        label, value, Style, Options,
                    },
                    new FunctionParam[]
                    {
                        label, value, includeObsolete, Style, Options,
                    },
                };
                param.FunctionParams.AddRange(paramsList);
            }
            return param;
        }

        [Param]
        private static ClassParam GetEnumMaskPopup2020_OR_LOWER()
        {
            var param = new ClassParam
            {
                Comments = "绘制 枚举菜单",
                FunctionName = "EnumPopupMask",
                APIFunction = "EditorGUILayout.EnumMaskPopup",
                FunctionParams = new List<FunctionParam[]>(),
                MacroDefinition = "!UNITY_2020_1_OR_NEWER",
                Generics = new Dictionary<string, string> { { "T", "Enum" } },
                ReturnType = "T",
            };
            var value = new FunctionParam("T", "selected", "selected") { Comments = "枚举值" };
            foreach (var item in new string[] { "GUIContent", "string" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[]
                    {
                        label, value, Options,
                    },
                    new FunctionParam[]
                    {
                        label, value, Style, Options,
                    },
                };
                param.FunctionParams.AddRange(paramsList);
            }
            return param;
        }

        [Param]
        private static ClassParam GetEnumMaskField2020_OR_LOWER()
        {
            var param = new ClassParam
            {
                Comments = "绘制 枚举菜单",
                FunctionName = "EnumMask",
                APIFunction = "EditorGUILayout.EnumMaskField",
                FunctionParams = new List<FunctionParam[]>(),
                MacroDefinition = "!UNITY_2020_1_OR_NEWER",
                Generics = new Dictionary<string, string> { { "T", "Enum" } },
                ReturnType = "T",
            };
            var value = new FunctionParam("T", "value", "value") { Comments = "枚举值" };
            foreach (var item in new string[] { "GUIContent", "string" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[]
                    {
                        value, Options,
                    },
                    new FunctionParam[]
                    {
                        value, Style, Options,
                    },
                    new FunctionParam[]
                    {
                        label, value, Options,
                    },
                    new FunctionParam[]
                    {
                        label, value, Style, Options,
                    },
                };
                param.FunctionParams.AddRange(paramsList);
            }
            return param;
        }

        [Param]
        private static ClassParam GetButtonDropdown()
        {
            var param = new ClassParam
            {
                Comments = "绘制 下拉按钮",
                FunctionName = "ButtonDropdown",
                APIFunction = "EditorGUILayout.DropdownButton",
                FunctionParams = new List<FunctionParam[]>(),
                ReturnType = "bool",
            };
            foreach (var item in new string[] { "GUIContent", "string", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label, FocusType.Passive") { Comments = "标签" };
                if (item != "GUIContent") label.Output = "new GUIContent(label), FocusType.Passive";
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[]
                    {
                        label, Options,
                    },
                    new FunctionParam[]
                    {
                        label, Style, Options,
                    },
                };
                param.FunctionParams.AddRange(paramsList);
            }
            return param;
        }
        
        [Param]
        private static ClassParam GetButtonLink()
        {
            var param = new ClassParam
            {
                Comments = "绘制 Link按钮",
                FunctionName = "ButtonLink",
                APIFunction = "EditorGUILayout.LinkButton",
                FunctionParams = new List<FunctionParam[]>(),
                ReturnType = "bool",
                MacroDefinition = "UNITY_2021_1_OR_NEWER",
            };
            foreach (var item in new string[] { "GUIContent", "string", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item != "GUIContent") label.Output = "new GUIContent(label)";
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[]
                    {
                        label, Options,
                    },
                };
                param.FunctionParams.AddRange(paramsList);
            }
            return param;
        }
        
        [Param]
        private static ClassParam GetButton()
        {
            var param = new ClassParam
            {
                Comments = "绘制 按钮",
                FunctionName = "Button",
                APIFunction = "GUILayout.Button",
                FunctionParams = new List<FunctionParam[]>(),
                ReturnType = "bool",
            };
            foreach (var item in new string[] { "GUIContent", "string", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item != "GUIContent") label.Output = "new GUIContent(label)";
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[]
                    {
                        label, Options,
                    },
                };
                param.FunctionParams.AddRange(paramsList);
            }
            return param;
        }
    }
#>
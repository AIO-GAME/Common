<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AIO.Common</name>
    </assembly>
    <members>
        <member name="T:AIO.LruCache">
            <summary>
            LRU 缓存淘汰算法 (Least Recently Used)
            </summary>
        </member>
        <member name="T:AIO.LruCache.NodeInfo">
            <summary>
            节点信息
            </summary>
        </member>
        <member name="F:AIO.LruCache.NodeInfo.id">
            <summary>
            节点ID
            </summary>
        </member>
        <member name="P:AIO.LruCache.NodeInfo.Next">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="P:AIO.LruCache.NodeInfo.Prev">
            <summary>
            上一个节点
            </summary>
        </member>
        <member name="P:AIO.LruCache.First">
            <summary>
            第一个节点
            </summary>
        </member>
        <member name="M:AIO.LruCache.Init(System.UInt32)">
            <summary>
            初始化
            </summary>
            <param name="count">节点数量</param>
        </member>
        <member name="M:AIO.LruCache.SetActive(System.Int32)">
            <summary>
            设置节点为最新
            </summary>
            <param name="id">节点ID</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="T:AIO.MD4">
            <summary>
            MD4 Hash Algorithm in C#
            </summary>
            Taken from http://www.superstarcoders.com/blogs/posts/md4-hash-algorithm-in-c-sharp.aspx
            Probably not the best implementation of MD4, but it works.
        </member>
        <member name="M:AIO.MD4.#ctor">
            <summary>
            Creates an instance of the MD4 class.
            </summary>
        </member>
        <member name="M:AIO.MD4.Initialize">
            <inheritdoc />
        </member>
        <member name="M:AIO.MD4.HashCore(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MD4.HashFinal">
            <inheritdoc />
        </member>
        <member name="T:AIO.ExtendAction">
            <summary>
            函数扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendAction.GetTotalTime(System.Action)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ExtendAction.GetTotalTime``1(System.Action{``0},``0@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ExtendAction.GetTotalTime``1(System.Action{``0,``0},``0@,``0@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ExtendAction.GetTotalTime``1(System.Action{``0,``0,``0},``0@,``0@,``0@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ExtendAction.GetTotalTime``1(System.Action{``0,``0,``0,``0},``0@,``0@,``0@,``0@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ExtendAction.GetTotalTime``2(System.Action{``0,``1},``0@,``1@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ExtendAction.GetTotalTime``3(System.Action{``0,``1,``2},``0@,``1@,``2@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ExtendAction.GetTotalTime``4(System.Action{``0,``1,``2,``3},``0@,``1@,``2@,``3@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ExtendAction.GetTotalTime``1(System.Action{``0[]},``0[])">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="T:AIO.ExtendAppDomain">
            <summary>
            App Domain 扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendAppDomain.GetAttributes``1(System.AppDomain,System.Boolean@)">
            <summary>
            获取属性
            </summary>
            <typeparam name="T">属性类型</typeparam>
            <returns>属性数组</returns>
        </member>
        <member name="M:AIO.ExtendAppDomain.GetAttributes``1(System.AppDomain,System.Func{System.Type,``0,``0},System.Boolean@)">
            <summary>
            获取属性
            </summary>
            <typeparam name="T">属性类型</typeparam>
            <returns>属性数组</returns>
        </member>
        <member name="T:AIO.ExtendAssembly">
            <summary>
            程序集扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendAssembly.Directory(System.Reflection.Assembly)">
            <summary>
            程序集目录的完整路径，没有最后的斜杠 |
            Full path to the assembly directory, without final slash
            </summary>
        </member>
        <member name="T:AIO.ExtendFieldInfo">
            <summary>
            字段信息扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendFieldInfo.CanWrite(System.Reflection.FieldInfo)">
            <summary>
            是否能写入
            </summary>
        </member>
        <member name="T:AIO.ExtendIntPtr">
            <summary>
            句柄
            </summary>
        </member>
        <member name="M:AIO.ExtendIntPtr.ToConverseMemory(System.IntPtr)">
            <summary>
            转化为引用地址
            </summary>
        </member>
        <member name="M:AIO.ExtendIntPtr.TooConverseInts(System.IntPtr)">
            <summary>
            转化为int数组
            </summary>
        </member>
        <member name="M:AIO.ExtendIntPtr.TooConverseObject(System.IntPtr)">
            <summary>
            转化为 object
            </summary>
        </member>
        <member name="T:AIO.ExtendMethodBase">
            <summary>
            函数扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendMethodBase.GetParametersWithoutThis(System.Reflection.MethodBase)">
            <summary>
            获取一个方法的参数信息，但不包括扩展方法中的第一个“this”参数。
            </summary>
            <param name="methodBase">要获取参数信息的方法。</param>
            <returns>方法的参数信息（不包括扩展方法中的第一个“this”参数）。</returns>
            <remarks>如果方法是扩展方法，则跳过第一个参数（即“this”参数）。</remarks>
            <inheritdoc cref="T:System.Reflection.MethodBase"/>
        </member>
        <member name="T:AIO.ExtendMethodInfo">
            <summary>
            函数信息扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendMethodInfo.MakeGenericMethodVia(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            使用给定的类型构造泛型方法，返回一个 MethodInfo 对象。
            </summary>
            <remarks>
            返回的方法可能是开放构造的方法。
            </remarks>
            <param name="openConstructedMethod">要构造的开放构造方法</param>
            <param name="closedConstructedParameterTypes">用于构造泛型参数的类型</param>
            <returns>构造的泛型方法的 MethodInfo 对象</returns>
        </member>
        <member name="M:AIO.ExtendMethodInfo.IsUserDefinedConversion(System.Reflection.MethodInfo)">
            <summary>
            检查给定方法是否为用户定义的转换运算符。
            </summary>
            <param name="method">要检查的方法</param>
            <returns>如果方法为用户定义的转换运算符，则为 true；否则为 false。</returns>
        </member>
        <member name="M:AIO.ExtendMethodInfo.IsExtensionMethod(System.Reflection.MemberInfo)">
            <summary>
            判断一个成员是否为扩展方法。
            </summary>
            <param name="memberInfo">要判断的成员。</param>
            <returns>如果成员是扩展方法，则返回 true；否则返回 false。</returns>
            <remarks>
            扩展方法必须定义在静态类中，并且必须被 static 关键字修饰。
            </remarks>
            <inheritdoc cref="T:System.Reflection.MemberInfo"/>
        </member>
        <member name="M:AIO.ExtendMethodInfo.IsExtension(System.Reflection.MethodInfo)">
            <summary>
            判断一个方法是否为扩展方法。
            </summary>
            <param name="methodInfo">要判断的方法。</param>
            <returns>如果方法是扩展方法，则返回 true；否则返回 false。</returns>
            <remarks>
            扩展方法必须定义在静态类中，并且必须被 static 关键字修饰。
            </remarks>
            <inheritdoc cref="T:System.Reflection.MethodInfo"/>
        </member>
        <member name="M:AIO.ExtendMethodInfo.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            判断指定的元素是否具有指定类型的特性。
            </summary>
            <typeparam name="TAttribute">要判断的特性类型。</typeparam>
            <param name="element">要判断的元素。</param>
            <param name="inherit">指示是否搜索继承链以查找特性。</param>
            <returns>如果元素具有指定类型的特性，则返回 true；否则返回 false。</returns>
            <remarks>
            特性是在编译时确定的元数据，可以用于为程序集、模块、类型、成员等元素添加元数据。
            </remarks>
            <inheritdoc cref="T:System.Reflection.MemberInfo"/>
        </member>
        <member name="M:AIO.ExtendMethodInfo.IsStatic(System.Reflection.MemberInfo)">
            <summary>
            判断一个成员是否为静态成员。
            </summary>
            <param name="memberInfo">要判断的成员。</param>
            <returns>如果成员是静态成员，则返回 true；否则返回 false。</returns>
            <remarks>
            静态成员属于类型，而不是对象。静态成员可以通过类型名或实例访问。
            </remarks>
            <inheritdoc cref="T:System.Reflection.MemberInfo"/>
        </member>
        <member name="T:AIO.ExtendParameterInfo">
            <summary>
            参数信息扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendParameterInfo.HasOutModifier(System.Reflection.ParameterInfo)">
            <summary>
            是否为Out
            </summary>
        </member>
        <member name="T:AIO.ExtendPropertyInfo">
            <summary>
            属性信息扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendPropertyInfo.IsStatic(System.Reflection.PropertyInfo)">
            <summary>
            是否为静态
            </summary>
        </member>
        <member name="T:AIO.ExtendSocket">
            <summary>
            Socket 扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendSocket.ToConverseIP(System.Net.Sockets.Socket)">
            <summary>
            转化为IP地址
            </summary>
        </member>
        <member name="T:AIO.ExtendStringBuilder">
            <summary>
            可变字符串扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendStringBuilder.AppendLineFormat(System.Text.StringBuilder,System.String@,System.Object[])">
            <summary>
            添加
            </summary>
            <param name="sb">可变字符串</param>
            <param name="format">格式化</param>
            <param name="args">可变参数</param>
        </member>
        <member name="T:AIO.ExtendString">
            <summary>
            字符工具类
            </summary>
        </member>
        <member name="M:AIO.ExtendString.AppendToFrontChar(System.String,System.Char@,System.Int32@)">
            <summary>
            在最前添加指定字符到指定长度
            </summary>
        </member>
        <member name="M:AIO.ExtendString.AppendToFront(System.String,System.String[])">
            <summary>
            合并字符 前面
            </summary>
        </member>
        <member name="M:AIO.ExtendString.AppendToFront(System.String,System.Char[])">
            <summary>
            在最前添加指定字符
            </summary>
        </member>
        <member name="M:AIO.ExtendString.AppendToLastChar(System.String,System.Char@,System.Int32@)">
            <summary>
            在最后添加指定字符到指定字节长度
            </summary>
        </member>
        <member name="M:AIO.ExtendString.AppendToLast(System.String,System.String[])">
            <summary>
            合并字符 后面
            </summary>
        </member>
        <member name="M:AIO.ExtendString.AppendToLast(System.String,System.Char[])">
            <summary>
            在最后添加指定字符到指定长度
            </summary>
        </member>
        <member name="M:AIO.ExtendString.Contains(System.String,System.String@)">
            <summary>
            判断集合中 是否有重复
            </summary>
            <param name="chars">集合</param>
            <param name="targetChars">匹配集合</param>
            <returns>Ture:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.ExtendString.Contains(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            判断集合中 是否有重复
            </summary>
            <param name="chars">集合</param>
            <param name="targetChars">匹配集合</param>
            <returns>Ture:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.ExtendString.Contains(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            判断集合中 是否有重复
            </summary>
            <param name="chars">集合</param>
            <param name="targetChars">匹配集合</param>
            <returns>Ture:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.ExtendString.ContainsOrdinalIgnoreCase(System.String,System.String@)">
            <summary>
            检查字符串是否包含指定的子字符串，忽略大小写
            </summary>
            <param name="str">要搜索的字符串</param>
            <param name="needle">要在 haystack 中搜索的子字符串</param>
            <returns>如果 haystack 包含 needle，则为 true；否则为 false</returns>
        </member>
        <member name="M:AIO.ExtendString.Contains(System.String,System.String@,System.StringComparison)">
            <summary>
            检查字符串是否包含指定的子字符串，忽略大小写
            </summary>
            <param name="str">要搜索的字符串</param>
            <param name="needle">要在 haystack 中搜索的子字符串</param>
            <param name="comparison">搜索模式</param>
            <returns>如果 haystack 包含 needle，则为 true；否则为 false</returns>
        </member>
        <member name="M:AIO.ExtendString.Contains(System.String,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            判断路径是是否包含指定字符
            </summary>
            <returns>Ture:符合 False:不符合</returns>
        </member>
        <member name="M:AIO.ExtendString.Contains(System.String,System.Int32,System.Int32)">
            <summary>
            是否包含指定字符
            </summary>
            <returns>Ture:符合 False:不符合</returns>
        </member>
        <member name="M:AIO.ExtendString.PartsAround(System.String,System.Char@,System.String@,System.String@)">
            <summary>
            获取字符串中某个字符左右两侧的部分。
            </summary>
            <param name="str">指定的字符串。</param>
            <param name="c">要查找的字符。</param>
            <param name="before">输出参数，表示 c 左侧的字符串。</param>
            <param name="after">输出参数，表示 c 右侧的字符串。</param>
            <remarks>
            如果字符串中不包含指定的字符，则 before 为整个字符串，after 为 null。
            </remarks>
        </member>
        <member name="M:AIO.ExtendString.PartAfter(System.String,System.Char@)">
            <summary>
            获取字符串中某个字符右侧的部分。
            </summary>
            <param name="str">指定的字符串。</param>
            <param name="c">要查找的字符。</param>
            <returns>包含 c 右侧内容的字符串；如果字符串中不包含指定的字符，则返回整个字符串。</returns>
        </member>
        <member name="M:AIO.ExtendString.ReplaceMultiple(System.String,System.Collections.Generic.HashSet{System.Char}@,System.Char@)">
            <summary>
            将字符串中多个指定字符替换为另一个字符。
            </summary>
            <param name="str">指定的字符串。</param>
            <param name="haystacks">要替换的字符集合。</param>
            <param name="replacement">替换为此字符。</param>
            <returns>替换后的字符串。</returns>
        </member>
        <member name="M:AIO.ExtendString.XToLower(System.String)">
            <summary>
            转化为小写
            </summary>
        </member>
        <member name="M:AIO.ExtendString.XToUpper(System.String)">
            <summary>
            转化为大写
            </summary>
        </member>
        <member name="M:AIO.ExtendString.XToLower(System.String,System.Int32@)">
            <summary>
            转化为小写
            </summary>
        </member>
        <member name="M:AIO.ExtendString.XToUpper(System.String,System.Int32@)">
            <summary>
            转化为大写
            </summary>
        </member>
        <member name="M:AIO.ExtendString.Repeat(System.String,System.Int32@)">
            <summary>
            重复
            </summary>
        </member>
        <member name="M:AIO.ExtendString.EqualsNull(System.String)">
            <summary>
            比较Null值
            </summary>
        </member>
        <member name="M:AIO.ExtendString.Reverse(System.String)">
            <summary>
            字符串反转
            </summary>
        </member>
        <member name="M:AIO.ExtendString.Clone(System.String,System.UInt32@)">
            <summary>
            重复N此 复制传入数据
            </summary>
        </member>
        <member name="M:AIO.ExtendString.Clone(System.Char,System.UInt32@)">
            <summary>
            重复N此 复制传入数据
            </summary>
        </member>
        <member name="M:AIO.ExtendString.Filter(System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            从字符串中过滤出指定类型的字符，并返回过滤后的字符串
            </summary>
            <param name="s">要过滤的字符串</param>
            <param name="letters">是否保留字母</param>
            <param name="numbers">是否保留数字</param>
            <param name="whitespace">是否保留空格</param>
            <param name="symbols">是否保留符号</param>
            <param name="punctuation">是否保留标点符号</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:AIO.ExtendString.FilterReplace(System.String,System.Char@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            从字符串中过滤出指定类型的字符，并用指定字符替换被过滤的字符
            </summary>
            <param name="s">要过滤的字符串</param>
            <param name="replacement">用于替换被过滤字符的字符</param>
            <param name="merge">是否将连续被过滤的字符合并为单个替换字符</param>
            <param name="letters">是否保留字母</param>
            <param name="numbers">是否保留数字</param>
            <param name="whitespace">是否保留空格</param>
            <param name="symbols">是否保留符号</param>
            <param name="punctuation">是否保留标点符号</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:AIO.ExtendString.Prettify(System.String)">
            <summary>
            美化
            </summary>
        </member>
        <member name="M:AIO.ExtendString.FirstCharacterToUpper(System.String)">
            <summary>
            首字母转为大写
            </summary>
        </member>
        <member name="M:AIO.ExtendString.Format(System.String,System.Object[])">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:AIO.ExtendString.Format(System.String,System.String[])">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:AIO.ExtendString.Format(System.String,System.Int32[])">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:AIO.ExtendString.Format(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:AIO.ExtendString.GetBytesLength(System.String)">
            <summary>
            获取字节长度
            </summary>
        </member>
        <member name="M:AIO.ExtendString.GetOcclusion(System.String,System.String,System.Char,System.Char)">
            <summary>
            获取闭合字符段
            </summary>
        </member>
        <member name="M:AIO.ExtendString.SetOcclusion(System.String,System.String,System.Char,System.Char)">
            <summary>
            获取闭合字符段
            </summary>
        </member>
        <member name="M:AIO.ExtendString.IndexesOf(System.String,System.String)">
            <summary>
            在字符串中查找所有出现指定子字符串的位置，忽略大小写
            </summary>
            <param name="haystack">要搜索的字符串</param>
            <param name="needle">要在 haystack 中搜索的子字符串</param>
            <returns>包含 needle 的所有索引的 IEnumerable(int) 对象</returns>
        </member>
        <member name="M:AIO.ExtendString.InsertFixed``1(System.String,System.Int32@,``0@)">
            <summary>
            将指定内容循环插入到字符串中
            </summary>
            <typeparam name="T">指定内容的类型</typeparam>
            <param name="str">原始字符串</param>
            <param name="space">间隔长度</param>
            <param name="info">指定内容</param>
            <returns>插入指定内容后的字符串</returns>
        </member>
        <member name="M:AIO.ExtendString.IsWordBeginning(System.String,System.Int32@)">
            <summary>
            是否为单词开始
            </summary>
        </member>
        <member name="M:AIO.ExtendString.IsNullOrEmpty(System.String)">
            <summary>
            判断是否为Null
            </summary>
        </member>
        <member name="M:AIO.ExtendString.PathGetFileName(System.String,System.Boolean@)">
            <summary>
            获取文件名 HasExtension = false 没有扩展名
            </summary>
        </member>
        <member name="M:AIO.ExtendString.PathCombine(System.String,System.String[])">
            <summary>
            获取路径
            </summary>
        </member>
        <member name="M:AIO.ExtendString.PathCombine(System.String,System.String)">
            <summary>
            获取路径
            </summary>
        </member>
        <member name="M:AIO.ExtendString.PathCombine(System.String,System.String,System.String)">
            <summary>
            获取路径
            </summary>
        </member>
        <member name="M:AIO.ExtendString.PathCombine(System.String,System.String,System.String,System.String)">
            <summary>
            获取路径
            </summary>
        </member>
        <member name="M:AIO.ExtendString.PathGetExtension(System.String)">
            <summary>
            获取文件扩展名
            </summary>
        </member>
        <member name="M:AIO.ExtendString.PathChangeExtension(System.String,System.String)">
            <summary>
            修改文件扩展名
            </summary>
        </member>
        <member name="M:AIO.ExtendString.PathNormalize(System.String)">
            <summary>
            一个新的规范化字符串，其文本值与此字符串相同，但其二进制表示形式符合范式
            </summary>
        </member>
        <member name="M:AIO.ExtendString.PathGetRoot(System.String)">
            <summary>
            获取根目录 I:\
            </summary>
        </member>
        <member name="M:AIO.ExtendString.PathGetLastFloder(System.String)">
            <summary>
            获取上一级目录
            </summary>
        </member>
        <member name="M:AIO.ExtendString.RichS(System.String,System.Int32@)">
            <summary>
            富文本 字号
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
        </member>
        <member name="M:AIO.ExtendString.RichC(System.String,System.String@)">
            <summary>
            富文本 颜色
            </summary>
            <param name="content"></param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.ExtendString.RichI(System.String)">
            <summary>
            富文本 斜体
            </summary>
        </member>
        <member name="M:AIO.ExtendString.RichB(System.String)">
            <summary>
            富文本 加粗
            </summary>
        </member>
        <member name="M:AIO.ExtendString.RichBI(System.String)">
            <summary>
            富文本 加粗 斜体
            </summary>
        </member>
        <member name="M:AIO.ExtendString.RichSB(System.String,System.String@)">
            <summary>
            富文本 字号 加粗
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
        </member>
        <member name="M:AIO.ExtendString.RichSI(System.String,System.Int32@)">
            <summary>
            富文本 字号 斜体
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
        </member>
        <member name="M:AIO.ExtendString.RichCS(System.String,System.Int32@,System.String@)">
            <summary>
            富文本 字号 颜色
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.ExtendString.RichCB(System.String,System.String@)">
            <summary>
            富文本 颜色 加粗
            </summary>
            <param name="content"></param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.ExtendString.RichCI(System.String,System.String@)">
            <summary>
            富文本 颜色 斜体
            </summary>
            <param name="content"></param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.ExtendString.RichSBI(System.String,System.String@)">
            <summary>
            富文本 字号 加粗 斜体
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
        </member>
        <member name="M:AIO.ExtendString.RichCSB(System.String,System.Int32@,System.String@)">
            <summary>
            富文本 颜色 字号 加粗
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.ExtendString.RichCSI(System.String,System.Int32@,System.String@)">
            <summary>
            富文本 颜色 字号 斜体
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.ExtendString.RichCBI(System.String,System.String@)">
            <summary>
            富文本 颜色 加粗 斜体
            </summary>
            <param name="content"></param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.ExtendString.RichAll(System.String,System.Int32@,System.String@)">
            <summary>
            富文本 颜色 字号 加粗 斜体
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.ExtendString.XSplit(System.String,System.Char@)">
            <summary>
            分组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.SplitOnce(System.String,System.Char@)">
            <summary>
            分组一次
            </summary>
        </member>
        <member name="M:AIO.ExtendString.SplitLine(System.String)">
            <summary>
            将字符串以行拆分为数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.SplitWords(System.String,System.Char@)">
            <summary>
            单词分割
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToBinaryString(System.Int32)">
            <summary>
            将整数类型的值转换为指定长度的二进制字符串。如果二进制字符串长度小于指定长度，则在左侧使用字符 '0' 进行填充。
            </summary>
            <param name="value">要进行转换的整数值。</param>
            <returns>转换后的二进制字符串。</returns>
        </member>
        <member name="M:AIO.ExtendString.ToBinaryString(System.Int64)">
            <summary>
            将长整型类型的值转换为指定长度的二进制字符串。如果二进制字符串长度小于指定长度，则在左侧使用字符 '0' 进行填充。
            </summary>
            <param name="value">要进行转换的长整型值。</param>
            <returns>转换后的二进制字符串。</returns>
        </member>
        <member name="M:AIO.ExtendString.ToBinaryString(System.Enum)">
            <summary>
            将枚举类型的值转换为指定长度的二进制字符串。如果二进制字符串长度小于指定长度，则在左侧使用字符 '0' 进行填充。
            </summary>
            <param name="value">要进行转换的枚举值。</param>
            <returns>转换后的二进制字符串。</returns>
        </member>
        <member name="M:AIO.ExtendString.ToConverULong(System.String)">
            <summary>
            解析字符串为 ulong
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverUInt(System.String)">
            <summary>
            解析字符串为 UInt
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverUshort(System.String)">
            <summary>
            解析字符串为 UShort
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverDouble(System.String)">
            <summary>
            解析字符串为 Double
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverDecimal(System.String)">
            <summary>
            解析字符串为 Decimal
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverDateTime(System.String)">
            <summary>
            解析字符串为 DateTime
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverChar(System.String)">
            <summary>
            解析字符串为 Char
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverBytes(System.String)">
            <summary>
            解析字符串为 Byte
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverBoolean(System.String)">
            <summary>
            解析字符串为 Boolean
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverSByte(System.String)">
            <summary>
            解析字符串为 SByte
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverShort(System.String)">
            <summary>
            解析字符串为 Short
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverInt(System.String)">
            <summary>
            解析字符串为 Int
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverLong(System.String)">
            <summary>
            解析字符串为 Long
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverFloat(System.String)">
            <summary>
            解析字符串为 Float
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverInts(System.String)">
            <summary>
            解析字符串(以,分割)为一维数字数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverInts(System.String,System.Char@)">
            <summary>
            解析字符串(以,分割)为一维数字数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverIntss(System.String)">
            <summary>
            解析字符串(以,|分割)为二维数字数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverIntsss(System.String)">
            <summary>
            解析字符串(以,|,:分割)为三维数字数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverInts(System.Collections.Generic.IList{System.String})">
            <summary>
            转化为Int数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverInts(System.String[][])">
            <summary>
            转化为Int数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverInts(System.String[][][])">
            <summary>
            转化为Int数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverLongs(System.String)">
            <summary>
            解析字符串(以,分割)为一维数字数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverLongss(System.String)">
            <summary>
            解析字符串(以,|分割)为二维数字数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverLongs(System.Collections.Generic.IList{System.String})">
            <summary>
            解析字符串(以,|分割)为一维数字数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverLongss(System.String[][])">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendString.ToConverLongsss(System.String[][][])">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendString.ToConverStrings(System.String)">
            <summary>
            解析字符串(以,分割)为一维数字数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverStrings(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="split"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendString.ToConverStringss(System.String)">
            <summary>
            解析字符串(以,|分割)为二维数字数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverStringsss(System.String)">
            <summary>
            解析字符串(以,|分割)为三维数字数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverBools(System.String[])">
            <summary>
            转换为Bool 一维数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverBoolss(System.String[][])">
            <summary>
            转换为Bool 二维数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverBoolsss(System.String[][][])">
            <summary>
            转换为Bool 三维数组
            </summary>
        </member>
        <member name="M:AIO.ExtendString.ToConverBase64(System.String)">
            <summary>
            转换Base64
            </summary>
        </member>
        <member name="M:AIO.ExtendString.FromBase64ToStr(System.String)">
            <summary>
            Base64转化为Str
            </summary>
        </member>
        <member name="M:AIO.ExtendString.TrimStart(System.String,System.String@)">
            <summary>
            从当前字符串的开头移除指定字符串。如果当前字符串不是以指定字符串开头，则返回原始字符串。
            </summary>
            <param name="source">要进行操作的字符串。</param>
            <param name="value">要移除的字符串。</param>
            <returns>移除指定字符串后的新字符串，或者如果当前字符串不是以指定字符串开头，则返回原始字符串。</returns>
        </member>
        <member name="M:AIO.ExtendString.Truncate(System.String,System.Int32@,System.String@)">
            <summary>
            将当前字符串截断到指定的最大长度，并在末尾添加可选的后缀。如果当前字符串长度小于等于指定的最大长度，则返回原始字符串。
            </summary>
            <param name="value">要进行操作的字符串。</param>
            <param name="maxLength">要截断的最大长度。</param>
            <param name="suffix">可选的后缀，默认值为 "..."。</param>
            <returns>截断后的新字符串，或者如果当前字符串长度小于等于指定的最大长度，则返回原始字符串。</returns>
        </member>
        <member name="M:AIO.ExtendString.TrimEnd(System.String,System.String@)">
            <summary>
            从当前字符串的结尾移除指定字符串。如果当前字符串不是以指定字符串结尾，则返回原始字符串。
            </summary>
            <param name="source">要进行操作的字符串。</param>
            <param name="value">要移除的字符串。</param>
            <returns>移除指定字符串后的新字符串，或者如果当前字符串不是以指定字符串结尾，则返回原始字符串。</returns>
        </member>
        <member name="T:AIO.ExtendType">
            <summary>
            类扩展
            </summary>
            <see>
                <cref>https://docs.microsoft.com/en-us/dotnet/api/system.type?view=net-5.0</cref>
            </see>
        </member>
        <member name="M:AIO.ExtendType.AndBaseTypeAndInterfaces(System.Type)">
            <summary>
            获取指定类型及其基类和接口实现的列表。
            </summary>
            <param name="type">要获取列表的类型。</param>
            <returns>包含指定类型及其基类和接口实现的 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 对象。</returns>
        </member>
        <member name="M:AIO.ExtendType.BaseTypeAndInterfaces(System.Type,System.Boolean)">
            <summary>
            获取指定类型的基类和实现的接口列表。
            </summary>
            <param name="type">要获取列表的类型。</param>
            <param name="inheritedInterfaces">指定是否包括继承的接口，默认为 true。</param>
            <returns>包含指定类型的基类和实现的接口列表的 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 对象。</returns>
        </member>
        <member name="M:AIO.ExtendType.AndInterfaces(System.Type)">
            <summary>
            获取指定类型及其实现的接口列表。
            </summary>
            <param name="type">要获取列表的类型。</param>
            <returns>包含指定类型及其实现的接口列表的 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 对象。</returns>
        </member>
        <member name="M:AIO.ExtendType.AndHierarchy(System.Type)">
            <summary>
            获取指定类型及其继承层次结构中的所有类型列表。
            </summary>
            <param name="type">要获取列表的类型。</param>
            <returns>包含指定类型及其继承层次结构中的所有类型列表的 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 对象。</returns>
        </member>
        <member name="M:AIO.ExtendType.Yield(System.Type)">
            <summary>
            返回包含当前 <see cref="T:System.Type"/> 的单元素序列。
            </summary>
            <param name="t">要返回的类型。</param>
            <returns>一个包含指定类型的单元素序列。</returns>
        </member>
        <member name="M:AIO.ExtendType.Hierarchy(System.Type)">
            <summary>
            获取指定类型及其继承层次结构中的所有类型列表，不包括实现的接口。
            </summary>
            <param name="type">要获取列表的类型。</param>
            <returns>包含指定类型及其继承层次结构中的所有类型列表（不包括实现的接口）的 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 对象。</returns>
        </member>
        <member name="M:AIO.ExtendType.GetExtendedMembers(System.Type,System.Reflection.BindingFlags@)">
            <summary>
            获取指定类型的所有成员信息，并包括扩展方法。
            </summary>
            <param name="type">要获取其成员信息的类型。</param>
            <param name="flags">用于控制成员信息筛选的 BindingFlags 枚举值之一。</param>
            <returns>一个数组，包含指定类型的所有成员信息以及扩展方法。</returns>
        </member>
        <member name="M:AIO.ExtendType.GetExtensionMethods(System.Type,System.Boolean@)">
            <summary>
            获取指定类型的所有扩展方法。
            </summary>
            <param name="thisArgumentType">扩展方法的第一个参数类型。</param>
            <param name="inherited">是否包括从基类继承而来的扩展方法，默认为 true。</param>
            <returns>一个 IEnumerable，包含指定类型的所有扩展方法。</returns>
        </member>
        <member name="M:AIO.ExtendType.GetFlattenedMember(System.Type,System.String@)">
            <summary>
            获取指定类型及其基类中所有名为 <paramref name="memberName"/> 的成员列表。
            </summary>
            <param name="type">要获取成员列表的类型。</param>
            <param name="memberName">成员名称。</param>
            <returns>包含指定类型及其基类中所有名为 <paramref name="memberName"/> 的成员列表的 <see cref="T:System.Reflection.MemberInfo"/> 数组。</returns>
        </member>
        <member name="M:AIO.ExtendType.GetFlattenedMethod(System.Type,System.String@)">
            <summary>
            获取指定类型及其基类中第一个名为 <paramref name="methodName"/> 的方法。
            </summary>
            <param name="type">要获取方法的类型。</param>
            <param name="methodName">方法名称。</param>
            <returns>指定类型及其基类中第一个名为 <paramref name="methodName"/> 的方法，如果未找到则返回 null。</returns>
        </member>
        <member name="M:AIO.ExtendType.GetFlattenedMethods(System.Type,System.String)">
            <summary>
            获取指定类型及其基类中所有名为 <paramref name="methodName"/> 的方法列表。
            </summary>
            <param name="type">要获取方法列表的类型。</param>
            <param name="methodName">方法名称。</param>
            <returns>包含指定类型及其基类中所有名为 <paramref name="methodName"/> 的方法列表的 <see cref="T:System.Reflection.MethodInfo"/> 枚举。</returns>
        </member>
        <member name="M:AIO.ExtendType.GetFlattenedProperty(System.Type,System.String@)">
            <summary>
            获取指定类型及其基类中第一个名为 <paramref name="propertyName"/> 的属性。
            </summary>
            <param name="type">要获取属性的类型。</param>
            <param name="propertyName">属性名称。</param>
            <returns>指定类型及其基类中第一个名为 <paramref name="propertyName"/> 的属性，如果未找到则返回 null。</returns>
        </member>
        <member name="M:AIO.ExtendType.GetInterfaces(System.Type,System.Boolean@)">
            <summary>
            获取指定类型所实现的所有接口列表，可选择是否包括继承的接口。
            </summary>
            <param name="type">要获取接口列表的类型。</param>
            <param name="includeInherited">指定是否包括继承的接口。</param>
            <returns>包含指定类型所实现的所有接口列表的 <see cref="T:System.Type"/> 枚举。</returns>
        </member>
        <member name="M:AIO.ExtendType.GetListElementType(System.Type,System.Boolean@)">
            <summary>
            获取泛型列表类型的元素类型。如果无法确定元素类型，则返回 null（或 <see cref="T:System.Object"/>）。
            </summary>
            <param name="listType">要获取元素类型的泛型列表类型。</param>
            <param name="allowNonGeneric">指定当列表类型不是泛型列表类型时，是否返回 <see cref="T:System.Object"/> 作为元素类型。</param>
            <returns>泛型列表类型的元素类型，如果无法确定元素类型，则返回 null（或 <see cref="T:System.Object"/>）。</returns>
        </member>
        <member name="M:AIO.ExtendType.GetEnumerableElementType(System.Type,System.Boolean@)">
            <summary>
            获取可枚举类型的元素类型。如果无法确定元素类型，则返回 null（或 <see cref="T:System.Object"/>）。
            </summary>
            <param name="enumerableType">要获取元素类型的可枚举类型。</param>
            <param name="allowNonGeneric">指定当列表类型不是泛型列表类型时，是否返回 <see cref="T:System.Object"/> 作为元素类型。</param>
            <returns>可枚举类型的元素类型，如果无法确定元素类型，则返回 null（或 <see cref="T:System.Object"/>）。</returns>
            <see>
                <cref>http://stackoverflow.com/a/12728562</cref>
            </see>
        </member>
        <member name="M:AIO.ExtendType.GetDictionaryItemType(System.Type,System.Boolean@,System.Int32@)">
            <summary>
            获取字典类型的键或值类型。如果无法确定键或值类型，则返回 null（或 <see cref="T:System.Object"/>）。
            </summary>
            <param name="dictionaryType">要获取键或值类型的字典类型。</param>
            <param name="allowNonGeneric">指定当字典类型不是泛型字典类型时，是否返回 <see cref="T:System.Object"/> 作为键或值类型。</param>
            <param name="genericArgumentIndex">指定要获取的泛型参数的索引。</param>
            <returns>字典类型的键或值类型，如果无法确定键或值类型，则返回 null（或 <see cref="T:System.Object"/>）。</returns>
        </member>
        <member name="M:AIO.ExtendType.GetDictionaryKeyType(System.Type,System.Boolean@)">
            <summary>
            获取字典类型的键类型。如果无法确定键类型，则返回 null（或 <see cref="T:System.Object"/>）。
            </summary>
            <param name="dictionaryType">要获取键类型的字典类型。</param>
            <param name="allowNonGeneric">指定当字典类型不是泛型字典类型时，是否返回 <see cref="T:System.Object"/> 作为键类型。</param>
            <returns>字典类型的键类型，如果无法确定键类型，则返回 null（或 <see cref="T:System.Object"/>）。</returns>
        </member>
        <member name="M:AIO.ExtendType.GetDictionaryValueType(System.Type,System.Boolean@)">
            <summary>
            获取字典类型的值类型。如果无法确定值类型，则返回 null（或 <see cref="T:System.Object"/>）。
            </summary>
            <param name="dictionaryType">要获取值类型的字典类型。</param>
            <param name="allowNonGeneric">指定当字典类型不是泛型字典类型时，是否返回 <see cref="T:System.Object"/> 作为值类型。</param>
            <returns>字典类型的值类型，如果无法确定值类型，则返回 null（或 <see cref="T:System.Object"/>）。</returns>
        </member>
        <member name="M:AIO.ExtendType.GetTypesSafely(System.Reflection.Assembly)">
            <summary>
            安全地获取程序集中定义的所有类型。如果无法加载某些类型，则跳过它们并返回已成功加载的类型列表。
            </summary>
            <param name="assembly">要获取类型列表的程序集。</param>
            <returns>包含程序集中定义的所有已成功加载类型的 <see cref="T:System.Type"/> 枚举。</returns>
        </member>
        <member name="M:AIO.ExtendType.IsUpcast(System.Type,System.Type@)">
            <summary>
            确定给定的源 Type 是否可以向上转换为指定的目标 Type。
            </summary>
            <param name="source">要检查向上转换的 Type。</param>
            <param name="destination">source Type 要转换成的 Type。</param>
            <returns>如果从源 Type 到目标 Type 存在向上转换，则为 true；否则为 false。</returns>
        </member>
        <member name="M:AIO.ExtendType.IsDowncast(System.Type,System.Type@)">
            <summary>
            确定给定的源 Type 是否可以向下转换为指定的目标 Type。
            </summary>
            <param name="source">要检查向下转换的 Type。</param>
            <param name="destination">source Type 要转换成的 Type。</param>
            <returns>如果从源 Type 到目标 Type 存在向下转换，则为 true；否则为 false。</returns>
        </member>
        <member name="M:AIO.ExtendType.IsNumeric(System.Type)">
            <summary>
            判断是否为数据类型
            </summary>
        </member>
        <member name="M:AIO.ExtendType.IsNullable(System.Type)">
            <summary>
            检查类型是否可空
            </summary>
            <returns>如果类型是引用类型或可空类型，则返回 true</returns>
            <see>
                <cref>http://stackoverflow.com/a/1770232</cref>
            </see>
        </member>
        <member name="M:AIO.ExtendType.IsReferenceType(System.Type)">
            <summary>
            检查类型是否为引用类型
            </summary>
            <returns>如果类型不是值类型，则返回 true</returns>
        </member>
        <member name="M:AIO.ExtendType.IsStruct(System.Type)">
            <summary>
            检查类型是否为 struct
            </summary>
            <returns>如果类型是值类型，但不是原始类型或枚举类型，则返回 true</returns>
        </member>
        <member name="M:AIO.ExtendType.IsAssignableFrom``1(System.Type,``0@)">
            <summary>
            检查类型是否可以从给定对象转换而来
            </summary>
        </member>
        <member name="M:AIO.ExtendType.IsBasic(System.Type)">
            <summary>
            检查类型是否为基本类型
            </summary>
        </member>
        <member name="M:AIO.ExtendType.IsStatic(System.Type)">
            <summary>
            检查类型是否为静态
            </summary>
            <returns>如果类型是抽象的和密封的，则返回 true（静态类）</returns>
        </member>
        <member name="M:AIO.ExtendType.IsAbstract(System.Type)">
            <summary>
            检查类型是否为抽象
            </summary>
            <returns>如果类型是抽象的，则返回 true，但不要用于静态类型</returns>
        </member>
        <member name="M:AIO.ExtendType.IsConcrete(System.Type)">
            <summary>
            检查类型是否具体
            </summary>
            <returns>如果类型不是抽象的、接口或包含泛型参数，则返回 true</returns>
        </member>
        <member name="M:AIO.ExtendType.IsMakeGenericTypeVia(System.Type,System.Type)">
            <summary>
            判断一个类型是否能通过另一个类型构造而来
            </summary>
        </member>
        <member name="M:AIO.ExtendType.MakeGenericTypeVia(System.Type,System.Type@,System.Collections.Generic.IDictionary{System.Type,System.Type}@,System.Boolean@)">
            <summary>
            使用另一个关闭构造类型的类型参数，将开放式构造类型解析为已关闭构造类型。
            请务必小心谨慎，并且确保所有的泛型参数和类型都正确地指定和解析，以避免出现意外行为和错误结果。
            </summary>
            <param name="openConstructedType">要解析的开放式构造类型。</param>
            <param name="closedConstructedType">将用于解析的已关闭构造类型。</param>
            <param name="resolvedGenericParameters">递归解析过程中已解析的泛型参数的字典。此参数可以为空，但不应为 null。</param>
            <param name="safe">如果为 true，则在无法安全地将开放式构造类型解析为已关闭构造类型时引发异常。如果为 false，则回退到不安全的行为，这可能会导致错误的结果或异常。</param>
            <returns>使用已关闭构造类型的类型参数实例化时与开放式构造类型对应的已关闭构造类型。</returns>
        </member>
        <member name="M:AIO.ExtendType.Resolve(System.Type)">
            <summary>
            返回类型本身，具有一致的接口。
            </summary>
            <param name="type">要解析的类型</param>
            <returns>输入的类型实例本身</returns>
        </member>
        <member name="M:AIO.ExtendType.Reset``1(``0,System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.ICollection{System.String}@,System.Type@,System.Func{System.Type,System.Boolean}@,System.Boolean@)">
            <summary>
            将对象的所有字段和属性重置为它们的默认值。
            </summary>
            <typeparam name="T">要重置的对象类型</typeparam>
            <param name="obj">要重置的对象</param>
            <param name="fieldNames">要重置的字段名称（可选）</param>
            <param name="propNames">要重置的属性名称（可选）</param>
            <param name="resetReadOnly">是否重置只读字段和属性（默认为false）</param>
            <param name="typeFilter">用于过滤要重置的对象的类型（默认为null）</param>
            <param name="customFilter">自定义过滤器</param>
        </member>
        <member name="M:AIO.ExtendType.Reset``1(``0,System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.ICollection{System.String}@,System.Func{System.Type,System.Boolean}@,System.Boolean@)">
            <summary>
            将对象的所有字段和属性重置为它们的默认值，可以根据自定义过滤器和类型过滤器进行筛选。
            </summary>
            <typeparam name="T">要重置的对象类型</typeparam>
            <param name="obj">要重置的对象</param>
            <param name="fieldNames">要重置的字段名称（可选）</param>
            <param name="propNames">要重置的属性名称（可选）</param>
            <param name="customFilter">自定义过滤器</param>
            <param name="resetReadOnly">是否重置只读字段和属性（默认为false）</param>
        </member>
        <member name="M:AIO.ExtendType.Reset``1(``0,System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.ICollection{System.String}@,System.Type@,System.Boolean@)">
            <summary>
            将对象的所有字段和属性重置为它们的默认值，可以根据自定义过滤器和类型过滤器进行筛选。
            </summary>
            <typeparam name="T">要重置的对象类型</typeparam>
            <param name="obj">要重置的对象</param>
            <param name="fieldNames">要重置的字段名称（可选）</param>
            <param name="propNames">要重置的属性名称（可选）</param>
            <param name="typeFilter">用于过滤要重置的对象的类型（默认为null）</param>
            <param name="resetReadOnly">是否重置只读字段和属性（默认为false）</param>
        </member>
        <member name="M:AIO.ExtendType.Reset``1(``0,System.Type@,System.Func{System.Type,System.Boolean}@,System.Boolean@)">
            <summary>
            将对象的所有字段和属性重置为它们的默认值，可以根据自定义过滤器和类型过滤器进行筛选。
            </summary>
            <typeparam name="T">要重置的对象类型</typeparam>
            <param name="obj">要重置的对象</param>
            <param name="typeFilter">用于过滤要重置的对象的类型（默认为null）</param>
            <param name="customFilter">自定义过滤器</param>
            <param name="resetReadOnly">是否重置只读字段和属性（默认为false）</param>
        </member>
        <member name="M:AIO.ExtendType.Reset``1(``0,System.Func{System.Type,System.Boolean}@,System.Boolean@)">
            <summary>
            将对象的所有字段和属性重置为它们的默认值，可以根据自定义过滤器和类型过滤器进行筛选。
            </summary>
            <typeparam name="T">要重置的对象类型</typeparam>
            <param name="obj">要重置的对象</param>
            <param name="customFilter">自定义过滤器</param>
            <param name="resetReadOnly">是否重置只读字段和属性（默认为false）</param>
        </member>
        <member name="M:AIO.ExtendType.Reset``1(``0,System.Boolean@,System.Type@)">
            <summary>
            将对象的所有字段和属性重置为它们的默认值，可以根据自定义过滤器和类型过滤器进行筛选。
            </summary>
            <typeparam name="T">要重置的对象类型</typeparam>
            <param name="obj">要重置的对象</param>
            <param name="typeFilter">用于过滤要重置的对象的类型（默认为null）</param>
            <param name="resetReadOnly">是否重置只读字段和属性（默认为false）</param>
        </member>
        <member name="M:AIO.ExtendType.Reset``1(``0,System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.ICollection{System.String}@,System.Boolean@)">
            <summary>
            将对象的所有字段和属性重置为它们的默认值，可以根据自定义过滤器和类型过滤器进行筛选。
            </summary>
            <typeparam name="T">要重置的对象类型</typeparam>
            <param name="obj">要重置的对象</param>
            <param name="fieldNames">要重置的字段名称（可选）</param>
            <param name="propNames">要重置的属性名称（可选）</param>
            <param name="resetReadOnly">是否重置只读字段和属性（默认为false）</param>
        </member>
        <member name="M:AIO.ExtendType.Reset``1(``0,System.Boolean@)">
            <summary>
            将对象的所有字段和属性重置为它们的默认值，可以根据自定义过滤器和类型过滤器进行筛选。
            </summary>
            <typeparam name="T">要重置的对象类型</typeparam>
            <param name="obj">要重置的对象</param>
            <param name="resetReadOnly">是否重置只读字段和属性（默认为false）</param>
        </member>
        <member name="M:AIO.ExtendType.ResetFields``1(``0,System.Collections.Generic.ICollection{System.String}@,System.Boolean@)">
            <summary>
            重置指定字段名称的字段为它们的默认值。
            </summary>
            <typeparam name="T">要重置的对象类型</typeparam>
            <param name="obj">要重置的对象</param>
            <param name="fieldNames">要重置的字段名称</param>
            <param name="resetReadOnly">是否重置只读字段（默认为false）</param>
        </member>
        <member name="M:AIO.ExtendType.ResetFields``1(``0,System.Boolean@)">
            <summary>
            重置指定字段名称的字段为它们的默认值。
            </summary>
            <typeparam name="T">要重置的对象类型</typeparam>
            <param name="obj">要重置的对象</param>
            <param name="resetReadOnly">是否重置只读字段（默认为false）</param>
        </member>
        <member name="M:AIO.ExtendType.ResetProperties``1(``0,System.Boolean@)">
            <summary>
            重置指定属性名称的属性为它们的默认值。
            </summary>
            <typeparam name="T">要重置的对象类型</typeparam>
            <param name="obj">要重置的对象</param>
            <param name="resetReadOnly">是否重置只读属性（默认为false）</param>
        </member>
        <member name="M:AIO.ExtendType.ResetProperties``1(``0,System.Collections.Generic.ICollection{System.String}@,System.Boolean@)">
            <summary>
            重置指定属性名称的属性为它们的默认值。
            </summary>
            <typeparam name="T">要重置的对象类型</typeparam>
            <param name="obj">要重置的对象</param>
            <param name="propNames">要重置的属性名称</param>
            <param name="resetReadOnly">是否重置只读属性（默认为false）</param>
        </member>
        <member name="T:AIO.ExtendEnum">
            <summary>
            枚举扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendEnum.GetAttribute``1(System.Enum)">
            <summary>
            获取属性值
            </summary>
        </member>
        <member name="M:AIO.ExtendEnum.GetAttributeOfEnumMember``1(System.Enum)">
            <summary>
            Gets attributes on an enum member, eg. enum E { [Attr] A }
            </summary>
        </member>
        <member name="M:AIO.ExtendEnum.GetDescriptionDic``1(``0)">
            <summary>
            获取指定描述列表
            </summary>
        </member>
        <member name="M:AIO.ExtendEnum.GetDescription``1(``0)">
            <summary>
            获取自定义属性值
            </summary>
        </member>
        <member name="T:AIO.GenericClosingException">
            <summary>
            这是一个密封类 GenericClosingException，继承自 Exception
            </summary>
        </member>
        <member name="M:AIO.GenericClosingException.#ctor(System.String@)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.GenericClosingException.#ctor(System.Type@,System.Type@)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AIO.Empty`1">
            <summary>
            提供各种类型的空集合。
            </summary>
            <typeparam name="T">集合中元素的类型。</typeparam>
        </member>
        <member name="F:AIO.Empty`1.Array">
            <summary>
            表示一个空的数组。
            </summary>
        </member>
        <member name="F:AIO.Empty`1.Collection">
            <summary>
            表示一个空的 Collection 类型。
            </summary>
        </member>
        <member name="F:AIO.Empty`1.List">
            <summary>
            表示一个空的 List 类型。
            </summary>
        </member>
        <member name="F:AIO.Empty`1.HashSet">
            <summary>
            表示一个空的 HashSet 类型。
            </summary>
        </member>
        <member name="F:AIO.Empty`1.Queue">
            <summary>
            表示一个空的 Queue 类型。
            </summary>
        </member>
        <member name="F:AIO.Empty`1.Stack">
            <summary>
            表示一个空的 Stack 类型。
            </summary>
        </member>
        <member name="F:AIO.Empty`1.LinkedList">
            <summary>
            表示一个空的 LinkedList 类型。
            </summary>
        </member>
        <member name="T:AIO.Empty`2">
            <summary>
            提供一种类型为 KeyValuePair&lt;K, V> 的空字典。
            </summary>
            <typeparam name="K">字典的键类型。</typeparam>
            <typeparam name="V">字典的值类型。</typeparam>
        </member>
        <member name="F:AIO.Empty`2.Dictionary">
            <summary>
            表示一个空的 Dictionary 类型。
            </summary>
        </member>
        <member name="T:AIO.ExtendICollection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.ExtendICollection.Find``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            查找 -1:未找到
            </summary>
        </member>
        <member name="M:AIO.ExtendICollection.Find``1(System.Collections.Generic.IList{``0},``0@,System.Int32@)">
            <summary>
            查找 -1:未找到
            </summary>
        </member>
        <member name="T:AIO.ExtendIComparable">
            <summary>
            扩展 ->
            定义由值类型或类实现的通用比较方法，以为排序实例创建类型特定的比较方法。
            </summary>
        </member>
        <member name="M:AIO.ExtendIComparable.IsLT``1(System.IComparable{``0},``0@)">
            <summary>
            如果第一个对象 小于 第二个对象 则返回 true。
            </summary>
        </member>
        <member name="M:AIO.ExtendIComparable.IsEQ``1(System.IComparable{``0},``0@)">
            <summary>
            如果第一个对象 等于 第二个对象，则返回 true。
            </summary>                                                              
        </member>
        <member name="M:AIO.ExtendIComparable.IsGT``1(System.IComparable{``0},``0@)">
            <summary>
            如果第一个对象 大于 第二个对象，则返回 true。
            </summary>
        </member>
        <member name="M:AIO.ExtendIComparable.IsNE``1(System.IComparable{``0},``0@)">
            <summary>
            如果第一个对象 不等于 第二个对象，则返回 true。
            </summary>
        </member>
        <member name="M:AIO.ExtendIComparable.IsLE``1(System.IComparable{``0},``0@)">
            <summary>
            如果第一个对象 小于或等于 第二个对象，则返回 true。
            </summary>
        </member>
        <member name="M:AIO.ExtendIComparable.IsGE``1(System.IComparable{``0},``0@)">
            <summary>
            如果第一个对象 大于或等于 第二个对象，则返回 true。
            </summary>
        </member>
        <member name="T:AIO.ExtendICustomAttributeProvider">
            <summary>
            为支持自定义属性的反映对象提供自定义属性。扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendICustomAttributeProvider.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean@)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member">类型</param>
            <param name="inherit">为 true 时，查找继承的自定义特性的层次结构链。</param>
            <returns>属性集合</returns>
        </member>
        <member name="M:AIO.ExtendICustomAttributeProvider.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Returns the first <typeparamref name="TAttribute"/> attribute on the `member` or <c>null</c> if there is none.
            </summary>
        </member>
        <member name="T:AIO.ExtendIDictionary">
            <summary>
            字典扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendIDictionary.AddUnion``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}@)">
            <summary>
            添加相同元素
            </summary>
        </member>
        <member name="M:AIO.ExtendIDictionary.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
        </member>
        <member name="M:AIO.ExtendIDictionary.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``1@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:AIO.ExtendIDictionary.GetOrDefault(System.Collections.IDictionary,System.Object@,System.Object@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:AIO.ExtendIDictionary.Get``1(System.Collections.IDictionary,System.String@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <typeparam name="T">任意泛型</typeparam>
        </member>
        <member name="M:AIO.ExtendIDictionary.GetOrDefault(System.Collections.IDictionary,System.String@,System.Object@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:AIO.ExtendIDictionary.Get(System.Collections.IDictionary,System.Object@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
        </member>
        <member name="M:AIO.ExtendIDictionary.Get``1(System.Collections.IDictionary,System.Object@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <typeparam name="T">任意泛型</typeparam>
        </member>
        <member name="M:AIO.ExtendIDictionary.GetOrDefault``1(System.Collections.IDictionary,System.Object@,``0@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:AIO.ExtendIDictionary.TryGet``1(System.Collections.IDictionary,System.String@,``0@)">
            <summary>
            尝试获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
            <typeparam name="T">任意泛型</typeparam>
        </member>
        <member name="M:AIO.ExtendIDictionary.TryGet``1(System.Collections.IDictionary,System.Object@,``0@)">
            <summary>
            尝试获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
            <typeparam name="T">任意泛型</typeparam>
        </member>
        <member name="M:AIO.ExtendIDictionary.TryGet``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``1@)">
            <summary>
            尝试获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
            <typeparam name="K">任意泛型</typeparam>
            <typeparam name="V">任意泛型</typeparam>
        </member>
        <member name="M:AIO.ExtendIDictionary.Remove``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}@)">
            <summary>
            移除存在的元素
            </summary>
        </member>
        <member name="M:AIO.ExtendIDictionary.Remove``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            移除存在的元素
            </summary>
        </member>
        <member name="M:AIO.ExtendIDictionary.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
            移除存在的元素
            </summary>
        </member>
        <member name="M:AIO.ExtendIDictionary.Set(System.Collections.IDictionary,System.Object@,System.Object@)">
            <summary>
            设置
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
        </member>
        <member name="M:AIO.ExtendIDictionary.Set``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``1@)">
            <summary>
            设置
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
        </member>
        <member name="M:AIO.ExtendIDictionary.TrySet``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``1@)">
            <summary>
            尝试获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
            <typeparam name="K">任意泛型</typeparam>
            <typeparam name="V">任意泛型</typeparam>
        </member>
        <member name="M:AIO.ExtendIDictionary.Swap``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``0@)">
            <summary>
            交换数组元素位置
            </summary>
        </member>
        <member name="T:AIO.ExtendIEnumerable">
            <summary>
            迭代器扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendIEnumerable.ToConverStringUTF8(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            转化为字符串 UTF8格式
            </summary>
        </member>
        <member name="M:AIO.ExtendIEnumerable.ToConverStringUTF8(System.Collections.Generic.IEnumerable{System.Byte},System.Int32@,System.Int32@)">
            <summary>
            获取指定字节数组转化为字符串 UTF8格式
            </summary>
        </member>
        <member name="M:AIO.ExtendIEnumerable.ToConverHex16x(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            字节数组 转小写16进制字符
            </summary>
        </member>
        <member name="M:AIO.ExtendIEnumerable.ToConverHex16X(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            字节数组 转大写16进制字符
            </summary>
        </member>
        <member name="M:AIO.ExtendIEnumerable.Contains(System.Collections.Generic.IEnumerable{System.Char},System.Char)">
            <summary>
            判断集合中 是否有重复
            </summary>
            <param name="chars">集合</param>
            <param name="targetChars">匹配集合</param>
            <returns>Ture:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.ExtendIEnumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            判断集合中 是否有重复
            </summary>
            <param name="chars">集合</param>
            <param name="targetChars">匹配集合</param>
            <returns>Ture:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.ExtendIEnumerable.Find``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            查找 -1:未找到
            </summary>
        </member>
        <member name="M:AIO.ExtendIEnumerable.Find``1(System.Collections.Generic.IEnumerable{``0},``0@,System.Int32)">
            <summary>
            查找 -1:未找到
            </summary>
        </member>
        <member name="M:AIO.ExtendIEnumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转化为HashSet
            </summary>
        </member>
        <member name="M:AIO.ExtendIEnumerable.ToSeparatedString(System.Collections.IEnumerable,System.String@)">
            <summary>
            将 IEnumerable 中的元素转换为以指定分隔符分隔的字符串
            </summary>
            <param name="enumerable">IEnumerable 对象，包含要转换的元素</param>
            <param name="separator">用于间隔每个元素的字符串</param>
            <returns>以分隔符分隔的字符串</returns>
        </member>
        <member name="M:AIO.ExtendIEnumerable.ToCommaSeparatedString(System.Collections.IEnumerable)">
            <summary>
            将 IEnumerable 中的元素转换为逗号分隔的字符串
            </summary>
            <param name="enumerable">IEnumerable 对象，包含要转换的元素</param>
            <returns>逗号分隔的字符串</returns>
        </member>
        <member name="M:AIO.ExtendIEnumerable.ToLineSeparatedString(System.Collections.IEnumerable)">
            <summary>
            将 IEnumerable 中的元素转换为以行结束符分隔的字符串
            </summary>
            <param name="enumerable">IEnumerable 对象，包含要转换的元素</param>
            <returns>以行结束符分隔的字符串</returns>
        </member>
        <member name="T:AIO.ExtendIList">
            <summary>
            IList扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.ToConverseHex16X(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32,System.Boolean)">
            <summary>
            从指定字节数组中 获取多个字节转化为大写16进制字符串
            </summary>
            <param name="bytes">数组源</param>
            <param name="offset">开始位置</param>
            <param name="count">获取长度</param>
            <param name="isLower">是否小写</param>
        </member>
        <member name="M:AIO.ExtendIList.GetCharArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            从字节数组中提取一个字符串，并将其转换为字符数组。
            </summary>
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="reverse">是否反转字节序。</param>
            <returns>从字节数组中提取出的字符串的字符数组表示形式。</returns>
        </member>
        <member name="M:AIO.ExtendIList.GetBoolArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            从字节数组中提取多个Bool，并将其转换为字符数组。
            </summary>
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="reverse">是否反转字节序。</param>
            <returns>从字节数组中提取出的字符串的字符数组表示形式。</returns>
        </member>
        <member name="M:AIO.ExtendIList.GetSByteArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            从字节数组中提取多个SByte，并将其转换为字符数组。
            </summary>
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="reverse">是否反转字节序。</param>
            <returns>从字节数组中提取出的字符串的字符数组表示形式。</returns>
        </member>
        <member name="M:AIO.ExtendIList.GetByteArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="reverse">是否反转字节序。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetInt16Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="reverse">是否反转字节序。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetUInt16Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="reverse">是否反转字节序。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetUInt32Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="reverse">是否反转字节序。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetInt32Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="reverse">是否反转字节序。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetUInt64Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="reverse">是否反转字节序。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetInt64Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="reverse">是否反转字节序。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetFloatArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean,System.Boolean)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="all">全部</param>
            <param name="reverse">是否反转字节序。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetDoubleArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean,System.Boolean)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="all">全部</param>
            <param name="reverse">是否反转字节序。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetDecimalArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="reverse">是否反转字节序。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetLenArray(System.Collections.Generic.IList{System.Byte},System.Int32@)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetStringArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Text.Encoding,System.Boolean)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
            <param name="encoding">格式化</param>
            <param name="reverse">是否反转字节序。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetEnumArray``1(System.Collections.Generic.IList{System.Byte},System.Int32@)">
            <param name="array">要从中提取字符串的字节数组。</param>
            <param name="index">指向要提取的字符串的第一个字节的索引。</param>
        </member>
        <member name="M:AIO.ExtendIList.GetBool(System.Collections.Generic.IList{System.Byte},System.Int32@)">
            <summary>
            获取 bool 值
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.GetEnum``1(System.Collections.Generic.IList{System.Byte},System.Int32@)">
            <summary>
            获取 Enum 值
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.GetChar(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            获取 Char 值
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.GetLen(System.Collections.Generic.IList{System.Byte},System.Int32@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.GetByte(System.Collections.Generic.IList{System.Byte},System.Int32@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.GetSByte(System.Collections.Generic.IList{System.Byte},System.Int32@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.GetInt16(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.GetUInt16(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.GetInt32(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.GetUInt32(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.GetInt64(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.GetUInt64(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.GetFloat(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="all"></param>
            <param name="reverse"></param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:AIO.ExtendIList.GetDouble(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="all"></param>
            <param name="reverse"></param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:AIO.ExtendIList.GetDecimal(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.GetString(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Text.Encoding,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="encoding"></param>
            <param name="reverse"></param>
            <returns></returns>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:AIO.ExtendIList.GetStringUTF8(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.GetStringASCII(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.GetStringUnicode(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendIList.AddUnion``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            添加相同元素
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Add``1(System.Collections.Generic.IList{``0},``0@,``0@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Add``1(System.Collections.Generic.IList{``0},``0@,``0@,``0@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Add``1(System.Collections.Generic.IList{``0},``0@,``0@,``0@,``0@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Add``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.AddDicValue``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IDictionary{System.Object,``0})">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.AddDicKey``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IDictionary{``0,System.Object})">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.ExistRepeat``1(System.Collections.Generic.IList{``0})">
            <summary>
            是否存在重复的
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.ExistRepeat``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Boolean}@)">
            <summary>
            是否存在重复的
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.ExistRepeat``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0}@)">
            <summary>
            是否存在重复的
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Get``1(System.Collections.Generic.IList{``0},System.Int32@)">
            <summary>
            获取 集合 指定下标
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.GetLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取 集合 最后一个
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.GetFirst``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取 集合 第一个
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.GetMinValue``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.SByte}@)">
            <summary>
            获取 集合 最小值
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.GetMinValue``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0}@)">
            <summary>
            获取 集合 最小值
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.GetMinValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取 集合 最小值
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.GetMaxValue``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.SByte}@)">
            <summary>
            获取 集合极值 最大值
            </summary>
            <param name="array">数组</param>
            <param name="compare">
            对比函数 返回值 0:相等
            a大余b情况返回  1:获取最大值
            a大余b情况返回 -1:获取最小值
            </param>
            <typeparam name="T">泛型</typeparam>
            <returns>极值</returns>
        </member>
        <member name="M:AIO.ExtendIList.GetMaxValue``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0}@)">
            <summary>
            获取 集合极值 最大值
            </summary>
            <param name="array">数组</param>
            <param name="compare">
            对比函数 返回值 0:相等
            a大余b情况返回  1:获取最大值
            a大余b情况返回 -1:获取最小值
            </param>
            <typeparam name="T">泛型</typeparam>
            <returns>极值</returns>
        </member>
        <member name="M:AIO.ExtendIList.GetMaxValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取 集合极值 最大值
            </summary>
            <param name="array">数组</param>
            <typeparam name="T">泛型</typeparam>
            <returns>极值</returns>
        </member>
        <member name="M:AIO.ExtendIList.GetMaxMinValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取 集合最大最小值 第一个Max 第二个Min
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.GetMaxMinValue``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0}@)">
            <summary>
            获取 集合最大最小值 第一个Max 第二个Min
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.GetMaxMinValue``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.SByte}@)">
            <summary>
            获取 集合最大最小值 第一个Max 第二个Min
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.IndexOf``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            查询存在相同元素的下标
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.IndexOf``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0}@)">
            <summary>
            查询存在相同元素的下标
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.IndexOfParallel``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            查询存在相同元素的下标
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Insert``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Insert``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0}@)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.RemoveFirst``1(System.Collections.Generic.IList{``0})">
            <summary>
            移除第一个元素
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Remove``1(System.Collections.Generic.IList{``0},System.Predicate{``0}@)">
            <summary>
            移除元素
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.RemoveRepeat``1(System.Collections.Generic.IList{``0})">
            <summary>
            移除重复元素
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            移除最后一个元素
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.RemoveGroup``1(System.Collections.Generic.IList{``0},System.Int32@,System.Int32@)">
            <summary>
            移除指定范围的元素
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the collection argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if either index is less than zero or greater than or equal to the number of elements in the IList.</exception>
        </member>
        <member name="M:AIO.ExtendIList.Remove``1(System.Collections.Generic.IList{``0},System.Int32@,System.Boolean@)">
            <summary>
            移除指定数量
            </summary>
            <param name="collection">数组</param>
            <param name="retainCount">保留数量</param>
            <param name="removeFromStart">Ture:从第一个移除 False:从最后一个移除</param>
            <typeparam name="T">泛型</typeparam>
            <exception cref="T:System.ArgumentNullException">参数为NULL</exception>
        </member>
        <member name="M:AIO.ExtendIList.Set``1(System.Collections.Generic.IList{``0},System.Int32@,``0@)">
            <summary>
            设置指定下标元素
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.SetLast``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            设置最后一个元素
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.SetFirst``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            设置第一个元素
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Swap``1(System.Collections.Generic.IList{``0},System.Int32@,System.Int32@)">
            <summary>
            交换数组元素位置
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Swap``1(System.Collections.Generic.IList{``0},System.Int16@,System.Int16@)">
            <summary>
            交换数组元素位置
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Swap``1(System.Collections.Generic.IList{``0},System.UInt16@,System.UInt16@)">
            <summary>
            交换数组元素位置
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Swap``1(System.Collections.Generic.IList{``0},System.Byte@,System.Byte@)">
            <summary>
            交换数组元素位置
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Swap``1(System.Collections.Generic.IList{``0},System.SByte@,System.SByte@)">
            <summary>
            交换数组元素位置
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.PadLeft(System.Collections.Generic.IList{System.String},System.Int32@)">
            <summary>
            字符串通过在此实例中的字符左侧填充空格来达到指定的总长度，从而实现右对齐。
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.PadRight(System.Collections.Generic.IList{System.String},System.Int32@)">
            <summary>
            字符右侧填充空格来达到指定的总长度，从而使这些字符左对齐
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Normalize(System.Collections.Generic.IList{System.String})">
            <summary>
            字符右侧填充空格来达到指定的总长度，从而使这些字符左对齐
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.ToLower(System.Collections.Generic.IList{System.String})">
            <summary>
            转换为小写形式的副本。
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.ToUpper(System.Collections.Generic.IList{System.String})">
            <summary>
            对象的转换为大写形式的副本。
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.ToLowerInvariant(System.Collections.Generic.IList{System.String})">
            <summary>
            转换为小写形式的副本。
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.ToUpperInvariant(System.Collections.Generic.IList{System.String})">
            <summary>
            对象的转换为大写形式的副本。
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.Trim(System.Collections.Generic.IList{System.String})">
            <summary>
            移除所有前导空白字符和尾部空白字符。
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.TrimEnd(System.Collections.Generic.IList{System.String},System.Char[])">
            <summary>
            移除数组中指定的一组字符的所有尾部匹配项。
            </summary>
        </member>
        <member name="M:AIO.ExtendIList.TrimStart(System.Collections.Generic.IList{System.String},System.Char[])">
            <summary>
            移除数组中指定的一组字符的所有前导匹配项。
            </summary>
        </member>
        <member name="T:AIO.ExtendByte">
            <summary>
            字节数组扩展 写入
            </summary>
            <summary>
            字节扩展 包含类型 byte byte[]
            </summary>
        </member>
        <member name="M:AIO.ExtendByte.SetCharArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Char}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetByteArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Byte}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetSByteArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.SByte}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetBoolArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Boolean}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetInt16Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Int16}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetInt32Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Int32}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetInt64Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Int64}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetUInt16Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.UInt16}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetUInt32Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.UInt32}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetUInt64Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.UInt64}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetLenArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Int32}@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetFloatArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Single}@,System.Boolean,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="all"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetDoubleArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Double}@,System.Boolean,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="all"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetDecimalArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Decimal}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.String}@,System.Text.Encoding,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="encoding"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Text.StringBuilder}@,System.Text.Encoding,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="encoding"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringUTF8Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.String}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringUTF8ASCII(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.String}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringUTF8Unicode(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.String}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringUTF8Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Text.StringBuilder}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringUTF8ASCII(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Text.StringBuilder}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringUTF8Unicode(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Text.StringBuilder}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetBool(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetChar(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Char@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetLen(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:AIO.ExtendByte.SetEnum``1(System.Collections.Generic.IList{System.Byte},``0@,System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AIO.ExtendByte.SetByte(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Byte@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetSByte(System.Collections.Generic.IList{System.Byte},System.Int32@,System.SByte@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetInt16(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Int16@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetInt32(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetInt64(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Int64@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetUInt16(System.Collections.Generic.IList{System.Byte},System.Int32@,System.UInt16@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetUInt32(System.Collections.Generic.IList{System.Byte},System.Int32@,System.UInt32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetUInt64(System.Collections.Generic.IList{System.Byte},System.Int32@,System.UInt64@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetFloat(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Single@,System.Boolean@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="all"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetDouble(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Double@,System.Boolean@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="all"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetDecimal(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Decimal@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetString(System.Collections.Generic.IList{System.Byte},System.Int32@,System.String@,System.Text.Encoding@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="encoding"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetString(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Text.StringBuilder@,System.Text.Encoding@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="encoding"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringUTF8(System.Collections.Generic.IList{System.Byte},System.Int32@,System.String@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringASCII(System.Collections.Generic.IList{System.Byte},System.Int32@,System.String@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringUnicode(System.Collections.Generic.IList{System.Byte},System.Int32@,System.String@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringUTF8(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringASCII(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.SetStringUnicode(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ExtendByte.ToConvertHex16x(System.Byte)">
            <summary>
            字节 转小写16进制字符
            </summary>
        </member>
        <member name="M:AIO.ExtendByte.ToConvertHex16X(System.Byte)">
            <summary>
            字节 转大写16进制字符
            </summary>
        </member>
        <member name="T:AIO.ExtendIReflect">
            <summary>
            扩展
            </summary>
        </member>
        <member name="F:AIO.ExtendIReflect.DeclaredFlags">
            <summary>
            申明
            </summary>
        </member>
        <member name="M:AIO.ExtendIReflect.GetDeclaredProperty(System.Reflection.IReflect,System.String@)">
            <summary>
            获取申明的指定属性
            </summary>
        </member>
        <member name="M:AIO.ExtendIReflect.GetDeclaredField(System.Reflection.IReflect,System.String@)">
            <summary>
            获取申明的指定字段
            </summary>
        </member>
        <member name="M:AIO.ExtendIReflect.GetDeclaredMethod(System.Reflection.IReflect,System.String@)">
            <summary>
            获取申明的指定函数
            </summary>
        </member>
        <member name="M:AIO.ExtendIReflect.GetDeclaredMember(System.Reflection.IReflect,System.String@)">
            <summary>
            获取申明的指定成员
            </summary>
        </member>
        <member name="M:AIO.ExtendIReflect.GetDeclaredMethods(System.Reflection.IReflect)">
            <summary>
            获取声明的全部函数
            </summary>
        </member>
        <member name="M:AIO.ExtendIReflect.GetDeclaredProperties(System.Reflection.IReflect)">
            <summary>
            获取声明的全部属性
            </summary>
        </member>
        <member name="M:AIO.ExtendIReflect.GetDeclaredFields(System.Reflection.IReflect)">
            <summary>
            获取声明的全部字段
            </summary>
        </member>
        <member name="M:AIO.ExtendIReflect.GetDeclaredMembers(System.Reflection.IReflect)">
            <summary>
            获取声明的全部成员
            </summary>
        </member>
        <member name="T:AIO.ExtendISpan">
            <summary>
            数组方法
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.ToConverString(System.Byte[])">
            <summary>
            转化为字符串
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.ToConverString(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            获取指定字节数组转化为字符串
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.ToHexString(System.Byte[])">
            <summary>
            转化为二进制文本
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.ToConverStringUTF8(System.Byte[])">
            <summary>
            转化为字符串 UTF8格式
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.Add``1(``0[],``0@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.Add``1(``0[],``0[])">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.Add``1(``0[],System.Collections.Generic.ICollection{``0}@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.CopyTo``1(``0[],System.Int32@)">
            <summary>
            复制
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.AutoMaticExpansion``1(``0[],System.Int32@,System.Int32@)">
            <summary>
            自动扩容
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.Insert``1(``0[],System.Int32@,``0[])">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.Insert``1(``0[],System.Int32@,System.Array@)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.Insert``1(``0[],System.Int32@,``0@)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.Insert``1(``0[],System.Int32,System.Collections.Generic.ICollection{``0}@)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.RemoveALL``1(``0[],``0@)">
            <summary>
            移除
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.Remove``1(``0[],``0@)">
            <summary>
            移除
            </summary>
        </member>
        <member name="M:AIO.ExtendISpan.RemoveAt``1(``0[],System.Int32@)">
            <summary>
            移除
            </summary>
        </member>
        <member name="T:AIO.ExtendIType">
            <summary>
            类型扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendIType.GetDeclaredConstructors(System.Runtime.InteropServices._Type)">
            <summary>
            获取申明的全部构造函数
            </summary>
        </member>
        <member name="M:AIO.ExtendIType.GetDeclaredConstructor(System.Runtime.InteropServices._Type,System.Type[]@)">
            <summary>
            获取申明构造函数
            </summary>
        </member>
        <member name="M:AIO.ExtendIType.GetNameCS(System.Type,System.Boolean@)">
            <summary>
            获取C#中类型的名称
            </summary>
            <remarks>获取存储在字典缓存中的值</remarks>
        </member>
        <member name="M:AIO.ExtendIType.AppendNameAndGenericArguments(System.Text.StringBuilder,System.Type,System.Boolean@,System.Int32)">
            <summary>
            Appends the generic arguments of `type` (after skipping the specified number).
            </summary>
        </member>
        <member name="T:AIO.ExtendChar">
            <summary>
            字符扩展
            </summary>
            <summary>
            字符扩展
            </summary>
            <summary>
            字符扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.Repeat(System.Char,System.Int32@)">
            <summary>
            重复字符
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.Clone(System.Char,System.Int32@)">
            <summary>
            重复N此 复制传入数据
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.Clone(System.Char,System.UInt32@)">
            <summary>
            重复N此 复制传入数据
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.GetBytesLength(System.Char)">
            <summary>
            判断当前字符是否为单字节
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.GetCodeASCII(System.Char)">
            <summary>
            获取 ASCII 码
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.GetCodeUnicode(System.Char)">
            <summary>
            获取 Unicode 码
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsWordDelimiter(System.Char)">
            <summary>
            检查字符是否是单词分隔符，包括空格、符号和标点符号
            </summary>
            <param name="c">要检查的字符</param>
            <returns>如果字符是单词分隔符，则为 true；否则为 false</returns>
        </member>
        <member name="M:AIO.ExtendChar.IsInRange(System.Char,System.Char@,System.Char@)">
            <summary>
            判断字符串在指定范围
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendChar.IsInRange(System.Char,System.Int32@,System.Int32@)">
            <summary>
            判断字符串在指定范围
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.ExtendChar.IsWordBeginning(System.Nullable{System.Char},System.Char@,System.Nullable{System.Char}@)">
            <summary>
            检查字符是否可能是单词开始，根据字符及其前后字符的类型和顺序推断
            </summary>
            <param name="c">前一个字符，如果不存在则为 null</param>
            <param name="current">当前字符</param>
            <param name="next">后一个字符，如果不存在则为 null</param>
            <returns>如果该字符可能是单词开始，则为 true；否则为 false</returns>
        </member>
        <member name="M:AIO.ExtendChar.IsSingleByte(System.Char)">
            <summary>
            判断当前字符是否为单字节
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsDigit(System.Char)">
            <summary>
            判断当前字符 是否为数字
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsHighSurrogate(System.Char)">
            <summary>
            判断当前字符 是否是一个高代理项
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsLetter(System.Char)">
            <summary>
            判断当前字符 是否属于 Unicode 字母类别
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsLetterOrDigit(System.Char)">
            <summary>
            判断当前字符 是否属于字母或十进制数字类别
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsLower(System.Char)">
            <summary>
            判断当前字符 是否属于小写字母类别
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsLowSurrogate(System.Char)">
            <summary>
            判断当前字符 是否是一个低代理项
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsNumber(System.Char)">
            <summary>
            判断当前字符 是否属于 Unicode 数字
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsPunctuation(System.Char)">
            <summary>
            判断当前字符 是否属于标点符号类别
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsSeparator(System.Char)">
            <summary>
            判断当前字符 是否属于分隔符类别
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsSurrogate(System.Char)">
            <summary>
            判断当前字符 是否具有代理项代码单位
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsSurrogatePair(System.Char,System.Char)">
            <summary>
            判断当前两个字符 是否形成一个代理项对
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsSymbol(System.Char)">
            <summary>
            判断当前字符 是否属于符号字符类别
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsUpper(System.Char)">
            <summary>
            判断当前字符 是否为大小字母类别
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsWhiteSpace(System.Char)">
            <summary>
            判断当前字符 是否属于空格类别
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.IsChinese(System.Char)">
            <summary>
            判断当前字符 是否属于中文字符
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.ToConverSByte(System.Char)">
            <summary>
            转化为字节
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.ToConverBytes(System.Char,System.Text.Encoding@)">
            <summary>
            转化为字节数组
            </summary>
        </member>
        <member name="M:AIO.ExtendChar.ToConverBase64(System.Char,System.Text.Encoding@)">
            <summary>
            获取Base64
            </summary>
        </member>
        <member name="T:AIO.ExtendLong">
            <summary>
            Long 扩展
            </summary>
        </member>
        <member name="M:AIO.ExtendLong.ToConverseStringFileSize(System.Int64)">
            <summary>
            将文件大小(字节)转换为最适合的显示方式
            Generate data size string. Will return a pretty string of bytes, KiB, MiB, GiB, TiB based on the given bytes.
            </summary>
            <param name="size">Data size in bytes</param>
            <returns>String with data size representation</returns>
        </member>
        <member name="M:AIO.ExtendLong.ToConverseStringMoney(System.Int64)">
            <summary>
            转换为格式:00,000,000
            </summary>
        </member>
        <member name="M:AIO.ExtendLong.ToConverseTimePeriod(System.Int64)">
            <summary>
            Generate time period string. Will return a pretty string of ns, mcs, ms, s, m, h based on the given nanoseconds.
            </summary>
            <param name="ms">Milliseconds</param>
            <returns>String with time period representation</returns>
        </member>
        <member name="M:AIO.ExtendLong.ToConverseTimePeriod(System.Double)">
            <summary>
            Generate time period string. Will return a pretty string of ns, mcs, ms, s, m, h based on the given nanoseconds.
            </summary>
            <param name="ms">Milliseconds</param>
            <returns>String with time period representation</returns>
        </member>
        <member name="T:AIO.NetGetResponseStream">
            <summary>
            nameof(NetHttpGetResponseStream)
            </summary>
        </member>
        <member name="M:AIO.NetGetResponseStream.#ctor(System.String@,System.Net.WebResponse@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.NetGetResponseStream.#ctor(System.String@)">
            <inheritdoc />
        </member>
        <member name="T:AIO.Net.Buffer">
            <summary>
            Dynamic byte buffer
            </summary>
        </member>
        <member name="P:AIO.Net.Buffer.IsEmpty">
            <summary>
            Is the buffer empty?
            </summary>
        </member>
        <member name="P:AIO.Net.Buffer.Arrays">
            <summary>
            Bytes memory buffer
            </summary>
        </member>
        <member name="P:AIO.Net.Buffer.Capacity">
            <summary>
            Bytes memory buffer capacity
            </summary>
        </member>
        <member name="P:AIO.Net.Buffer.Count">
            <summary>
            Bytes memory buffer size
            </summary>
        </member>
        <member name="P:AIO.Net.Buffer.Offset">
            <summary>
            Bytes memory buffer offset
            </summary>
        </member>
        <member name="P:AIO.Net.Buffer.Item(System.Int64)">
            <summary>
            Buffer indexer operator
            </summary>
        </member>
        <member name="M:AIO.Net.Buffer.#ctor">
            <summary>
            Initialize a new expandable buffer with zero capacity
            </summary>
        </member>
        <member name="M:AIO.Net.Buffer.#ctor(System.Int64)">
            <summary>
            Initialize a new expandable buffer with the given capacity
            </summary>
        </member>
        <member name="M:AIO.Net.Buffer.#ctor(System.Byte[])">
            <summary>
            Initialize a new expandable buffer with the given data
            </summary>
        </member>
        <member name="M:AIO.Net.Buffer.ToString">
            <summary>
            Get a string from the current buffer
            </summary>
        </member>
        <member name="M:AIO.Net.Buffer.ExtractString(System.Int64,System.Int64)">
            <summary>
            Extract the string from buffer of the given offset and size
            </summary>
        </member>
        <member name="M:AIO.Net.Buffer.Remove(System.Int32,System.Int32)">
            <summary>
            Remove the buffer of the given offset and size
            </summary>
        </member>
        <member name="M:AIO.Net.Buffer.Reserve(System.Int64)">
            <summary>
            Reserve the buffer of the given capacity
            </summary>
        </member>
        <member name="M:AIO.Net.Buffer.Write(System.Byte)">
            <summary>
            Append the single byte
            </summary>
            <param name="value">Byte value to append</param>
            <returns>Count of append bytes</returns>
        </member>
        <member name="M:AIO.Net.Buffer.Write(System.Byte[])">
            <summary>
            Append the given buffer
            </summary>
            <param name="buffer">Buffer to append</param>
            <returns>Count of append bytes</returns>
        </member>
        <member name="M:AIO.Net.Buffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Append the given buffer fragment
            </summary>
            <param name="buffer">Buffer to append</param>
            <param name="offset">Buffer offset</param>
            <param name="size">Buffer size</param>
            <returns>Count of append bytes</returns>
        </member>
        <member name="M:AIO.Net.Buffer.Write(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Append the given span of bytes
            </summary>
            <param name="buffer">Buffer to append as a span of bytes</param>
            <returns>Count of append bytes</returns>
        </member>
        <member name="M:AIO.Net.Buffer.Write(AIO.Net.Buffer)">
            <summary>
            Append the given buffer
            </summary>
            <param name="buffer">Buffer to append</param>
            <returns>Count of append bytes</returns>
        </member>
        <member name="M:AIO.Net.Buffer.Write(System.String)">
            <summary>
            Append the given text in UTF-8 encoding
            </summary>
            <param name="text">Text to append</param>
            <returns>Count of append bytes</returns>
        </member>
        <member name="M:AIO.Net.Buffer.Write(System.Collections.Generic.ICollection{System.Char})">
            <summary>
            Append the given text in UTF-8 encoding
            </summary>
            <param name="text">Text to append as a span of characters</param>
            <returns>Count of append bytes</returns>
        </member>
        <member name="T:AIO.Net.HttpClient">
            <summary>
            HTTP client is used to communicate with HTTP Web server. It allows to send GET, POST, PUT, DELETE requests and receive HTTP result.
            </summary>
            <remarks>Thread-safe.</remarks>
        </member>
        <member name="M:AIO.Net.HttpClient.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initialize HTTP client with a given IP address and port number
            </summary>
            <param name="address">IP address</param>
            <param name="port">Port number</param>
        </member>
        <member name="M:AIO.Net.HttpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initialize HTTP client with a given IP address and port number
            </summary>
            <param name="address">IP address</param>
            <param name="port">Port number</param>
        </member>
        <member name="M:AIO.Net.HttpClient.#ctor(System.Net.DnsEndPoint)">
            <summary>
            Initialize HTTP client with a given DNS endpoint
            </summary>
            <param name="endpoint">DNS endpoint</param>
        </member>
        <member name="M:AIO.Net.HttpClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initialize HTTP client with a given IP endpoint
            </summary>
            <param name="endpoint">IP endpoint</param>
        </member>
        <member name="P:AIO.Net.HttpClient.Request">
            <summary>
            Get the HTTP request
            </summary>
        </member>
        <member name="P:AIO.Net.HttpClient.Response">
            <summary>
            Get the HTTP response
            </summary>
        </member>
        <member name="M:AIO.Net.HttpClient.SendRequest">
            <summary>
            Send the current HTTP request (synchronous)
            </summary>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.HttpClient.SendRequest(AIO.Net.HttpRequest)">
            <summary>
            Send the HTTP request (synchronous)
            </summary>
            <param name="request">HTTP request</param>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.HttpClient.SendRequestBody(System.String)">
            <summary>
            Send the HTTP request body (synchronous)
            </summary>
            <param name="body">HTTP request body</param>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.HttpClient.SendRequestBody(System.Byte[])">
            <summary>
            Send the HTTP request body (synchronous)
            </summary>
            <param name="buffer">HTTP request body buffer</param>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.HttpClient.SendRequestBody(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Send the HTTP request body (synchronous)
            </summary>
            <param name="buffer">HTTP request body buffer</param>
            <param name="offset">HTTP request body buffer offset</param>
            <param name="size">HTTP request body size</param>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.HttpClient.SendRequestAsync">
            <summary>
            Send the current HTTP request (asynchronous)
            </summary>
            <returns>'true' if the current HTTP request was successfully sent, 'false' if the session is not connected</returns>
        </member>
        <member name="M:AIO.Net.HttpClient.SendRequestAsync(AIO.Net.HttpRequest)">
            <summary>
            Send the HTTP request (asynchronous)
            </summary>
            <param name="request">HTTP request</param>
            <returns>'true' if the current HTTP request was successfully sent, 'false' if the session is not connected</returns>
        </member>
        <member name="M:AIO.Net.HttpClient.SendRequestBodyAsync(System.String)">
            <summary>
            Send the HTTP request body (asynchronous)
            </summary>
            <param name="body">HTTP request body</param>
            <returns>'true' if the HTTP request body was successfully sent, 'false' if the session is not connected</returns>
        </member>
        <member name="M:AIO.Net.HttpClient.SendRequestBodyAsync(System.Byte[])">
            <summary>
            Send the HTTP request body (asynchronous)
            </summary>
            <param name="buffer">HTTP request body buffer</param>
            <returns>'true' if the HTTP request body was successfully sent, 'false' if the session is not connected</returns>
        </member>
        <member name="M:AIO.Net.HttpClient.SendRequestBodyAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send the HTTP request body (asynchronous)
            </summary>
            <param name="buffer">HTTP request body buffer</param>
            <param name="offset">HTTP request body buffer offset</param>
            <param name="size">HTTP request body size</param>
            <returns>'true' if the HTTP request body was successfully sent, 'false' if the session is not connected</returns>
        </member>
        <member name="M:AIO.Net.HttpClient.OnReceived(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.HttpClient.OnDisconnected">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.HttpClient.OnReceivedResponseHeader(AIO.Net.HttpResponse)">
            <summary>
            Handle HTTP response header received notification
            </summary>
            <remarks>Notification is called when HTTP response header was received from the server.</remarks>
            <param name="response">HTTP request</param>
        </member>
        <member name="M:AIO.Net.HttpClient.OnReceivedResponse(AIO.Net.HttpResponse)">
            <summary>
            Handle HTTP response received notification
            </summary>
            <remarks>Notification is called when HTTP response was received from the server.</remarks>
            <param name="response">HTTP response</param>
        </member>
        <member name="M:AIO.Net.HttpClient.OnReceivedResponseError(AIO.Net.HttpResponse,System.String)">
            <summary>
            Handle HTTP response error notification
            </summary>
            <remarks>Notification is called when HTTP response error was received from the server.</remarks>
            <param name="response">HTTP response</param>
            <param name="error">HTTP response error</param>
        </member>
        <member name="T:AIO.Net.HttpRequest">
            <summary>
            HTTP request is used to create or process parameters of HTTP protocol request(method, URL, headers, etc).
            </summary>
            <remarks>Not thread-safe.</remarks>
        </member>
        <member name="M:AIO.Net.HttpRequest.#ctor">
            <summary>
            Initialize an empty HTTP request
            </summary>
        </member>
        <member name="M:AIO.Net.HttpRequest.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new HTTP request with a given method, URL and protocol
            </summary>
            <param name="method">HTTP method</param>
            <param name="url">Requested URL</param>
            <param name="protocol">Protocol version (default is "HTTP/1.1")</param>
        </member>
        <member name="P:AIO.Net.HttpRequest.IsEmpty">
            <summary>
            Is the HTTP request empty?
            </summary>
        </member>
        <member name="P:AIO.Net.HttpRequest.IsErrorSet">
            <summary>
            Is the HTTP request error flag set?
            </summary>
        </member>
        <member name="P:AIO.Net.HttpRequest.Method">
            <summary>
            Get the HTTP request method
            </summary>
        </member>
        <member name="P:AIO.Net.HttpRequest.Url">
            <summary>
            Get the HTTP request URL
            </summary>
        </member>
        <member name="P:AIO.Net.HttpRequest.Protocol">
            <summary>
            Get the HTTP request protocol version
            </summary>
        </member>
        <member name="P:AIO.Net.HttpRequest.Headers">
            <summary>
            Get the HTTP request headers count
            </summary>
        </member>
        <member name="M:AIO.Net.HttpRequest.Header(System.Int32)">
            <summary>
            Get the HTTP request header by index
            </summary>
        </member>
        <member name="P:AIO.Net.HttpRequest.Cookies">
            <summary>
            Get the HTTP request cookies count
            </summary>
        </member>
        <member name="M:AIO.Net.HttpRequest.Cookie(System.Int32)">
            <summary>
            Get the HTTP request cookie by index
            </summary>
        </member>
        <member name="P:AIO.Net.HttpRequest.Body">
            <summary>
            Get the HTTP request body as string
            </summary>
        </member>
        <member name="P:AIO.Net.HttpRequest.BodyBytes">
            <summary>
            Get the HTTP request body as byte array
            </summary>
        </member>
        <member name="P:AIO.Net.HttpRequest.BodyLength">
            <summary>
            Get the HTTP request body length
            </summary>
        </member>
        <member name="P:AIO.Net.HttpRequest.Cache">
            <summary>
            Get the HTTP request cache content
            </summary>
        </member>
        <member name="M:AIO.Net.HttpRequest.ToString">
            <summary>
            Get string from the current HTTP request
            </summary>
        </member>
        <member name="M:AIO.Net.HttpRequest.Clear">
            <summary>
            Clear the HTTP request cache
            </summary>
        </member>
        <member name="M:AIO.Net.HttpRequest.SetBegin(System.String,System.String,System.String)">
            <summary>
            Set the HTTP request begin with a given method, URL and protocol
            </summary>
            <param name="method">HTTP method</param>
            <param name="url">Requested URL</param>
            <param name="protocol">Protocol version (default is "HTTP/1.1")</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.SetHeader(System.String,System.String)">
            <summary>
            Set the HTTP request header
            </summary>
            <param name="key">Header key</param>
            <param name="value">Header value</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.SetCookie(System.String,System.String)">
            <summary>
            Set the HTTP request cookie
            </summary>
            <param name="name">Cookie name</param>
            <param name="value">Cookie value</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.AddCookie(System.String,System.String)">
            <summary>
            Add the HTTP request cookie
            </summary>
            <param name="name">Cookie name</param>
            <param name="value">Cookie value</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.SetBody(System.Collections.Generic.ICollection{System.Char})">
            <summary>
            Set the HTTP request body
            </summary>
            <param name="body">Body string content as a span of characters</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.SetBody">
            <summary>
            Set the HTTP request body
            </summary>
            <remarks>Body string content as a span of characters</remarks>
        </member>
        <member name="M:AIO.Net.HttpRequest.SetBody(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Set the HTTP request body
            </summary>
            <param name="body">Body binary content as a span of bytes</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.SetBodyLength(System.Int32)">
            <summary>
            Set the HTTP request body length
            </summary>
            <param name="length">Body length</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.MakeHeadRequest(System.String)">
            <summary>
            Make HEAD request
            </summary>
            <param name="url">URL to request</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.MakeGetRequest(System.String)">
            <summary>
            Make GET request
            </summary>
            <param name="url">URL to request</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.MakePostRequest(System.String,System.String,System.String)">
            <summary>
            Make POST request
            </summary>
            <param name="url">URL to request</param>
            <param name="content">String content</param>
            <param name="contentType">Content type (default is "text/plain; charset=UTF-8")</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.MakePostRequest(System.String,System.Collections.Generic.ICollection{System.Char},System.String)">
            <summary>
            Make POST request
            </summary>
            <param name="url">URL to request</param>
            <param name="content">String content as a span of characters</param>
            <param name="contentType">Content type (default is "text/plain; charset=UTF-8")</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.MakePostRequest(System.String,System.Collections.Generic.ICollection{System.Byte},System.String)">
            <summary>
            Make POST request
            </summary>
            <param name="url">URL to request</param>
            <param name="content">Binary content as a span of bytes</param>
            <param name="contentType">Content type (default is "")</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.MakePutRequest(System.String,System.String,System.String)">
            <summary>
            Make PUT request
            </summary>
            <param name="url">URL to request</param>
            <param name="content">String content</param>
            <param name="contentType">Content type (default is "text/plain; charset=UTF-8")</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.MakePutRequest(System.String,System.Collections.Generic.ICollection{System.Char},System.String)">
            <summary>
            Make PUT request
            </summary>
            <param name="url">URL to request</param>
            <param name="content">String content as a span of characters</param>
            <param name="contentType">Content type (default is "text/plain; charset=UTF-8")</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.MakePutRequest(System.String,System.Collections.Generic.ICollection{System.Byte},System.String)">
            <summary>
            Make PUT request
            </summary>
            <param name="url">URL to request</param>
            <param name="content">Binary content as a span of bytes</param>
            <param name="contentType">Content type (default is "")</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.MakeDeleteRequest(System.String)">
            <summary>
            Make DELETE request
            </summary>
            <param name="url">URL to request</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.MakeOptionsRequest(System.String)">
            <summary>
            Make OPTIONS request
            </summary>
            <param name="url">URL to request</param>
        </member>
        <member name="M:AIO.Net.HttpRequest.MakeTraceRequest(System.String)">
            <summary>
            Make TRACE request
            </summary>
            <param name="url">URL to request</param>
        </member>
        <member name="T:AIO.Net.HttpResponse">
            <summary>
            HTTP response is used to create or process parameters of HTTP protocol response(status, headers, etc).
            </summary>
            <remarks>Not thread-safe.</remarks>
        </member>
        <member name="M:AIO.Net.HttpResponse.#ctor">
            <summary>
            Initialize an empty HTTP response
            </summary>
        </member>
        <member name="M:AIO.Net.HttpResponse.#ctor(System.Int32,System.String)">
            <summary>
            Initialize a new HTTP response with a given status and protocol
            </summary>
            <param name="status">HTTP status</param>
            <param name="protocol">Protocol version (default is "HTTP/1.1")</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initialize a new HTTP response with a given status, status phrase and protocol
            </summary>
            <param name="status">HTTP status</param>
            <param name="statusPhrase">HTTP status phrase</param>
            <param name="protocol">Protocol version</param>
        </member>
        <member name="P:AIO.Net.HttpResponse.IsEmpty">
            <summary>
            Is the HTTP response empty?
            </summary>
        </member>
        <member name="P:AIO.Net.HttpResponse.IsErrorSet">
            <summary>
            Is the HTTP response error flag set?
            </summary>
        </member>
        <member name="P:AIO.Net.HttpResponse.Status">
            <summary>
            Get the HTTP response status
            </summary>
        </member>
        <member name="P:AIO.Net.HttpResponse.StatusPhrase">
            <summary>
            Get the HTTP response status phrase
            </summary>
        </member>
        <member name="P:AIO.Net.HttpResponse.Protocol">
            <summary>
            Get the HTTP response protocol version
            </summary>
        </member>
        <member name="P:AIO.Net.HttpResponse.Headers">
            <summary>
            Get the HTTP response headers count
            </summary>
        </member>
        <member name="M:AIO.Net.HttpResponse.Header(System.Int32)">
            <summary>
            Get the HTTP response header by index
            </summary>
        </member>
        <member name="P:AIO.Net.HttpResponse.Body">
            <summary>
            Get the HTTP response body as string
            </summary>
        </member>
        <member name="P:AIO.Net.HttpResponse.BodyBytes">
            <summary>
            Get the HTTP request body as byte array
            </summary>
        </member>
        <member name="P:AIO.Net.HttpResponse.BodyLength">
            <summary>
            Get the HTTP response body length
            </summary>
        </member>
        <member name="P:AIO.Net.HttpResponse.Cache">
            <summary>
            Get the HTTP response cache content
            </summary>
        </member>
        <member name="M:AIO.Net.HttpResponse.ToString">
            <summary>
            Get string from the current HTTP response
            </summary>
        </member>
        <member name="M:AIO.Net.HttpResponse.Clear">
            <summary>
            Clear the HTTP response cache
            </summary>
        </member>
        <member name="M:AIO.Net.HttpResponse.SetBegin(System.Int32,System.String)">
            <summary>
            Set the HTTP response begin with a given status and protocol
            </summary>
            <param name="status">HTTP status</param>
            <param name="protocol">Protocol version (default is "HTTP/1.1")</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.SetBegin(System.Int32,System.String,System.String)">
            <summary>
            Set the HTTP response begin with a given status, status phrase and protocol
            </summary>
            <param name="status">HTTP status</param>
            <param name="statusPhrase"> HTTP status phrase</param>
            <param name="protocol">Protocol version</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.SetContentType(System.String)">
            <summary>
            Set the HTTP response content type
            </summary>
            <param name="extension">Content extension</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.SetHeader(System.String,System.String)">
            <summary>
            Set the HTTP response header
            </summary>
            <param name="key">Header key</param>
            <param name="value">Header value</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.SetCookie(System.String,System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the HTTP response cookie
            </summary>
            <param name="name">Cookie name</param>
            <param name="value">Cookie value</param>
            <param name="maxAge">Cookie age in seconds until it expires (default is 86400)</param>
            <param name="path">Cookie path (default is "")</param>
            <param name="domain">Cookie domain (default is "")</param>
            <param name="secure">Cookie secure flag (default is true)</param>
            <param name="strict">Cookie strict flag (default is true)</param>
            <param name="httpOnly">Cookie HTTP-only flag (default is true)</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.SetBody(System.String)">
            <summary>
            Set the HTTP response body
            </summary>
            <param name="body">Body binary content as a span of bytes</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.SetBody">
            <summary>
            Set the HTTP response body
            </summary>
        </member>
        <member name="M:AIO.Net.HttpResponse.SetBody(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Set the HTTP response body
            </summary>
            <param name="body">Body binary content as a span of bytes</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.SetBody(System.Collections.Generic.ICollection{System.Char})">
            <summary>
            Set the HTTP response body
            </summary>
            <param name="body">Body binary content as a span of bytes</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.SetBodyLength(System.Int32)">
            <summary>
            Set the HTTP response body length
            </summary>
            <param name="length">Body length</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.MakeOkResponse(System.Int32)">
            <summary>
            Make OK response
            </summary>
            <param name="status">OK status (default is 200 (OK))</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.MakeErrorResponse(System.String,System.String)">
            <summary>
            Make ERROR response
            </summary>
            <param name="content">Error content (default is "")</param>
            <param name="contentType">Error content type (default is "text/plain; charset=UTF-8")</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.MakeErrorResponse(System.Int32,System.String,System.String)">
            <summary>
            Make ERROR response
            </summary>
            <param name="status">Error status</param>
            <param name="content">Error content (default is "")</param>
            <param name="contentType">Error content type (default is "text/plain; charset=UTF-8")</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.MakeHeadResponse">
            <summary>
            Make HEAD response
            </summary>
        </member>
        <member name="M:AIO.Net.HttpResponse.MakeGetResponse(System.String,System.String)">
            <summary>
            Make GET response
            </summary>
            <param name="content">String content (default is "")</param>
            <param name="contentType">Content type (default is "text/plain; charset=UTF-8")</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.MakeGetResponse(System.Collections.Generic.ICollection{System.Char},System.String)">
            <summary>
            Make GET response
            </summary>
            <param name="content">String content as a span of characters</param>
            <param name="contentType">Content type (default is "text/plain; charset=UTF-8")</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.MakeGetResponse(System.Collections.Generic.ICollection{System.Byte},System.String)">
            <summary>
            Make GET response
            </summary>
            <param name="content">Binary content as a span of bytes</param>
            <param name="contentType">Content type (default is "")</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.MakeOptionsResponse(System.String)">
            <summary>
            Make OPTIONS response
            </summary>
            <param name="allow">Allow methods (default is "HEAD,GET,POST,PUT,DELETE,OPTIONS,TRACE")</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.MakeTraceResponse(System.Collections.Generic.ICollection{System.Char})">
            <summary>
            Make TRACE response
            </summary>
            <param name="content">String content as a span of characters</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.MakeTraceResponse(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Make TRACE response
            </summary>
            <param name="content">Binary content as a span of bytes</param>
        </member>
        <member name="M:AIO.Net.HttpResponse.MakeTraceResponse(AIO.Net.HttpRequest)">
            <summary>
            Make TRACE response
            </summary>
            <param name="request">HTTP request</param>
        </member>
        <member name="T:AIO.Net.HttpServer">
            <summary>
            HTTP server is used to create HTTP Web server and communicate with clients using HTTP protocol. It allows to receive GET, POST, PUT, DELETE requests and send HTTP responses.
            </summary>
            <remarks>Thread-safe.</remarks>
        </member>
        <member name="M:AIO.Net.HttpServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initialize HTTP server with a given IP address and port number
            </summary>
            <param name="address">IP address</param>
            <param name="port">Port number</param>
        </member>
        <member name="M:AIO.Net.HttpServer.#ctor(System.String,System.Int32)">
            <summary>
            Initialize HTTP server with a given IP address and port number
            </summary>
            <param name="address">IP address</param>
            <param name="port">Port number</param>
        </member>
        <member name="M:AIO.Net.HttpServer.#ctor(System.Net.DnsEndPoint)">
            <summary>
            Initialize HTTP server with a given DNS endpoint
            </summary>
            <param name="endpoint">DNS endpoint</param>
        </member>
        <member name="M:AIO.Net.HttpServer.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initialize HTTP server with a given IP endpoint
            </summary>
            <param name="endpoint">IP endpoint</param>
        </member>
        <member name="P:AIO.Net.HttpServer.Cache">
            <summary>
            Get the static content cache
            </summary>
        </member>
        <member name="M:AIO.Net.HttpServer.AddStaticContent(System.String,System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Add static content cache
            </summary>
            <param name="path">Static content path</param>
            <param name="prefix">Cache prefix (default is "/")</param>
            <param name="filter">Cache filter (default is "*.*")</param>
            <param name="timeout">Refresh cache timeout (default is 1 hour)</param>
        </member>
        <member name="M:AIO.Net.HttpServer.RemoveStaticContent(System.String)">
            <summary>
            Remove static content cache
            </summary>
            <param name="path">Static content path</param>
        </member>
        <member name="M:AIO.Net.HttpServer.ClearStaticContent">
            <summary>
            Clear static content cache
            </summary>
        </member>
        <member name="M:AIO.Net.HttpServer.CreateSession">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.HttpServer.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:AIO.Net.HttpSession">
            <summary>
            HTTP session is used to receive/send HTTP requests/responses from the connected HTTP client.
            </summary>
            <remarks>Thread-safe.</remarks>
        </member>
        <member name="M:AIO.Net.HttpSession.#ctor(AIO.Net.HttpServer)">
            <inheritdoc />
        </member>
        <member name="P:AIO.Net.HttpSession.Cache">
            <summary>
            Get the static content cache
            </summary>
        </member>
        <member name="P:AIO.Net.HttpSession.Request">
            <summary>
            Get the HTTP request
            </summary>
        </member>
        <member name="P:AIO.Net.HttpSession.Response">
            <summary>
            Get the HTTP response
            </summary>
        </member>
        <member name="M:AIO.Net.HttpSession.SendResponse">
            <summary>
            Send the current HTTP response (synchronous)
            </summary>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.HttpSession.SendResponse(AIO.Net.HttpResponse)">
            <summary>
            Send the HTTP response (synchronous)
            </summary>
            <param name="response">HTTP response</param>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.HttpSession.SendResponseBody(System.String)">
            <summary>
            Send the HTTP response body (synchronous)
            </summary>
            <param name="body">HTTP response body</param>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.HttpSession.SendResponseBody(System.Byte[])">
            <summary>
            Send the HTTP response body (synchronous)
            </summary>
            <param name="buffer">HTTP response body buffer</param>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.HttpSession.SendResponseBody(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send the HTTP response body (synchronous)
            </summary>
            <param name="buffer">HTTP response body buffer</param>
            <param name="offset">HTTP response body buffer offset</param>
            <param name="size">HTTP response body size</param>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.HttpSession.SendResponseAsync">
            <summary>
            Send the current HTTP response (asynchronous)
            </summary>
            <returns>'true' if the current HTTP response was successfully sent, 'false' if the session is not connected</returns>
        </member>
        <member name="M:AIO.Net.HttpSession.SendResponseAsync(AIO.Net.HttpResponse)">
            <summary>
            Send the HTTP response (asynchronous)
            </summary>
            <param name="response">HTTP response</param>
            <returns>'true' if the current HTTP response was successfully sent, 'false' if the session is not connected</returns>
        </member>
        <member name="M:AIO.Net.HttpSession.SendResponseBodyAsync(System.String)">
            <summary>
            Send the HTTP response body (asynchronous)
            </summary>
            <param name="body">HTTP response body</param>
            <returns>'true' if the HTTP response body was successfully sent, 'false' if the session is not connected</returns>
        </member>
        <member name="M:AIO.Net.HttpSession.SendResponseBodyAsync(System.Byte[])">
            <summary>
            Send the HTTP response body (asynchronous)
            </summary>
            <param name="buffer">HTTP response body buffer</param>
            <returns>'true' if the HTTP response body was successfully sent, 'false' if the session is not connected</returns>
        </member>
        <member name="M:AIO.Net.HttpSession.SendResponseBodyAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send the HTTP response body (asynchronous)
            </summary>
            <param name="buffer">HTTP response body buffer</param>
            <param name="offset">HTTP response body buffer offset</param>
            <param name="size">HTTP response body size</param>
            <returns>'true' if the HTTP response body was successfully sent, 'false' if the session is not connected</returns>
        </member>
        <member name="M:AIO.Net.HttpSession.OnReceived(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.HttpSession.OnDisconnected">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.HttpSession.OnReceivedRequestHeader(AIO.Net.HttpRequest)">
            <summary>
            Handle HTTP request header received notification
            </summary>
            <remarks>Notification is called when HTTP request header was received from the client.</remarks>
            <param name="request">HTTP request</param>
        </member>
        <member name="M:AIO.Net.HttpSession.OnReceivedRequest(AIO.Net.HttpRequest)">
            <summary>
            Handle HTTP request received notification
            </summary>
            <remarks>Notification is called when HTTP request was received from the client.</remarks>
            <param name="request">HTTP request</param>
        </member>
        <member name="M:AIO.Net.HttpSession.OnReceivedCachedRequest(AIO.Net.HttpRequest,System.Byte[])">
             <summary>
             Handle HTTP cached request received notification
             </summary>
             <remarks>
             Notification is called when HTTP request was received
             from the client and the corresponding cached content
             was found.
            
             Default behavior is just send cached response content
             to the client.
             </remarks>
             <param name="request">HTTP request</param>
             <param name="content">Cached response content</param>
        </member>
        <member name="M:AIO.Net.HttpSession.OnReceivedRequestError(AIO.Net.HttpRequest,System.String)">
            <summary>
            Handle HTTP request error notification
            </summary>
            <remarks>Notification is called when HTTP request error was received from the client.</remarks>
            <param name="request">HTTP request</param>
            <param name="error">HTTP request error</param>
        </member>
        <member name="T:AIO.Net.INet">
            <summary>
            INet interface
            </summary>
        </member>
        <member name="T:AIO.Net.INetClient">
            <summary>
            INetClient interface
            </summary>
        </member>
        <member name="M:AIO.Net.INetClient.Connect">
            <summary>
            Connect the client (synchronous)
            </summary>
            <returns>'true' if the client was successfully connected, 'false' if the client failed to connect</returns>
        </member>
        <member name="M:AIO.Net.INetClient.Disconnect">
            <summary>
            Disconnect the client (synchronous)
            </summary>
            <returns>'true' if the client was successfully disconnected, 'false' if the client is already disconnected</returns>
        </member>
        <member name="M:AIO.Net.INetClient.Reconnect">
            <summary>
            Reconnect the client (synchronous)
            </summary>
            <returns>'true' if the client was successfully reconnected, 'false' if the client is already reconnected</returns>
        </member>
        <member name="M:AIO.Net.INetClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send datagram to the connected server (synchronous)
            </summary>
            <param name="buffer">Datagram buffer to send</param>
            <param name="offset">Datagram buffer offset</param>
            <param name="size">Datagram buffer size</param>
            <returns>Size of sent datagram</returns>
        </member>
        <member name="M:AIO.Net.INetClient.Send(System.Byte[])">
            <summary>
            Send datagram to the connected server (synchronous)
            </summary>
            <param name="buffer">Datagram buffer to send as a span of bytes</param>
            <returns>Size of sent datagram</returns>
        </member>
        <member name="M:AIO.Net.INetClient.Send``1(``0)">
            <summary>
            Send text to the connected server (synchronous)
            </summary>
            <param name="data">Data to send</param>
            <returns>Size of sent datagram</returns>
        </member>
        <member name="M:AIO.Net.INetClient.Send(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send datagram to the given endpoint (synchronous)
            </summary>
            <param name="endpoint">Endpoint to send</param>
            <param name="buffer">Datagram buffer to send</param>
            <param name="offset">Datagram buffer offset</param>
            <param name="size">Datagram buffer size</param>
            <returns>Size of sent datagram</returns>
        </member>
        <member name="M:AIO.Net.INetClient.Send``1(System.Net.EndPoint,``0)">
            <summary>
            Send datagram to the given endpoint (synchronous)
            </summary>
            <param name="endpoint">Endpoint to send</param>
            <param name="data">Datagram buffer to send</param>
            <returns>Size of sent datagram</returns>
        </member>
        <member name="M:AIO.Net.INetClient.Send(System.Net.EndPoint,System.Byte[])">
            <summary>
            Send datagram to the given endpoint (synchronous)
            </summary>
            <param name="endpoint">Endpoint to send</param>
            <param name="buffer">Datagram buffer to send</param>
            <returns>Size of sent datagram</returns>
        </member>
        <member name="M:AIO.Net.INetClient.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send datagram to the connected server (asynchronous)
            </summary>
            <param name="buffer">Datagram buffer to send</param>
            <param name="offset">Datagram buffer offset</param>
            <param name="size">Datagram buffer size</param>
            <returns>'true' if the datagram was successfully sent, 'false' if the datagram was not sent</returns>
        </member>
        <member name="M:AIO.Net.INetClient.SendAsync(System.Byte[])">
            <summary>
            Send datagram to the connected server (asynchronous)
            </summary>
            <param name="buffer">Datagram buffer to send as a span of bytes</param>
            <returns>'true' if the datagram was successfully sent, 'false' if the datagram was not sent</returns>
        </member>
        <member name="M:AIO.Net.INetClient.SendAsync``1(``0)">
            <summary>
            Send text to the connected server (asynchronous)
            </summary>
            <param name="data">Data to send</param>
            <returns>Size of sent datagram</returns>
        </member>
        <member name="M:AIO.Net.INetClient.SendAsync(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send datagram to the given endpoint (synchronous)
            </summary>
            <param name="endpoint">Endpoint to send</param>
            <param name="buffer">Datagram buffer to send</param>
            <param name="offset">Datagram buffer offset</param>
            <param name="size">Datagram buffer size</param>
            <returns>Size of sent datagram</returns>
        </member>
        <member name="M:AIO.Net.INetClient.SendAsync``1(System.Net.EndPoint,``0)">
            <summary>
            Send datagram to the given endpoint (synchronous)
            </summary>
            <param name="endpoint">Endpoint to send</param>
            <param name="data">Datagram buffer to send</param>
            <returns>Size of sent datagram</returns>
        </member>
        <member name="M:AIO.Net.INetClient.SendAsync(System.Net.EndPoint,System.Byte[])">
            <summary>
            Send datagram to the given endpoint (synchronous)
            </summary>
            <param name="endpoint">Endpoint to send</param>
            <param name="buffer">Datagram buffer to send</param>
            <returns>Size of sent datagram</returns>
        </member>
        <member name="M:AIO.Net.INetClient.ReceiveAsync">
            <summary>
            Receive datagram from the server (asynchronous)
            </summary>
        </member>
        <member name="T:AIO.Net.ExtendNetServer">
            <summary>
            Net Server Extend
            </summary>
        </member>
        <member name="M:AIO.Net.ExtendNetServer.Receive(AIO.Net.INetServer,AIO.Net.INetSession,System.Byte[])">
            <summary>
            Receive a new datagram from the given endpoint (synchronous)
            </summary>
            <param name="server">Server</param>
            <param name="endpoint">Endpoint to receive from</param>
            <param name="buffer">Datagram buffer to receive</param>
            <returns>Size of received datagram</returns>
        </member>
        <member name="T:AIO.Net.INetServer">
            <summary>
            INetServer interface
            </summary>
        </member>
        <member name="M:AIO.Net.INetServer.SendAsync(AIO.Net.INetSession,System.Byte[])">
            <summary>
            Send datagram to the given endpoint (asynchronous)
            </summary>
            <param name="session">Endpoint to send</param>
            <param name="buffer">Datagram buffer to send as a span of bytes</param>
            <returns>'true' if the datagram was successfully sent, 'false' if the datagram was not sent</returns>
        </member>
        <member name="M:AIO.Net.INetServer.Send(AIO.Net.INetSession,System.Byte[])">
            <summary>
            Send datagram to the given endpoint (synchronous)
            </summary>
            <param name="session">Endpoint to send</param>
            <param name="buffer">Datagram buffer to send as a span of bytes</param>
            <returns>Size of sent datagram</returns>
        </member>
        <member name="M:AIO.Net.INetServer.Multicast(System.Byte[])">
            <summary>
            Multicast datagram to the prepared multicast endpoint (synchronous)
            </summary>
            <param name="buffer">Datagram buffer to multicast</param>
            <returns>Size of multicasted datagram</returns>
        </member>
        <member name="M:AIO.Net.INetServer.MulticastAsync(System.Byte[])">
            <summary>
            Multicast datagram to the prepared multicast endpoint (asynchronous)
            </summary>
            <param name="buffer">Datagram buffer to multicast</param>
            <returns>'true' if the datagram was successfully multicasted, 'false' if the datagram was not multicasted</returns>
        </member>
        <member name="M:AIO.Net.INetServer.Receive(AIO.Net.INetSession,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receive a new datagram from the given endpoint (synchronous)
            </summary>
            <param name="session">Endpoint to receive from</param>
            <param name="buffer">Datagram buffer to receive</param>
            <param name="offset">Datagram buffer offset</param>
            <param name="size">Datagram buffer size</param>
            <returns>Size of received datagram</returns>
        </member>
        <member name="M:AIO.Net.INetServer.ReceiveAsync(AIO.Net.INetSession)">
            <summary>
            Receive a new datagram from the given endpoint (synchronous)
            </summary>
            <param name="session">Endpoint to receive from</param>
            <returns>Size of received datagram</returns>
        </member>
        <member name="M:AIO.Net.ExtendNetSession.Multicast(AIO.Net.INetSession,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Multicast datagram to the prepared multicast endpoint (synchronous)
            </summary>
            <param name="session"></param>
            <param name="buffer">Datagram buffer to multicast</param>
            <param name="offset">Datagram buffer offset</param>
            <param name="size">Datagram buffer size</param>
            <returns>Size of multicasted datagram</returns>
        </member>
        <member name="M:AIO.Net.ExtendNetSession.Multicast``1(AIO.Net.INetSession,``0)">
            <summary>
            Multicast text to the prepared multicast endpoint (synchronous)
            </summary>
            <param name="session"></param>
            <param name="data">data to multicast</param>
            <returns>Size of multicasted datagram</returns>
        </member>
        <member name="M:AIO.Net.ExtendNetSession.MulticastAsync(AIO.Net.INetSession,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Multicast datagram to the prepared multicast endpoint (asynchronous)
            </summary>
            <param name="session"></param>
            <param name="buffer">Datagram buffer to multicast</param>
            <param name="offset">Datagram buffer offset</param>
            <param name="size">Datagram buffer size</param>
            <returns>'true' if the datagram was successfully multicasted, 'false' if the datagram was not multicasted</returns>
        </member>
        <member name="M:AIO.Net.ExtendNetSession.MulticastAsync``2(``0,``1)">
            <summary>
            Multicast text to the prepared multicast endpoint (asynchronous)
            </summary>
            <param name="session"></param>
            <param name="data">data to multicast</param>
            <returns>'true' if the text was successfully multicasted, 'false' if the text was not multicasted</returns>
        </member>
        <member name="T:AIO.Net.INetSession">
            <summary>
            nameof(NetSession)
            </summary>
        </member>
        <member name="P:AIO.Net.INetSession.Id">
            <summary>
            Server Id
            </summary>
        </member>
        <member name="M:AIO.Net.INetSession.Send(System.Byte[])">
            <summary>
            Send datagram to the given endpoint (asynchronous)
            </summary>
            <param name="buffer">Datagram buffer to send as a span of bytes</param>
            <returns>'true' if the datagram was successfully sent, 'false' if the datagram was not sent</returns>
        </member>
        <member name="M:AIO.Net.INetSession.SendAsync(System.Byte[])">
            <summary>
            Send datagram to the given endpoint (synchronous)
            </summary>
            <param name="buffer">Datagram buffer to send as a span of bytes</param>
            <returns>Size of sent datagram</returns>
        </member>
        <member name="M:AIO.Net.INetSession.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receive a new datagram from the given endpoint (synchronous)
            </summary>
            <param name="buffer">Datagram buffer to receive</param>
            <param name="offset">Datagram buffer offset</param>
            <param name="size">Datagram buffer size</param>
            <returns>Size of received datagram</returns>
        </member>
        <member name="M:AIO.Net.INetSession.ReceiveAsync">
            <summary>
            Receive datagram from the client (asynchronous)
            </summary>
        </member>
        <member name="T:AIO.Net.IWebSocket">
            <summary>
            WebSocket interface
            </summary>
        </member>
        <member name="M:AIO.Net.IWebSocket.OnWsConnecting(AIO.Net.HttpRequest)">
            <summary>
            Handle WebSocket client connecting notification
            </summary>
            <remarks>Notification is called when WebSocket client is connecting to the server. You can handle the connection and change WebSocket upgrade HTTP request by providing your own headers.</remarks>
            <param name="request">WebSocket upgrade HTTP request</param>
        </member>
        <member name="M:AIO.Net.IWebSocket.OnWsConnected(AIO.Net.HttpResponse)">
            <summary>
            Handle WebSocket client connected notification
            </summary>
            <param name="response">WebSocket upgrade HTTP response</param>
        </member>
        <member name="M:AIO.Net.IWebSocket.OnWsConnecting(AIO.Net.HttpRequest,AIO.Net.HttpResponse)">
            <summary>
            Handle WebSocket server session validating notification
            </summary>
            <remarks>Notification is called when WebSocket client is connecting to the server. You can handle the connection and validate WebSocket upgrade HTTP request.</remarks>
            <param name="request">WebSocket upgrade HTTP request</param>
            <param name="response">WebSocket upgrade HTTP response</param>
            <returns>return 'true' if the WebSocket update request is valid, 'false' if the WebSocket update request is not valid</returns>
        </member>
        <member name="M:AIO.Net.IWebSocket.OnWsConnected(AIO.Net.HttpRequest)">
            <summary>
            Handle WebSocket server session connected notification
            </summary>
            <param name="request">WebSocket upgrade HTTP request</param>
        </member>
        <member name="M:AIO.Net.IWebSocket.OnWsDisconnecting">
            <summary>
            Handle WebSocket client disconnecting notification
            </summary>
        </member>
        <member name="M:AIO.Net.IWebSocket.OnWsDisconnected">
            <summary>
            Handle WebSocket client disconnected notification
            </summary>
        </member>
        <member name="M:AIO.Net.IWebSocket.OnWsReceived(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Handle WebSocket received notification
            </summary>
            <param name="buffer">Received buffer</param>
            <param name="offset">Received buffer offset</param>
            <param name="size">Received buffer size</param>
        </member>
        <member name="M:AIO.Net.IWebSocket.OnWsClose(System.Byte[],System.Int64,System.Int64,System.Int32)">
            <summary>
            Handle WebSocket client close notification
            </summary>
            <param name="buffer">Received buffer</param>
            <param name="offset">Received buffer offset</param>
            <param name="size">Received buffer size</param>
            <param name="status">WebSocket close status (default is 1000)</param>
        </member>
        <member name="M:AIO.Net.IWebSocket.OnWsPing(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Handle WebSocket ping notification
            </summary>
            <param name="buffer">Received buffer</param>
            <param name="offset">Received buffer offset</param>
            <param name="size">Received buffer size</param>
        </member>
        <member name="M:AIO.Net.IWebSocket.OnWsPong(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Handle WebSocket pong notification
            </summary>
            <param name="buffer">Received buffer</param>
            <param name="offset">Received buffer offset</param>
            <param name="size">Received buffer size</param>
        </member>
        <member name="M:AIO.Net.IWebSocket.OnWsError(System.String)">
            <summary>
            Handle WebSocket error notification
            </summary>
            <param name="error">Error message</param>
        </member>
        <member name="M:AIO.Net.IWebSocket.OnWsError(System.Net.Sockets.SocketError)">
            <summary>
            Handle socket error notification
            </summary>
            <param name="error">Socket error</param>
        </member>
        <member name="M:AIO.Net.IWebSocket.SendUpgrade(AIO.Net.HttpResponse)">
            <summary>
            Send WebSocket server upgrade response
            </summary>
            <param name="response">WebSocket upgrade HTTP response</param>
        </member>
        <member name="T:AIO.Net.NetClient">
            <summary>
            Net client interface
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.#ctor">
            <summary>
            Client socket
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.#ctor(System.Net.EndPoint,System.String,System.Int32)">
            <summary>
            Create a new Net client with a given server address and port
            </summary>
            <param name="endpoint">Endpoint</param>
            <param name="address">Server address</param>
            <param name="port">Server port</param>
        </member>
        <member name="M:AIO.Net.NetClient.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initialize Net client with a given server IP address and port number
            </summary>
            <param name="address">IP address</param>
            <param name="port">Port number</param>
        </member>
        <member name="M:AIO.Net.NetClient.#ctor(System.String,System.Int32)">
            <summary>
            Initialize Net client with a given server IP address and port number
            </summary>
            <param name="address">IP address</param>
            <param name="port">Port number</param>
        </member>
        <member name="M:AIO.Net.NetClient.#ctor(System.Net.DnsEndPoint)">
            <summary>
            Initialize Net client with a given DNS endpoint
            </summary>
            <param name="endpoint">DNS endpoint</param>
        </member>
        <member name="M:AIO.Net.NetClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initialize Net client with a given IP endpoint
            </summary>
            <param name="endpoint">IP endpoint</param>
        </member>
        <member name="P:AIO.Net.NetClient.Id">
            <summary>
            Client Id
            </summary>
        </member>
        <member name="P:AIO.Net.NetClient.Address">
            <summary>
            UDP server address
            </summary>
        </member>
        <member name="P:AIO.Net.NetClient.Port">
            <summary>
            UDP server port
            </summary>
        </member>
        <member name="P:AIO.Net.NetClient.Endpoint">
            <summary>
            Endpoint
            </summary>
        </member>
        <member name="P:AIO.Net.NetClient.Socket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="P:AIO.Net.NetClient.BytesPending">
            <summary>
            Number of bytes pending sent by the client
            </summary>
        </member>
        <member name="P:AIO.Net.NetClient.BytesSending">
            <summary>
            Number of bytes sending by the client
            </summary>
        </member>
        <member name="P:AIO.Net.NetClient.BytesSent">
            <summary>
            Number of bytes sent by the client
            </summary>
        </member>
        <member name="P:AIO.Net.NetClient.BytesReceived">
            <summary>
            Number of bytes received by the client
            </summary>
        </member>
        <member name="P:AIO.Net.NetClient.DatagramsSent">
            <summary>
            Number of datagrams sent by the client
            </summary>
        </member>
        <member name="P:AIO.Net.NetClient.DatagramsReceived">
            <summary>
            Number of datagrams received by the client
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.OnConnecting">
            <summary>
            Handle client connecting notification
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.OnConnected">
            <summary>
            Handle client connected notification
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.OnDisconnecting">
            <summary>
            Handle client disconnecting notification
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.OnDisconnected">
            <summary>
            Handle client disconnected notification
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.OnError(System.Net.Sockets.SocketError)">
            <summary>
            Handle error notification
            </summary>
            <param name="error">Socket error code</param>
        </member>
        <member name="M:AIO.Net.NetClient.SendError(System.Net.Sockets.SocketError)">
            <summary>
            Send error notification
            </summary>
            <param name="error">Socket error code</param>
        </member>
        <member name="P:AIO.Net.NetClient.IsConnected">
            <summary>
            Is the client connected?
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.Disconnect">
            <summary>
            Disconnect the client (synchronous)
            </summary>
            <returns>'true' if the client was successfully disconnected, 'false' if the client is already disconnected</returns>
        </member>
        <member name="M:AIO.Net.NetClient.Connect">
            <summary>
            Connect the client (synchronous)
            </summary>
            <returns>'true' if the client was successfully connected, 'false' if the client failed to connect</returns>
        </member>
        <member name="M:AIO.Net.NetClient.Reconnect">
            <summary>
            Reconnect the client (synchronous)
            </summary>
            <returns>'true' if the client was successfully reconnected, 'false' if the client is already reconnected</returns>
        </member>
        <member name="M:AIO.Net.NetClient.ReceiveAsync">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.TryReceive">
            <summary>
            Try to receive new data
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.ClearBuffers">
            <summary>
            Clear send/receive buffers
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.CreateSocket">
            <summary>
            Create a new socket object
            </summary>
            <remarks>
            Method may be override if you need to prepare some specific socket object in your implementation.
            </remarks>
            <returns>Socket object</returns>
        </member>
        <member name="F:AIO.Net.NetClient.ReceiveEndpoint">
            <summary>
            Endpoint to receive from
            </summary>
        </member>
        <member name="F:AIO.Net.NetClient.Receiving">
            <summary>
            Receiving flag
            </summary>
        </member>
        <member name="F:AIO.Net.NetClient.ReceiveEventArg">
            <summary>
            Receive event arguments
            </summary>
        </member>
        <member name="F:AIO.Net.NetClient.ReceiveBuffer">
            <summary>
            Receive buffer
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.Receive(System.Byte[])">
            <summary>
            Receive a new datagram from the given endpoint (synchronous)
            </summary>
            <param name="buffer">Datagram buffer to receive</param>
            <returns>Size of received datagram</returns>
        </member>
        <member name="M:AIO.Net.NetClient.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receive a new datagram from the given endpoint (synchronous)
            </summary>
            <param name="buffer">Datagram buffer to receive</param>
            <param name="offset">Datagram buffer offset</param>
            <param name="size">Datagram buffer size</param>
            <returns>Size of received datagram</returns>
        </member>
        <member name="M:AIO.Net.NetClient.Receive(System.Net.EndPoint@,System.Byte[])">
            <summary>
            Receive a new datagram from the given endpoint (synchronous)
            </summary>
            <param name="endpoint">Endpoint to receive from</param>
            <param name="buffer">Datagram buffer to receive</param>
            <returns>Size of received datagram</returns>
        </member>
        <member name="M:AIO.Net.NetClient.Receive(System.Net.EndPoint@,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receive a new datagram from the given endpoint (synchronous)
            </summary>
            <param name="endpoint">Endpoint to receive from</param>
            <param name="buffer">Datagram buffer to receive</param>
            <param name="offset">Datagram buffer offset</param>
            <param name="size">Datagram buffer size</param>
            <returns>Size of received datagram</returns>
        </member>
        <member name="F:AIO.Net.NetClient.SendEndpoint">
            <summary>
            Endpoint to send to
            </summary>
        </member>
        <member name="F:AIO.Net.NetClient.Sending">
            <summary>
            Sending flag
            </summary>
        </member>
        <member name="F:AIO.Net.NetClient.SendEventArg">
            <summary>
            Send event arguments
            </summary>
        </member>
        <member name="F:AIO.Net.NetClient.SendBuffer">
            <summary>
            Send buffer
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.TrySend">
            <summary>
            Try to send pending data
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.SendAsync(System.Net.EndPoint,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.Send(System.Net.EndPoint,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.Send(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.Send(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.Send(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.Send``1(System.Net.EndPoint,``0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.Send``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.SendAsync(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.SendAsync``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.SendAsync(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.SendAsync``1(System.Net.EndPoint,``0)">
            <inheritdoc />
        </member>
        <member name="P:AIO.Net.NetClient.IsDisposed">
            <summary>
            Disposed flag
            </summary>
        </member>
        <member name="P:AIO.Net.NetClient.IsSocketDisposed">
            <summary>
            Client socket disposed flag
            </summary>
        </member>
        <member name="M:AIO.Net.NetClient.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetClient.Dispose(System.Boolean)">
            <summary>
            Dispose client resources
            </summary>
            <param name="disposingManagedResources"></param>
        </member>
        <member name="T:AIO.Net.NetServer">
            <summary>
            Net Server class
            </summary>
        </member>
        <member name="P:AIO.Net.NetServer.Id">
            <summary>
            Client Id
            </summary>
        </member>
        <member name="P:AIO.Net.NetServer.Address">
            <summary>
            UDP server address
            </summary>
        </member>
        <member name="P:AIO.Net.NetServer.Port">
            <summary>
            UDP server port
            </summary>
        </member>
        <member name="P:AIO.Net.NetServer.Endpoint">
            <summary>
            Endpoint
            </summary>
        </member>
        <member name="P:AIO.Net.NetServer.IsStarted">
            <summary>
            Is the server started?
            </summary>
        </member>
        <member name="M:AIO.Net.NetServer.#ctor(System.Net.EndPoint,System.String,System.Int32)">
            <summary>
            Initialize Net server with a given endpoint, address and port
            </summary>
            <param name="endpoint">Endpoint</param>
            <param name="address">Server address</param>
            <param name="port">Server port</param>
        </member>
        <member name="M:AIO.Net.NetServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initialize Net server with a given endpoint, address and port
            </summary>
            <param name="address">Server address</param>
            <param name="port">Server port</param>
        </member>
        <member name="M:AIO.Net.NetServer.#ctor(System.String,System.Int32)">
            <summary>
            Initialize Net server with a given endpoint, address and port
            </summary>
            <param name="address">Server address</param>
            <param name="port">Server port</param>
        </member>
        <member name="M:AIO.Net.NetServer.#ctor(System.Net.DnsEndPoint)">
            <summary>
            Initialize Net server with a given endpoint, address and port
            </summary>
            <param name="endpoint">Server endpoint</param>
        </member>
        <member name="M:AIO.Net.NetServer.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initialize Net server with a given endpoint, address and port
            </summary>
            <param name="endpoint">Server endpoint</param>
        </member>
        <member name="M:AIO.Net.NetServer.CreateSocket">
            <summary>
            Create a new socket object
            </summary>
            <remarks>
            Method may be override if you need to prepare some specific socket object in your implementation.
            </remarks>
            <returns>Socket object</returns>
        </member>
        <member name="M:AIO.Net.NetServer.Stop">
            <summary>
            Stop the server (synchronous)
            </summary>
            <returns>'true' if the server was successfully stopped, 'false' if the server is already stopped</returns>
        </member>
        <member name="M:AIO.Net.NetServer.Start">
            <summary>
            Start the server with a given multicast endpoint (synchronous)
            </summary>
            <returns>'true' if the server was successfully started, 'false' if the server failed to start</returns>
        </member>
        <member name="P:AIO.Net.NetServer.IsDisposed">
            <summary>
            Disposed flag
            </summary>
        </member>
        <member name="P:AIO.Net.NetServer.IsSocketDisposed">
            <summary>
            Server socket disposed flag
            </summary>
        </member>
        <member name="M:AIO.Net.NetServer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetServer.Restart">
            <summary>
            Restart the server (synchronous)
            </summary>
            <returns>'true' if the server was successfully restarted, 'false' if the server failed to restart</returns>
        </member>
        <member name="M:AIO.Net.NetServer.ClearBuffers">
            <summary>
            Clear send/receive buffers
            </summary>
        </member>
        <member name="M:AIO.Net.NetServer.SendError(System.Net.Sockets.SocketError)">
            <summary>
            Send error notification
            </summary>
            <param name="error">Socket error code</param>
        </member>
        <member name="M:AIO.Net.NetServer.Dispose(System.Boolean)">
            <summary>
            Dispose the server
            </summary>
            <param name="disposingManagedResources"></param>
        </member>
        <member name="M:AIO.Net.NetServer.OnError(System.Net.Sockets.SocketError)">
            <summary>
            Handle error notification
            </summary>
            <param name="error">Socket error code</param>
        </member>
        <member name="M:AIO.Net.NetServer.OnStarting">
            <summary>
            Handle server starting notification
            </summary>
        </member>
        <member name="M:AIO.Net.NetServer.OnStarted">
            <summary>
            Handle server started notification
            </summary>
        </member>
        <member name="M:AIO.Net.NetServer.OnStopping">
            <summary>
            Handle server stopping notification
            </summary>
        </member>
        <member name="M:AIO.Net.NetServer.OnStopped">
            <summary>
            Handle server stopped notification
            </summary>
        </member>
        <member name="M:AIO.Net.NetServer.OnReceived(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle datagram received notification
            </summary>
            <param name="endpoint">Received endpoint</param>
            <param name="buffer">Received datagram buffer</param>
            <param name="offset">Received datagram buffer offset</param>
            <param name="size">Received datagram buffer size</param>
            <remarks>
            Notification is called when another datagram was received from some endpoint
            </remarks>
        </member>
        <member name="M:AIO.Net.NetServer.OnSent(System.Net.EndPoint,System.Int32)">
            <summary>
            Handle datagram sent notification
            </summary>
            <param name="endpoint">Endpoint of sent datagram</param>
            <param name="sent">Size of sent datagram buffer</param>
            <remarks>
            Notification is called when a datagram was sent to the client.
            This handler could be used to send another datagram to the client for instance when the pending size is zero.
            </remarks>
        </member>
        <member name="M:AIO.Net.NetServer.MulticastAsync(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetServer.Multicast(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetServer.SendAsync(AIO.Net.INetSession,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetServer.Send(AIO.Net.INetSession,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetServer.Receive(AIO.Net.INetSession,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetServer.ReceiveAsync(AIO.Net.INetSession)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetServer.ToString">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetServer.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.NetServer.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:AIO.Net.NetSetting">
            <summary>
            TCP server/client setting 
            </summary>
        </member>
        <member name="P:AIO.Net.NetSetting.DualMode">
            <summary>
            Option: dual mode socket/双模式套接字
            </summary>
            <remarks>
            Specifies whether the Socket is a dual-mode socket used for both IPv4 and IPv6.
            Will work only if socket is bound on IPv6 address.
            </remarks>
            <remarks>
            指定套接字是否为用于IPv4和IPv6的双模式套接字。
            </remarks>
        </member>
        <member name="P:AIO.Net.NetSetting.KeepAlive">
            <summary>
            Option: keep alive/保持活动
            </summary>
            <remarks>
            This option will setup SO_KEEPALIVE if the OS support this feature
            </remarks>
            <remarks>
            此选项将设置SO_KEEPALIVE，如果操作系统支持此功能
            </remarks>
        </member>
        <member name="P:AIO.Net.NetSetting.TcpKeepAliveTime">
            <summary>
            Option: TCP keep alive time/选项：TCP保持活动时间
            </summary>
            <remarks>
            The number of seconds a TCP connection will remain alive/idle before keepalive probes are sent to the remote
            </remarks>
            <remarks>
            在发送保持活动探测到远程之前，TCP连接将保持活动/空闲的秒数
            </remarks>
        </member>
        <member name="P:AIO.Net.NetSetting.TcpKeepAliveInterval">
            <summary>
            Option: TCP keep alive interval/选项：TCP保持活动间隔
            </summary>
            <remarks>
            The number of seconds a TCP connection will wait for a keepalive response before sending another keepalive probe
            </remarks>
            <remarks>
            在发送另一个保持活动探测之前，TCP连接将等待保持活动响应的秒数
            </remarks>
        </member>
        <member name="P:AIO.Net.NetSetting.TcpKeepAliveRetryCount">
            <summary>
            Option: TCP keep alive retry count/选项：TCP保持活动重试计数
            </summary>
            <remarks>
            The number of TCP keep alive probes that will be sent before the connection is terminated
            </remarks>
            <remarks>
            在连接终止之前将发送的TCP保持活动探测次数
            </remarks>
        </member>
        <member name="P:AIO.Net.NetSetting.NoDelay">
            <summary>
            Option: no delay
            </summary>
            <remarks>
            This option will enable/disable Nagle's algorithm for TCP protocol
            </remarks>
        </member>
        <member name="P:AIO.Net.NetSetting.ReceiveBufferSize">
            <summary>
            Option: receive buffer size /选项：接收缓冲区大小
            </summary>
        </member>
        <member name="P:AIO.Net.NetSetting.SendBufferSize">
            <summary>
            Option: send buffer size/选项：发送缓冲区大小
            </summary>
        </member>
        <member name="T:AIO.Net.TcpClient">
            <summary>
            TCP客户端用于向连接的TCP服务器读写数据
            </summary>
            <remarks>Thread-safe</remarks>
        </member>
        <member name="F:AIO.Net.TcpClient.ConnectEventArg">
            <summary>
            Connect Event Arg
            </summary>
        </member>
        <member name="P:AIO.Net.TcpClient.IsConnecting">
            <summary>
            Is the client connecting?
            </summary>
        </member>
        <member name="P:AIO.Net.TcpClient.IsConnected">
            <summary>
            Is the client connected?
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.CreateSocket">
            <summary>
            Create a new socket object
            </summary>
            <remarks>
            Method may be override if you need to prepare some specific socket object in your implementation.
            </remarks>
            <returns>Socket object</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.Connect">
            <summary>
            Connect the client (synchronous)
            </summary>
            <remarks>
            Please note that synchronous connect will not receive data automatically!
            You should use Receive() or ReceiveAsync() method manually after successful connection.
            </remarks>
            <returns>'true' if the client was successfully connected, 'false' if the client failed to connect</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.Disconnect">
            <summary>
            Disconnect the client (synchronous)
            </summary>
            <returns>'true' if the client was successfully disconnected, 'false' if the client is already disconnected</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.Reconnect">
            <summary>
            Reconnect the client (synchronous)
            </summary>
            <returns>'true' if the client was successfully reconnected, 'false' if the client is already reconnected</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.ConnectAsync">
            <summary>
            Connect the client (asynchronous)
            </summary>
            <returns>'true' if the client was successfully connected, 'false' if the client failed to connect</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.DisconnectAsync">
            <summary>
            Disconnect the client (asynchronous)
            </summary>
            <returns>'true' if the client was successfully disconnected, 'false' if the client is already disconnected</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.ReconnectAsync">
            <summary>
            Reconnect the client (asynchronous)
            </summary>
            <returns>'true' if the client was successfully reconnected, 'false' if the client is already reconnected</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.ProcessConnect(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is invoked when an asynchronous connect operation completes
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initialize TCP client with a given server IP address and port number
            </summary>
            <param name="address">IP address</param>
            <param name="port">Port number</param>
        </member>
        <member name="M:AIO.Net.TcpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initialize TCP client with a given server IP address and port number
            </summary>
            <param name="address">IP address</param>
            <param name="port">Port number</param>
        </member>
        <member name="M:AIO.Net.TcpClient.#ctor(System.Net.DnsEndPoint)">
            <summary>
            Initialize TCP client with a given DNS endpoint
            </summary>
            <param name="endpoint">DNS endpoint</param>
        </member>
        <member name="M:AIO.Net.TcpClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initialize TCP client with a given IP endpoint
            </summary>
            <param name="endpoint">IP endpoint</param>
        </member>
        <member name="M:AIO.Net.TcpClient.#ctor(System.Net.EndPoint,System.String,System.Int32)">
            <summary>
            Initialize TCP client with a given endpoint, address and port
            </summary>
            <param name="endpoint">Endpoint</param>
            <param name="address">Server address</param>
            <param name="port">Server port</param>
        </member>
        <member name="P:AIO.Net.TcpClient.Id">
            <summary>
            Client Id / 标识ID
            </summary>
        </member>
        <member name="P:AIO.Net.TcpClient.Address">
            <summary>
            TCP server address / 地址
            </summary>
        </member>
        <member name="P:AIO.Net.TcpClient.Port">
            <summary>
            TCP server port / 端口
            </summary>
        </member>
        <member name="P:AIO.Net.TcpClient.Endpoint">
            <summary>
            Endpoint / 端点
            </summary>
        </member>
        <member name="P:AIO.Net.TcpClient.Socket">
            <summary>
            Socket/套接字
            </summary>
        </member>
        <member name="P:AIO.Net.TcpClient.BytesPending">
            <summary>
            Number of bytes pending sent by the client / 客户端待发送的字节数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpClient.BytesSending">
            <summary>
            Number of bytes sending by the client / 客户端正在发送的字节数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpClient.BytesSent">
            <summary>
            Number of bytes sent by the client / 客户端已发送的字节数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpClient.BytesReceived">
            <summary>
            Number of bytes received by the client / 客户端已接收的字节数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpClient.Option">
            <summary>
            Client option / 客户端选项
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.ClearBuffers">
            <summary>
            Clear send/receive buffers / 清除发送/接收缓冲区
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.OnAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is called whenever a receive or send operation is completed on a socket/每当套接字上的接收或发送操作完成时，都会调用此方法
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.OnConnecting">
            <summary>
            Handle client connecting notification/处理客户端连接中通知
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.OnConnected">
            <summary>
            Handle client connected notification/处理客户端连接通知
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.OnDisconnecting">
            <summary>
            Handle client disconnecting notification / 处理客户端断开连接中通知
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.OnDisconnected">
            <summary>
            Handle client disconnected notification / 处理客户端断开连接通知
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.OnReceived(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle buffer received notification/处理缓冲区接收通知
            </summary>
            <param name="buffer">Received buffer</param>
            <param name="offset">Received buffer offset</param>
            <param name="size">Received buffer size</param>
            <remarks>
            Notification is called when another chunk of buffer was received from the server
            </remarks>
        </member>
        <member name="M:AIO.Net.TcpClient.OnSent(System.Int64,System.Int64)">
            <summary>
            Handle buffer sent notification/处理缓冲区发送通知
            </summary>
            <param name="sent">Size of sent buffer</param>
            <param name="pending">Size of pending buffer</param>
            <remarks>
            Notification is called when another chunk of buffer was sent to the server.
            This handler could be used to send another buffer to the server for instance when the pending size is zero.
            </remarks>
        </member>
        <member name="M:AIO.Net.TcpClient.OnEmpty">
            <summary>
            Handle empty send buffer notification/处理空发送缓冲区通知
            </summary>
            <remarks>
            Notification is called when the send buffer is empty and ready for a new data to send.
            This handler could be used to send another buffer to the server.
            </remarks>
        </member>
        <member name="M:AIO.Net.TcpClient.OnError(System.Net.Sockets.SocketError)">
            <summary>
            Handle error notification/处理错误通知
            </summary>
            <param name="error">Socket error code</param>
        </member>
        <member name="M:AIO.Net.TcpClient.SendError(System.Net.Sockets.SocketError)">
            <summary>
            Send error notification/发送错误通知
            </summary>
            <param name="error">Socket error code</param>
        </member>
        <member name="P:AIO.Net.TcpClient.IsDisposed">
            <summary>
            Disposed flag/已处理标志
            </summary>
        </member>
        <member name="P:AIO.Net.TcpClient.IsSocketDisposed">
            <summary>
            Client socket disposed flag/客户端套接字已处理标志
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.TcpClient.Dispose(System.Boolean)">
            <summary>
            Dispose client resources/处理客户端资源
            </summary>
            <param name="disposingManagedResources"></param>
        </member>
        <member name="F:AIO.Net.TcpClient.Receiving">
            <summary>
            Receiving flag
            </summary>
        </member>
        <member name="F:AIO.Net.TcpClient.ReceiveBuffer">
            <summary>
            Receive buffer
            </summary>
        </member>
        <member name="F:AIO.Net.TcpClient.ReceiveEventArg">
            <summary>
            Receive event args
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.Receive(System.Byte[])">
            <summary>
            Receive data from the server (synchronous)
            </summary>
            <param name="buffer">Buffer to receive</param>
            <returns>Size of received data</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receive data from the server (synchronous)
            </summary>
            <param name="buffer">Buffer to receive</param>
            <param name="offset">Buffer offset</param>
            <param name="size">Buffer size</param>
            <returns>Size of received data</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.ReceiveAsync">
            <summary>
            Receive data from the server (asynchronous)
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.TryReceive">
            <summary>
            Try to receive new data
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is invoked when an asynchronous receive operation completes
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send data to the server (synchronous)
            </summary>
            <param name="buffer">Buffer to send</param>
            <param name="offset">Buffer offset</param>
            <param name="size">Buffer size</param>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.Send(System.Byte[])">
            <summary>
            Send data to the server (synchronous)
            </summary>
            <param name="buffer">Buffer to send</param>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.Send(System.String)">
            <summary>
            Send text to the server (synchronous)
            </summary>
            <param name="text">Text to send as a span of characters</param>
            <returns>Size of sent text</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.Send(AIO.BufferByte)">
            <summary>
            Send text to the server (synchronous)
            </summary>
            <param name="buffer">Buffer to send</param>
            <returns>Size of sent text</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.SendAsync(System.Byte[])">
            <summary>
            Send data to the server (asynchronous)
            </summary>
            <param name="buffer">Buffer to send</param>
            <returns>'true' if the data was successfully sent, 'false' if the client is not connected</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send data to the server (asynchronous)
            </summary>
            <param name="buffer">Buffer to send</param>
            <param name="offset">Buffer offset</param>
            <param name="size">Buffer size</param>
            <returns>'true' if the data was successfully sent, 'false' if the client is not connected</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.SendAsync(System.String)">
            <summary>
            Send text to the server (asynchronous)
            </summary>
            <param name="text">Text to send as a span of characters</param>
            <returns>'true' if the text was successfully sent, 'false' if the client is not connected</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.SendAsync(AIO.BufferByte)">
            <summary>
            Send text to the server (asynchronous)
            </summary>
            <param name="buffer">Buffer to send</param>
            <returns>'true' if the text was successfully sent, 'false' if the client is not connected</returns>
        </member>
        <member name="M:AIO.Net.TcpClient.TrySend">
            <summary>
            Try to send pending data
            </summary>
        </member>
        <member name="M:AIO.Net.TcpClient.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is invoked when an asynchronous send operation completes
            </summary>
        </member>
        <member name="T:AIO.Net.NetSettingClient">
            <summary>
            TCP client setting 
            </summary>
        </member>
        <member name="P:AIO.Net.NetSettingClient.ReceiveBufferLimit">
            <summary>
            Option: receive buffer limit/选项：接收缓冲区限制
            </summary>
        </member>
        <member name="P:AIO.Net.NetSettingClient.SendBufferLimit">
            <summary>
            Option: send buffer limit/选项：发送缓冲区限制
            </summary>
        </member>
        <member name="T:AIO.Net.TcpServer">
            <summary>
            TCP server is used to connect, disconnect and manage TCP sessions
            </summary>
            <remarks>Thread-safe</remarks>
        </member>
        <member name="M:AIO.Net.TcpServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initialize TCP server with a given IP address and port number / 使用给定的IP地址和端口号初始化TCP服务器
            </summary>
            <param name="address">IP address</param>
            <param name="port">Port number</param>
        </member>
        <member name="M:AIO.Net.TcpServer.#ctor(System.String,System.Int32)">
            <summary>
            Initialize TCP server with a given IP address and port number / 使用给定的IP地址和端口号初始化TCP服务器
            </summary>
            <param name="address">IP address</param>
            <param name="port">Port number</param>
        </member>
        <member name="M:AIO.Net.TcpServer.#ctor(System.Net.DnsEndPoint)">
            <summary>
            Initialize TCP server with a given DNS endpoint / 使用给定的DNS端点初始化TCP服务器
            </summary>
            <param name="endpoint">DNS endpoint</param>
        </member>
        <member name="M:AIO.Net.TcpServer.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initialize TCP server with a given IP endpoint / 使用给定的IP端点初始化TCP服务器
            </summary>
            <param name="endpoint">IP endpoint</param>
        </member>
        <member name="P:AIO.Net.TcpServer.ConnectedSessions">
            <summary>
            Number of sessions connected to the server / 连接到服务器的会话数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpServer.BytesPending">
            <summary>
            Number of bytes pending sent by the server / 服务器待发送的字节数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpServer.BytesSent">
            <summary>
            Number of bytes sent by the server / 服务器发送的字节数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpServer.BytesReceived">
            <summary>
            Number of bytes received by the server / 服务器接收的字节数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpServer.Option">
            <summary>
            Server option / 服务器选项
            </summary>
        </member>
        <member name="F:AIO.Net.TcpServer._bytesPending">
            <summary>
            Number of bytes pending sent by the server / 服务器待发送的字节数
            </summary>
        </member>
        <member name="F:AIO.Net.TcpServer._bytesSent">
            <summary>
            Number of bytes sent by the server / 服务器发送的字节数
            </summary>
        </member>
        <member name="F:AIO.Net.TcpServer._bytesReceived">
            <summary>
            Number of bytes received by the server / 服务器接收的字节数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpServer.IsAccepting">
            <summary>
            Is the server accepting new clients?
            </summary>
        </member>
        <member name="M:AIO.Net.TcpServer.CreateSocket">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.TcpServer.Start">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.TcpServer.Stop">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.TcpServer.Restart">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.TcpServer.StartAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Start accept a new client connection
            </summary>
        </member>
        <member name="M:AIO.Net.TcpServer.ProcessAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Process accepted client connection
            </summary>
        </member>
        <member name="M:AIO.Net.TcpServer.OnAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is the callback method associated with Socket.AcceptAsync()
            operations and is invoked when an accept operation is complete
            </summary>
        </member>
        <member name="M:AIO.Net.TcpServer.CreateSession">
            <summary>
            Create TCP session factory method
            </summary>
            <returns>TCP session</returns>
        </member>
        <member name="F:AIO.Net.TcpServer.Sessions">
            <summary>
            Server sessions
            </summary>
        </member>
        <member name="M:AIO.Net.TcpServer.DisconnectAll">
            <summary>
            Disconnect all connected sessions
            </summary>
            <returns>'true' if all sessions were successfully disconnected, 'false' if the server is not started</returns>
        </member>
        <member name="M:AIO.Net.TcpServer.FindSession(System.Guid)">
            <summary>
            Find a session with a given Id
            </summary>
            <param name="id">Session Id</param>
            <returns>Session with a given Id or null if the session it not connected</returns>
        </member>
        <member name="M:AIO.Net.TcpServer.RegisterSession(AIO.Net.TcpSession)">
            <summary>
            Register a new session
            </summary>
            <param name="session">Session to register</param>
        </member>
        <member name="M:AIO.Net.TcpServer.UnregisterSession(System.Guid)">
            <summary>
            Unregister session by Id
            </summary>
            <param name="id">Session Id</param>
        </member>
        <member name="M:AIO.Net.TcpServer.Multicast(AIO.BufferByte)">
            <summary>
            Multicast data to all connected clients
            </summary>
            <param name="buffer">Buffer to send as a span of bytes</param>
            <returns>'true' if the data was successfully multicasted, 'false' if the data was not multicasted</returns>
        </member>
        <member name="M:AIO.Net.TcpServer.Multicast(System.String)">
            <summary>
            Multicast text to all connected clients
            </summary>
            <param name="text">Text string to multicast</param>
            <returns>'true' if the text was successfully multicasted, 'false' if the text was not multicasted</returns>
        </member>
        <member name="M:AIO.Net.TcpServer.OnConnecting(AIO.Net.TcpSession)">
            <summary>
            Handle session connecting notification
            </summary>
            <param name="session">Connecting session</param>
        </member>
        <member name="M:AIO.Net.TcpServer.OnConnected(AIO.Net.TcpSession)">
            <summary>
            Handle session connected notification
            </summary>
            <param name="session">Connected session</param>
        </member>
        <member name="M:AIO.Net.TcpServer.OnDisconnecting(AIO.Net.TcpSession)">
            <summary>
            Handle session disconnecting notification
            </summary>
            <param name="session">Disconnecting session</param>
        </member>
        <member name="M:AIO.Net.TcpServer.OnDisconnected(AIO.Net.TcpSession)">
            <summary>
            Handle session disconnected notification
            </summary>
            <param name="session">Disconnected session</param>
        </member>
        <member name="M:AIO.Net.TcpServer.SendError(System.Net.Sockets.SocketError)">
            <summary>
            Send error notification
            </summary>
            <param name="error">Socket error code</param>
        </member>
        <member name="T:AIO.Net.NetSettingServer">
            <summary>
            TCP server setting 
            </summary>
        </member>
        <member name="P:AIO.Net.NetSettingServer.ReuseAddress">
            <summary>
            Option: reuse address
            </summary>
            <remarks>
            This option will enable/disable SO_REUSEADDR if the OS support this feature
            </remarks>
        </member>
        <member name="P:AIO.Net.NetSettingServer.ExclusiveAddressUse">
            <summary>
            Option: enables a socket to be bound for exclusive access
            </summary>
            <remarks>
            This option will enable/disable SO_EXCLUSIVEADDRUSE if the OS support this feature
            </remarks>
        </member>
        <member name="P:AIO.Net.NetSettingServer.AcceptorBacklog">
            <summary>
            Option: acceptor backlog size /选项：接收器后备大小
            </summary>
            <remarks>
            This option will set the listening socket's backlog size
            </remarks>
        </member>
        <member name="T:AIO.Net.TcpSession">
            <summary>
            TCP session is used to read and write data from the connected TCP client
            </summary>
            <remarks>Thread-safe</remarks>
        </member>
        <member name="M:AIO.Net.TcpSession.#ctor(AIO.Net.TcpServer)">
            <summary>
            Initialize the session with a given server
            </summary>
            <param name="server">TCP server</param>
        </member>
        <member name="P:AIO.Net.TcpSession.Id">
            <summary>
            Session Id
            </summary>
        </member>
        <member name="P:AIO.Net.TcpSession.Server">
            <summary>
            Server
            </summary>
        </member>
        <member name="P:AIO.Net.TcpSession.Socket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="P:AIO.Net.TcpSession.BytesPending">
            <summary>
            Number of bytes pending sent by the session // 会话发送的待处理字节数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpSession.BytesSending">
            <summary>
            Number of bytes sending by the session // 会话发送的字节数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpSession.BytesSent">
            <summary>
            Number of bytes sent by the session // 会话发送的字节数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpSession.BytesReceived">
            <summary>
            Number of bytes received by the session // 会话接收的字节数
            </summary>
        </member>
        <member name="P:AIO.Net.TcpSession.OptionReceiveBufferLimit">
            <summary>
            Option: receive buffer limit
            </summary>
        </member>
        <member name="P:AIO.Net.TcpSession.OptionReceiveBufferSize">
            <summary>
            Option: receive buffer size
            </summary>
        </member>
        <member name="P:AIO.Net.TcpSession.OptionSendBufferLimit">
            <summary>
            Option: send buffer limit
            </summary>
        </member>
        <member name="P:AIO.Net.TcpSession.OptionSendBufferSize">
            <summary>
            Option: send buffer size
            </summary>
        </member>
        <member name="P:AIO.Net.TcpSession.IsConnected">
            <summary>
            Is the session connected?
            </summary>
        </member>
        <member name="M:AIO.Net.TcpSession.Connect(System.Net.Sockets.Socket)">
            <summary>
            Connect the session
            </summary>
            <param name="socket">Session socket</param>
        </member>
        <member name="M:AIO.Net.TcpSession.Disconnect">
            <summary>
            Disconnect the session
            </summary>
            <returns>'true' if the section was successfully disconnected, 'false' if the section is already disconnected</returns>
        </member>
        <member name="M:AIO.Net.TcpSession.ClearBuffers">
            <summary>
            Clear send/receive buffers
            </summary>
        </member>
        <member name="M:AIO.Net.TcpSession.OnAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is called whenever a receive or send operation is completed on a socket
            </summary>
        </member>
        <member name="M:AIO.Net.TcpSession.OnConnecting">
            <summary>
            Handle client connecting notification
            </summary>
        </member>
        <member name="M:AIO.Net.TcpSession.OnConnected">
            <summary>
            Handle client connected notification
            </summary>
        </member>
        <member name="M:AIO.Net.TcpSession.OnDisconnecting">
            <summary>
            Handle client disconnecting notification
            </summary>
        </member>
        <member name="M:AIO.Net.TcpSession.OnDisconnected">
            <summary>
            Handle client disconnected notification
            </summary>
        </member>
        <member name="M:AIO.Net.TcpSession.OnReceived(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle buffer received notification
            </summary>
            <param name="buffer">Received buffer</param>
            <param name="offset">Received buffer offset</param>
            <param name="size">Received buffer size</param>
            <remarks>
            Notification is called when another chunk of buffer was received from the client
            </remarks>
        </member>
        <member name="M:AIO.Net.TcpSession.OnSent(System.Int64,System.Int64)">
            <summary>
            Handle buffer sent notification
            </summary>
            <param name="sent">Size of sent buffer</param>
            <param name="pending">Size of pending buffer</param>
            <remarks>
            Notification is called when another chunk of buffer was sent to the client.
            This handler could be used to send another buffer to the client for instance when the pending size is zero.
            </remarks>
        </member>
        <member name="M:AIO.Net.TcpSession.OnEmpty">
            <summary>
            Handle empty send buffer notification
            </summary>
            <remarks>
            Notification is called when the send buffer is empty and ready for a new data to send.
            This handler could be used to send another buffer to the client.
            </remarks>
        </member>
        <member name="M:AIO.Net.TcpSession.OnError(System.Net.Sockets.SocketError)">
            <summary>
            Handle error notification
            </summary>
            <param name="error">Socket error code</param>
        </member>
        <member name="M:AIO.Net.TcpSession.SendError(System.Net.Sockets.SocketError)">
            <summary>
            Send error notification
            </summary>
            <param name="error">Socket error code</param>
        </member>
        <member name="P:AIO.Net.TcpSession.IsDisposed">
            <summary>
            Disposed flag
            </summary>
        </member>
        <member name="P:AIO.Net.TcpSession.IsSocketDisposed">
            <summary>
            Session socket disposed flag
            </summary>
        </member>
        <member name="M:AIO.Net.TcpSession.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.TcpSession.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposingManagedResources"></param>
        </member>
        <member name="M:AIO.Net.TcpSession.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receive data from the client (synchronous)
            </summary>
            <param name="buffer">Buffer to receive</param>
            <param name="offset">Buffer offset</param>
            <param name="size">Buffer size</param>
            <returns>Size of received data</returns>
        </member>
        <member name="M:AIO.Net.TcpSession.ReceiveAsync">
            <summary>
            Receive data from the client (asynchronous)
            </summary>
        </member>
        <member name="M:AIO.Net.TcpSession.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is invoked when an asynchronous receive operation completes
            </summary>
        </member>
        <member name="M:AIO.Net.TcpSession.Send(System.Byte[])">
            <summary>
            Send data to the client (synchronous)
            </summary>
            <param name="buffer">Buffer to send as a span of bytes</param>
            <returns>Size of sent data</returns>
        </member>
        <member name="M:AIO.Net.TcpSession.SendAsync(System.Byte[])">
            <summary>
            Send data to the client (asynchronous)
            </summary>
            <param name="buffer">Buffer to send</param>
            <returns>'true' if the data was successfully sent, 'false' if the session is not connected</returns>
        </member>
        <member name="M:AIO.Net.TcpSession.TrySend">
            <summary>
            Try to send pending data
            </summary>
        </member>
        <member name="M:AIO.Net.TcpSession.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is invoked when an asynchronous send operation completes
            </summary>
        </member>
        <member name="T:AIO.Net.UdpClient">
            <summary>
            UDP client is used to read/write data from/into the connected UDP server
            </summary>
            <remarks>Thread-safe</remarks>
        </member>
        <member name="M:AIO.Net.UdpClient.Connect">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.Disconnect">
            <inheritdoc />
        </member>
        <member name="P:AIO.Net.UdpClient.Option">
            <summary>
            Client option
            </summary>
        </member>
        <member name="M:AIO.Net.UdpClient.CreateSocket">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.SetupMulticast(System.Boolean)">
            <summary>
            Setup multicast: bind the socket to the multicast UDP server
            </summary>
            <param name="enable">Enable/disable multicast</param>
        </member>
        <member name="M:AIO.Net.UdpClient.JoinMulticastGroup(System.Net.IPAddress)">
            <summary>
            Join multicast group with a given IP address (synchronous)
            </summary>
            <param name="address">IP address</param>
        </member>
        <member name="M:AIO.Net.UdpClient.JoinMulticastGroup(System.String)">
            <summary>
            Join multicast group with a given IP address (synchronous)
            </summary>
            <param name="address">IP address</param>
        </member>
        <member name="M:AIO.Net.UdpClient.LeaveMulticastGroup(System.Net.IPAddress)">
            <summary>
            Leave multicast group with a given IP address (synchronous)
            </summary>
            <param name="address">IP address</param>
        </member>
        <member name="M:AIO.Net.UdpClient.LeaveMulticastGroup(System.String)">
            <summary>
            Leave multicast group with a given IP address (synchronous)
            </summary>
            <param name="address">IP address</param>
        </member>
        <member name="M:AIO.Net.UdpClient.ClearBuffers">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.OnAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is called whenever a receive or send operation is completed on a socket
            </summary>
        </member>
        <member name="M:AIO.Net.UdpClient.ProcessReceiveFrom(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is invoked when an asynchronous receive from operation completes
            </summary>
        </member>
        <member name="M:AIO.Net.UdpClient.ProcessSendTo(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is invoked when an asynchronous send to operation completes
            </summary>
        </member>
        <member name="M:AIO.Net.UdpClient.OnJoinedMulticastGroup(System.Net.IPAddress)">
            <summary>
            Handle client joined multicast group notification
            </summary>
            <param name="address">IP address</param>
        </member>
        <member name="M:AIO.Net.UdpClient.OnLeftMulticastGroup(System.Net.IPAddress)">
            <summary>
            Handle client left multicast group notification
            </summary>
            <param name="address">IP address</param>
        </member>
        <member name="M:AIO.Net.UdpClient.OnReceived(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle datagram received notification
            </summary>
            <param name="endpoint">Received endpoint</param>
            <param name="buffer">Received datagram buffer</param>
            <param name="offset">Received datagram buffer offset</param>
            <param name="size">Received datagram buffer size</param>
            <remarks>
            Notification is called when another datagram was received from some endpoint
            </remarks>
        </member>
        <member name="M:AIO.Net.UdpClient.OnSent(System.Net.EndPoint,System.Int32)">
            <summary>
            Handle datagram sent notification
            </summary>
            <param name="endpoint">Endpoint of sent datagram</param>
            <param name="sent">Size of sent datagram buffer</param>
            <remarks>
            Notification is called when a datagram was sent to the server.
            This handler could be used to send another datagram to the server for instance when the pending size is zero.
            </remarks>
        </member>
        <member name="M:AIO.Net.UdpClient.SendError(System.Net.Sockets.SocketError)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.#ctor(System.Net.EndPoint,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.#ctor(System.Net.IPAddress,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.#ctor(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.#ctor(System.Net.DnsEndPoint)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.#ctor(System.Net.IPEndPoint)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.Receive(System.Net.EndPoint@,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.TryReceive">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.TrySend">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.Send(System.Net.EndPoint,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpClient.SendAsync(System.Net.EndPoint,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:AIO.Net.UdpSettingClient">
            <summary>
            TCP client setting 
            </summary>
        </member>
        <member name="P:AIO.Net.UdpSettingClient.ReuseAddress">
            <summary>
            Option: reuse address
            </summary>
            <remarks>
            This option will enable/disable SO_REUSEADDR if the OS support this feature
            </remarks>
        </member>
        <member name="P:AIO.Net.UdpSettingClient.ExclusiveAddressUse">
            <summary>
            Option: enables a socket to be bound for exclusive access
            </summary>
            <remarks>
            This option will enable/disable SO_EXCLUSIVENESS if the OS support this feature
            </remarks>
        </member>
        <member name="P:AIO.Net.UdpSettingClient.Multicast">
            <summary>
            Option: bind the socket to the multicast UDP server
            </summary>
        </member>
        <member name="P:AIO.Net.UdpSettingClient.ReceiveBufferLimit">
            <summary>
            Option: receive buffer limit
            </summary>
        </member>
        <member name="P:AIO.Net.UdpSettingClient.SendBufferLimit">
            <summary>
            Option: send buffer limit
            </summary>
        </member>
        <member name="T:AIO.Net.UdpServer">
            <summary>
            UDP server is used to send or multicast datagrams to UDP endpoints
            </summary>
            <remarks>Thread-safe</remarks>
        </member>
        <member name="M:AIO.Net.UdpServer.#ctor(System.Net.IPAddress,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpServer.#ctor(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpServer.#ctor(System.Net.DnsEndPoint)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpServer.#ctor(System.Net.IPEndPoint)">
            <inheritdoc />
        </member>
        <member name="P:AIO.Net.UdpServer.MulticastEndpoint">
            <summary>
            Multicast endpoint
            </summary>
        </member>
        <member name="P:AIO.Net.UdpServer.Socket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="P:AIO.Net.UdpServer.BytesPending">
            <summary>
            Number of bytes pending sent by the server
            </summary>
        </member>
        <member name="P:AIO.Net.UdpServer.BytesSending">
            <summary>
            Number of bytes sending by the server
            </summary>
        </member>
        <member name="P:AIO.Net.UdpServer.BytesSent">
            <summary>
            Number of bytes sent by the server
            </summary>
        </member>
        <member name="P:AIO.Net.UdpServer.BytesReceived">
            <summary>
            Number of bytes received by the server
            </summary>
        </member>
        <member name="P:AIO.Net.UdpServer.DatagramsSent">
            <summary>
            Number of datagrams sent by the server
            </summary>
        </member>
        <member name="P:AIO.Net.UdpServer.DatagramsReceived">
            <summary>
            Number of datagrams received by the server
            </summary>
        </member>
        <member name="P:AIO.Net.UdpServer.Option">
            <summary>
            Server option
            </summary>
        </member>
        <member name="M:AIO.Net.UdpServer.CreateSocket">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpServer.Start">
            <summary>
            Start the server (synchronous)
            </summary>
            <returns>'true' if the server was successfully started, 'false' if the server failed to start</returns>
        </member>
        <member name="M:AIO.Net.UdpServer.Stop">
            <summary>
            Stop the server (synchronous)
            </summary>
            <returns>'true' if the server was successfully stopped, 'false' if the server is already stopped</returns>
        </member>
        <member name="M:AIO.Net.UdpServer.Start(System.Net.IPAddress,System.Int32)">
            <summary>
            Start the server with a given multicast IP address and port number (synchronous)
            </summary>
            <param name="multicastAddress">Multicast IP address</param>
            <param name="multicastPort">Multicast port number</param>
            <returns>'true' if the server was successfully started, 'false' if the server failed to start</returns>
        </member>
        <member name="M:AIO.Net.UdpServer.Start(System.String,System.Int32)">
            <summary>
            Start the server with a given multicast IP address and port number (synchronous)
            </summary>
            <param name="multicastAddress">Multicast IP address</param>
            <param name="multicastPort">Multicast port number</param>
            <returns>'true' if the server was successfully started, 'false' if the server failed to start</returns>
        </member>
        <member name="M:AIO.Net.UdpServer.Start(System.Net.EndPoint)">
            <summary>
            Start the server with a given multicast endpoint (synchronous)
            </summary>
            <param name="multicastEndpoint">Multicast endpoint</param>
            <returns>'true' if the server was successfully started, 'false' if the server failed to start</returns>
        </member>
        <member name="M:AIO.Net.UdpServer.ClearBuffers">
            <summary>
            Clear send/receive buffers
            </summary>
        </member>
        <member name="M:AIO.Net.UdpServer.OnAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is called whenever a receive or send operation is completed on a socket
            </summary>
        </member>
        <member name="M:AIO.Net.UdpServer.ProcessReceiveFrom(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is invoked when an asynchronous receive from operation completes
            </summary>
        </member>
        <member name="M:AIO.Net.UdpServer.ReceiveAsync">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpServer.Receive(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpServer.MulticastAsync(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpServer.Multicast(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpServer.ProcessSendTo(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is invoked when an asynchronous send to operation completes
            </summary>
        </member>
        <member name="M:AIO.Net.UdpServer.SendAsync(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpServer.Send(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AIO.Net.UdpServer.TrySend">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIO.Net.UdpSettingServer">
            <summary>
            TCP server setting 
            </summary>
        </member>
        <member name="P:AIO.Net.UdpSettingServer.ReuseAddress">
            <summary>
            option: reuse address
            </summary>
            <remarks>
            This option will enable/disable SO_REUSEADDR if the OS support this feature
            </remarks>
        </member>
        <member name="P:AIO.Net.UdpSettingServer.ExclusiveAddressUse">
            <summary>
            option: enables a socket to be bound for exclusive access
            </summary>
            <remarks>
            This option will enable/disable SO_EXCLUSIVEADDRUSE if the OS support this feature
            </remarks>
        </member>
        <member name="P:AIO.Net.UdpSettingServer.ReceiveBufferLimit">
            <summary>
            option: receive buffer limit
            </summary>
        </member>
        <member name="P:AIO.Net.UdpSettingServer.SendBufferLimit">
            <summary>
            option: send buffer limit
            </summary>
        </member>
        <member name="T:AIO.LockDisposable">
            <summary>
            Disposable lock class performs exit action on dispose operation.
            </summary>
        </member>
        <member name="M:AIO.LockDisposable.#ctor(System.Action)">
            <summary>
            构造函数
            </summary>
            <param name="exitLock">退出锁定函数</param>
        </member>
        <member name="M:AIO.LockDisposable.Dispose">
            <inheritdoc />
        </member>
        <member name="T:AIO.LockRead">
            <summary>
            Read lock class enters read lock on construction and performs exit read lock on dispose.
            </summary>
        </member>
        <member name="M:AIO.LockRead.#ctor(System.Threading.ReaderWriterLockSlim)">
            <inheritdoc />
        </member>
        <member name="T:AIO.LockWrite">
            <summary>
            Write lock class enters write lock on construction and performs exit write lock on dispose.
            </summary>
        </member>
        <member name="M:AIO.LockWrite.#ctor(System.Threading.ReaderWriterLockSlim)">
            <inheritdoc />
        </member>
        <member name="T:AIO.ReaderWriterLockSlimExtend">
            <summary>
            扩展
            </summary>
        </member>
        <member name="M:AIO.ReaderWriterLockSlimExtend.LockWrite(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Write lock class enters write lock on construction and performs exit write lock on dispose.
            </summary>
        </member>
        <member name="M:AIO.ReaderWriterLockSlimExtend.LockRead(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Read lock class enters read lock on construction and performs exit read lock on dispose.
            </summary>
        </member>
        <member name="T:AIO.ILoad">
            <summary>
            加载文件等等
            </summary>
        </member>
        <member name="M:AIO.ILoad.Load">
            <summary>
            加载
            </summary>
        </member>
        <member name="T:AIO.ISave">
            <summary>
            保存文件
            </summary>
        </member>
        <member name="M:AIO.ISave.Save">
            <summary>
            保存文件
            </summary>
        </member>
        <member name="T:AIO.IReadBool">
            <summary>
            读取Bool
            </summary>
        </member>
        <member name="M:AIO.IReadBool.ReadBool">
            <summary>
            读取 Bool 数据类型
            </summary>
        </member>
        <member name="M:AIO.IReadBool.ReadBoolArray(System.Boolean)">
            <summary>
            读取 Bool数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>Bool数组</returns>
        </member>
        <member name="T:AIO.IReadByte">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadByte.ReadByte">
            <summary>
            读取 Byte 数据类型
            </summary>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadByte.ReadByteArray(System.Boolean)">
            <summary>
            读取 Byte 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadChar">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadChar.ReadChar(System.Boolean)">
            <summary>
            读取 Char 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadChar.ReadCharArray(System.Boolean)">
            <summary>
            读取 Char 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadData">
            <summary>
            数据读取接口
            </summary>
        </member>
        <member name="P:AIO.IReadData.Count">
            <summary>
            可读数据长度
            </summary>
        </member>
        <member name="M:AIO.IReadData.ReadData``1">
            <summary>
            读取数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>值</returns>
        </member>
        <member name="M:AIO.IReadData.ReadDataArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            读取数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>值</returns>
        </member>
        <member name="M:AIO.IReadData.CheckSize(System.Int32)">
            <summary>
            检查是否有指定数据长度
            </summary>
            <param name="count">长度</param>
            <returns>Ture:满足 False:不满足</returns>
        </member>
        <member name="M:AIO.IReadData.Skip(System.Int32)">
            <summary>
            跳过读取指定长度
            </summary>
            <param name="count">长度</param>
        </member>
        <member name="T:AIO.IReadDecimal">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadDecimal.ReadDecimal(System.Boolean)">
            <summary>
            读取 Decimal 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadDecimal.ReadDecimalArray(System.Boolean)">
            <summary>
            读取 Decimal 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadDouble">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadDouble.ReadDouble(System.Boolean,System.Boolean)">
            <summary>
            读取 Double 数据类型
            </summary>
            <param name="all">全部</param>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadDouble.ReadDoubleArray(System.Boolean,System.Boolean)">
            <summary>
            读取 Double 数组 数据类型
            </summary>
            <param name="all">全部</param>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadEnum">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadEnum.ReadEnum``1">
            <summary>
            读取 枚举 数据类型
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>枚举值</returns>
        </member>
        <member name="M:AIO.IReadEnum.ReadEnumArray``1">
            <summary>
            读取 枚举数组 数据类型
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns>枚举值数组</returns>
        </member>
        <member name="T:AIO.IReadFloat">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadFloat.ReadFloatArray(System.Boolean,System.Boolean)">
            <summary>
            读取 Float 数组 数据类型
            </summary>
            <param name="all"></param>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadFloat.ReadFloat(System.Boolean,System.Boolean)">
            <summary>
            读取 Float 数据类型
            </summary>
            <param name="all">全部</param>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadICollection">
            <summary>
            读取字典
            </summary>
        </member>
        <member name="M:AIO.IReadICollection.ReadCollection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            读取字典
            </summary>
        </member>
        <member name="T:AIO.IReadIDictionary">
            <summary>
            读取字典
            </summary>
        </member>
        <member name="M:AIO.IReadIDictionary.ReadDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            读取字典
            </summary>
        </member>
        <member name="T:AIO.IReadIList">
            <summary>
            读取字典
            </summary>
        </member>
        <member name="M:AIO.IReadIList.ReadList``1(System.Collections.Generic.IList{``0})">
            <summary>
            读取字典
            </summary>
        </member>
        <member name="T:AIO.IReadInt16">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadInt16.ReadInt16(System.Boolean)">
            <summary>
            读取 Int16 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadInt16.ReadInt16Array(System.Boolean)">
            <summary>
            读取 Int16 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadInt32">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadInt32.ReadInt32(System.Boolean)">
            <summary>
            读取 Int32 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadInt32.ReadInt32Array(System.Boolean)">
            <summary>
            读取 Int32 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadInt64">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadInt64.ReadInt64(System.Boolean)">
            <summary>
            读取 Int64 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadInt64.ReadInt64Array(System.Boolean)">
            <summary>
            读取 Int64 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadJson">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadJson.ReadJson``1(System.Text.Encoding,System.Boolean)">
            <summary>
            读取Json数据
            </summary>
            <param name="encoding">字符串编码</param>
            <param name="reverse">反转</param>
            <typeparam name="T">数据泛型</typeparam>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadJson.ReadJsonUTF8``1(System.Boolean)">
            <summary>
            读取Json数据
            </summary>
            <param name="reverse">反转</param>
            <typeparam name="T">数据泛型</typeparam>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadJson.ReadJsonASCII``1(System.Boolean)">
            <summary>
            读取Json数据
            </summary>
            <param name="reverse">反转</param>
            <typeparam name="T">数据泛型</typeparam>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadJson.ReadJsonUnicode``1(System.Boolean)">
            <summary>
            读取Json数据
            </summary>
            <param name="reverse">反转</param>
            <typeparam name="T">数据泛型</typeparam>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadLength">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadLength.ReadLen">
            <summary>
            读取一个长度 0至512M
            </summary>
            原理 : 以第一个字节二进制前三位来决定长度值占用的字节数(x表示0或1)
            1xx 开头:长度值占1个字节,且值只能是剩下的 07=(08-1) 位能表示的范围,即:0~(2^07-1)=0~127
            01x 开头:长度值占2个字节,且值只能是剩下的 14=(16-2) 位能表示的范围,即:0~(2^14-1)=0~163,83
            001 开头:长度值占4个字节,且值只能是剩下的 29=(32-3) 位能表示的范围,即:0~(2^29-1)=0~536,870,91
        </member>
        <member name="M:AIO.IReadLength.ReadLenArray">
            <summary>
            读取一个长度数组
            </summary>
            <returns>返回数组</returns>
        </member>
        <member name="T:AIO.IReadSByte">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadSByte.ReadSByte">
            <summary>
            读取 SByte 数据类型
            </summary>
            <returns>返回数组</returns>
        </member>
        <member name="M:AIO.IReadSByte.ReadSByteArray(System.Boolean)">
            <summary>
            读取 Sbyte 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>返回数组</returns>
        </member>
        <member name="T:AIO.IReadString">
            <summary>
            读取 数据 String
            </summary>
        </member>
        <member name="M:AIO.IReadString.ReadStringUTF8(System.Boolean)">
            <summary>
            读取字符串
            </summary>
            <param name="reverse">是否反转</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AIO.IReadString.ReadStringASCII(System.Boolean)">
            <summary>
            读取字符串
            </summary>
            <param name="reverse">是否反转</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AIO.IReadString.ReadStringUnicode(System.Boolean)">
            <summary>
            读取字符串
            </summary>
            <param name="reverse">是否反转</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AIO.IReadString.ReadString(System.Text.Encoding,System.Boolean)">
            <summary>
            读取字符串
            </summary>
            <param name="encoding">编码</param>
            <param name="reverse">是否反转</param>
            <returns>字符串</returns>
        </member>
        <member name="T:AIO.IReadUInt16">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadUInt16.ReadUInt16(System.Boolean)">
            <summary>
            读取 UInt16 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadUInt16.ReadUInt16Array(System.Boolean)">
            <summary>
            读取 UInt16 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadUInt32">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadUInt32.ReadUInt32(System.Boolean)">
            <summary>
            读取 UInt32 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadUInt32.ReadUInt32Array(System.Boolean)">
            <summary>
            读取 UInt32 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadUInt64">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadUInt64.ReadUInt64(System.Boolean)">
            <summary>
            读取 UInt64 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadUInt64.ReadUInt64Array(System.Boolean)">
            <summary>
            读取 UInt64 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IBinData">
            <summary>
            数据序列化
            </summary>
        </member>
        <member name="T:AIO.IBinDeserialize">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.IBinDeserialize.Deserialize(AIO.IReadData)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="T:AIO.IBinSerialize">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.IBinSerialize.Serialize(AIO.IWriteData)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:AIO.IBinStorage">
            <summary>
            二进制数据存储
            </summary>
        </member>
        <member name="P:AIO.IBinStorage.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:AIO.IDeserialize">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.IDeserialize.Deserialize">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="T:AIO.IReset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:AIO.IReset.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="T:AIO.ISerialize">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.ISerialize.Serialize">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:AIO.IWriteBool">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteBool.WriteBool(System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteBool.WriteBoolArray(System.Collections.Generic.ICollection{System.Boolean},System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="T:AIO.IWriteByte">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteByte.WriteByte(System.Byte)">
            <summary>
            写入指定数据类型
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AIO.IWriteByte.WriteByteArray(System.Collections.Generic.ICollection{System.Byte},System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="T:AIO.IWriteChar">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteChar.WriteChar(System.Char,System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteChar.WriteCharArray(System.Collections.Generic.ICollection{System.Char},System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteData">
            <summary>
            写入数据
            </summary>
        </member>
        <member name="M:AIO.IWriteData.WriteData``1(``0)">
            <summary>
            写入二进制数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:AIO.IWriteData.WriteDataArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            读取数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>值</returns>
        </member>
        <member name="T:AIO.IWriteDecimal">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteDecimal.WriteDecimal(System.Decimal,System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteDecimal.WriteDecimalArray(System.Collections.Generic.ICollection{System.Decimal},System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteDouble">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteDouble.WriteDouble(System.Double,System.Boolean,System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteDouble.WriteDoubleArray(System.Collections.Generic.ICollection{System.Double},System.Boolean,System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteEnum">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteEnum.WriteEnum``1(``0)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteEnum.WriteEnumArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteFloat">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteFloat.WriteFloat(System.Single,System.Boolean,System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteFloat.WriteFloatArray(System.Collections.Generic.ICollection{System.Single},System.Boolean,System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteICollection">
            <summary>
            写入字典
            </summary>
        </member>
        <member name="M:AIO.IWriteICollection.WriteCollection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            写入字典
            </summary>
        </member>
        <member name="T:AIO.IWriteIDictionary">
            <summary>
            写入字典
            </summary>
        </member>
        <member name="M:AIO.IWriteIDictionary.WriteDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            写入字典
            </summary>
        </member>
        <member name="T:AIO.IWriteIList">
            <summary>
            写入字典
            </summary>
        </member>
        <member name="M:AIO.IWriteIList.WriteList``1(System.Collections.Generic.IList{``0})">
            <summary>
            写入字典
            </summary>
        </member>
        <member name="T:AIO.IWriteInt16">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteInt16.WriteInt16(System.Int16,System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteInt16.WriteInt16Array(System.Collections.Generic.ICollection{System.Int16},System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteInt32">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteInt32.WriteInt32(System.Int32,System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteInt32.WriteInt32Array(System.Collections.Generic.ICollection{System.Int32},System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteInt64">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteInt64.WriteInt64(System.Int64,System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteInt64.WriteInt64Array(System.Collections.Generic.ICollection{System.Int64},System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteJson">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteJson.WriteJson``1(``0,System.Text.Encoding,System.Boolean)">
            <summary>
            写入Json数据
            </summary>
            <param name="value">输入源</param>
            <param name="encoding">编码</param>
            <param name="reverse">反转</param>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:AIO.IWriteJson.WriteJsonUTF8``1(``0,System.Boolean)">
            <summary>
            写入Json数据
            </summary>
            <param name="value">输入源</param>
            <param name="reverse">反转</param>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:AIO.IWriteJson.WriteJsonASCII``1(``0,System.Boolean)">
            <summary>
            写入Json数据
            </summary>
            <param name="value">输入源</param>
            <param name="reverse">反转</param>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:AIO.IWriteJson.WriteJsonUnicode``1(``0,System.Boolean)">
            <summary>
            写入Json数据
            </summary>
            <param name="value">输入源</param>
            <param name="reverse">反转</param>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="T:AIO.IWriteLength">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteLength.WriteLen(System.Byte)">
            <summary> 写入一个长度, 0至512M </summary>
            原理: 以第一个字节二进制前三位来决定长度值占用的字节数(x表示0或1)
            1xx 开头:长度值占1个字节,且值只能是剩下的 07=(08-1) 位能表示的范围,即:0~(2^07-1)=0~127
            01x 开头:长度值占2个字节,且值只能是剩下的 14=(16-2) 位能表示的范围,即:0~(2^14-1)=0~163,83
            001 开头:长度值占4个字节,且值只能是剩下的 29=(32-3) 位能表示的范围,即:0~(2^29-1)=0~536,870,91
        </member>
        <member name="M:AIO.IWriteLength.WriteLen(System.SByte)">
            <summary> 写入一个长度, 0至512M </summary>
            原理: 以第一个字节二进制前三位来决定长度值占用的字节数(x表示0或1)
            1xx 开头:长度值占1个字节,且值只能是剩下的 07=(08-1) 位能表示的范围,即:0~(2^07-1)=0~127
            01x 开头:长度值占2个字节,且值只能是剩下的 14=(16-2) 位能表示的范围,即:0~(2^14-1)=0~163,83
            001 开头:长度值占4个字节,且值只能是剩下的 29=(32-3) 位能表示的范围,即:0~(2^29-1)=0~536,870,91
        </member>
        <member name="M:AIO.IWriteLength.WriteLen(System.UInt16)">
            <summary> 写入一个长度, 0至512M </summary>
            原理: 以第一个字节二进制前三位来决定长度值占用的字节数(x表示0或1)
            1xx 开头:长度值占1个字节,且值只能是剩下的 07=(08-1) 位能表示的范围,即:0~(2^07-1)=0~127
            01x 开头:长度值占2个字节,且值只能是剩下的 14=(16-2) 位能表示的范围,即:0~(2^14-1)=0~163,83
            001 开头:长度值占4个字节,且值只能是剩下的 29=(32-3) 位能表示的范围,即:0~(2^29-1)=0~536,870,91
        </member>
        <member name="M:AIO.IWriteLength.WriteLen(System.Int16)">
            <summary> 写入一个长度, 0至512M </summary>
            原理: 以第一个字节二进制前三位来决定长度值占用的字节数(x表示0或1)
            1xx 开头:长度值占1个字节,且值只能是剩下的 07=(08-1) 位能表示的范围,即:0~(2^07-1)=0~127
            01x 开头:长度值占2个字节,且值只能是剩下的 14=(16-2) 位能表示的范围,即:0~(2^14-1)=0~163,83
            001 开头:长度值占4个字节,且值只能是剩下的 29=(32-3) 位能表示的范围,即:0~(2^29-1)=0~536,870,91
        </member>
        <member name="M:AIO.IWriteLength.WriteLen(System.Int32)">
            <summary> 写入一个长度, 0至512M </summary>
            原理: 以第一个字节二进制前三位来决定长度值占用的字节数(x表示0或1)
            1xx 开头:长度值占1个字节,且值只能是剩下的 07=(08-1) 位能表示的范围,即:0~(2^07-1)=0~127
            01x 开头:长度值占2个字节,且值只能是剩下的 14=(16-2) 位能表示的范围,即:0~(2^14-1)=0~163,83
            001 开头:长度值占4个字节,且值只能是剩下的 29=(32-3) 位能表示的范围,即:0~(2^29-1)=0~536,870,91
        </member>
        <member name="M:AIO.IWriteLength.WriteLenArray(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            写入Sbyte数组
            </summary>
            <param name="value">输入源</param>
        </member>
        <member name="T:AIO.IWriteSByte">
            <summary>
            写入数据 SByte Array
            </summary>
        </member>
        <member name="M:AIO.IWriteSByte.WriteSByte(System.SByte)">
            <summary>
            写入Sbyte数组
            </summary>
            <param name="value">输入源</param>
        </member>
        <member name="M:AIO.IWriteSByte.WriteSByteArray(System.Collections.Generic.ICollection{System.SByte},System.Boolean)">
            <summary>
            写入Sbyte数组
            </summary>
            <param name="value">输入源</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="T:AIO.IWriteString">
            <summary>
            写入数据 String
            </summary>
        </member>
        <member name="M:AIO.IWriteString.WriteString(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="encoding">编码</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteString(System.Text.StringBuilder,System.Text.Encoding,System.Boolean)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="encoding">编码</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteStringUTF8(System.String,System.Boolean)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteStringUTF8(System.Text.StringBuilder,System.Boolean)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteStringASCII(System.String,System.Boolean)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteStringASCII(System.Text.StringBuilder,System.Boolean)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteStringUnicode(System.String,System.Boolean)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteStringUnicode(System.Text.StringBuilder,System.Boolean)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="T:AIO.IWriteUInt16">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteUInt16.WriteUInt16(System.UInt16,System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteUInt16.WriteUInt16Array(System.Collections.Generic.ICollection{System.UInt16},System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteUInt32">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteUInt32.WriteUInt32(System.UInt32,System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteUInt32.WriteUInt32Array(System.Collections.Generic.ICollection{System.UInt32},System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteUInt64">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteUInt64.WriteUInt64(System.UInt64,System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteUInt64.WriteUInt64Array(System.Collections.Generic.ICollection{System.UInt64},System.Boolean)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.DisplayList`1">
            <summary>
            显示列表
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="P:AIO.DisplayList`1.Keys">
            <summary>
            键值
            </summary>
        </member>
        <member name="P:AIO.DisplayList`1.Displays">
            <summary>
            显示
            </summary>
        </member>
        <member name="P:AIO.DisplayList`1.Values">
            <summary>
            值
            </summary>
        </member>
        <member name="P:AIO.DisplayList`1.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:AIO.DisplayList`1.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:AIO.DisplayList`1.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:AIO.DisplayList`1.CurrentPageValues">
            <summary>
            当前页内容
            </summary>
        </member>
        <member name="M:AIO.DisplayList`1.GetPage(System.Int32)">
            <summary>
            获取页内容
            </summary>
        </member>
        <member name="M:AIO.DisplayList`1.Remove(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            移除
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:AIO.DisplayList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:AIO.DisplayList`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:AIO.DisplayList`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.DisplayList`1.Add(System.String,System.String,`0)">
            <summary>
            添加
            </summary>
            <param name="key">键值</param>
            <param name="display">显示值</param>
            <param name="value">值</param>
        </member>
        <member name="M:AIO.DisplayList`1.ContainsKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AIO.DisplayList`1.Add(System.String,`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.DisplayList`1.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key">键值</param>
            <returns>Ture:成功 False:失败</returns>
        </member>
        <member name="M:AIO.DisplayList`1.TryGetValue(System.String,`0@)">
            <inheritdoc />
        </member>
        <member name="P:AIO.DisplayList`1.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AIO.DisplayList`1.RemoveAt(System.Int32)">
            <summary>
            移除
            </summary>
            <param name="index">指定下标</param>
            <returns>Ture:成功 False:失败</returns>
        </member>
        <member name="M:AIO.DisplayList`1.GetValue(System.String)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:AIO.DisplayList`1.GetValue(System.Int32)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:AIO.DisplayList`1.GetDisplay(System.String)">
            <summary>
            获取显示值
            </summary>
        </member>
        <member name="M:AIO.DisplayList`1.Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <inheritdoc />
        </member>
        <member name="M:AIO.DisplayList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.DisplayList`1.Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <inheritdoc />
        </member>
        <member name="M:AIO.DisplayList`1.CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.DisplayList`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.DisplayList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AIO.PageDictionary`2">
            <summary>
            分页字典
            </summary>
        </member>
        <member name="P:AIO.PageDictionary`2.Keys">
            <summary>
            键值
            </summary>
        </member>
        <member name="P:AIO.PageDictionary`2.Values">
            <summary>
            值
            </summary>
        </member>
        <member name="P:AIO.PageDictionary`2.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:AIO.PageDictionary`2.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:AIO.PageDictionary`2.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:AIO.PageDictionary`2.CurrentPageCount">
            <summary>
            当前页内容数量
            </summary>
        </member>
        <member name="P:AIO.PageDictionary`2.CurrentPageValues">
            <summary>
            当前页内容
            </summary>
        </member>
        <member name="P:AIO.PageDictionary`2.CurrentPageKeys">
            <summary>
            当前页键值
            </summary>
        </member>
        <member name="P:AIO.PageDictionary`2.CurrentPage">
            <summary>
            当前页内容
            </summary>
        </member>
        <member name="F:AIO.PageDictionary`2._CurrentPageValues">
            <summary>
            当前页内容
            </summary>
        </member>
        <member name="F:AIO.PageDictionary`2._CurrentPageKeys">
            <summary>
            当前页键值
            </summary>
        </member>
        <member name="F:AIO.PageDictionary`2._CurrentPage">
            <summary>
            当前页内容
            </summary>
        </member>
        <member name="M:AIO.PageDictionary`2.GetPage(System.Int32)">
            <summary>
            获取页内容
            </summary>
        </member>
        <member name="M:AIO.PageDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            移除
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:AIO.PageDictionary`2.Count">
            <inheritdoc />
        </member>
        <member name="P:AIO.PageDictionary`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:AIO.PageDictionary`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.PageDictionary`2.Add(`0,`1)">
            <summary>
            添加
            </summary>
            <param name="key">键值</param>
            <param name="value">值</param>
        </member>
        <member name="M:AIO.PageDictionary`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PageDictionary`2.Remove(`0)">
            <summary>
            移除
            </summary>
            <param name="key">键值</param>
            <returns>Ture:成功 False:失败</returns>
        </member>
        <member name="M:AIO.PageDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="P:AIO.PageDictionary`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PageDictionary`2.RemoveAt(System.Int32)">
            <summary>
            移除
            </summary>
            <param name="index">指定下标</param>
            <returns>Ture:成功 False:失败</returns>
        </member>
        <member name="M:AIO.PageDictionary`2.GetValue(`0)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:AIO.PageDictionary`2.GetValue(System.Int32)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:AIO.PageDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.PageDictionary`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.PageDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.PageDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PageDictionary`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.PageDictionary`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AIO.GBean">
            <summary>
            游戏数据
            </summary>
        </member>
        <member name="M:AIO.GBean.Deserialize(AIO.IReadData)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.GBean.Serialize(AIO.IWriteData)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.GBean.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:AIO.GBean.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AIO.GBean.Frist">
            <summary>
            首次数据存放
            </summary>
        </member>
        <member name="M:AIO.GBean.Clean">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AIO.GBean.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="T:AIO.GBeanRegisterAttribute">
            <summary>
            游戏数据注册
            </summary>
        </member>
        <member name="P:AIO.GBeanRegisterAttribute.ID">
            <summary>
            唯一ID
            </summary>
        </member>
        <member name="M:AIO.GBeanRegisterAttribute.#ctor(System.Int32)">
            <summary>
            游戏数据注册
            </summary>
            <param name="id">唯一ID</param>
        </member>
        <member name="T:AIO.GBeanSystem">
            <summary>
            游戏数据储存管理
            </summary>
        </member>
        <member name="F:AIO.GBeanSystem.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:AIO.GBeanSystem.Bean">
            <summary>
            源数据
            </summary>
        </member>
        <member name="P:AIO.GBeanSystem.Progress">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="F:AIO.GBeanSystem.TargetPath">
            <summary>
            目标存储读取路径
            </summary>
        </member>
        <member name="M:AIO.GBeanSystem.GetMD5(System.Byte[]@)">
            <summary>
            获取二进制MD5码
            </summary>
        </member>
        <member name="M:AIO.GBeanSystem.Initialize(System.String@)">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="M:AIO.GBeanSystem.Load">
            <summary>
            加载数据
            </summary>
        </member>
        <member name="M:AIO.GBeanSystem.Save">
            <summary>
            保存数据
            </summary>
        </member>
        <member name="M:AIO.GBeanSystem.Clean">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AIO.GBeanSystem.Reset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="T:AIO.Buffer">
            <summary>
            数据缓存留
            </summary>
        </member>
        <member name="F:AIO.Buffer.CAPACITY">
            <summary>
            默认容量:32B = 256bit
            </summary>
        </member>
        <member name="F:AIO.Buffer.MAX_CAPACITY">
            <summary>
            最大缓存:4M
            </summary>
        </member>
        <member name="F:AIO.Buffer.WriteIndex">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="F:AIO.Buffer.ReadIndex">
            <summary>
            当前读取位置
            </summary>
        </member>
        <member name="M:AIO.Buffer.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AIO.Buffer.Clear">
            <summary> 
            清空
            </summary>
        </member>
        <member name="P:AIO.Buffer.WriteOffset">
            <summary>
            缓存写入进度: 当前首位
            </summary>
        </member>
        <member name="P:AIO.Buffer.ReadOffset">
            <summary>
            缓存写入进度: 当前读取游标下标
            </summary>
        </member>
        <member name="P:AIO.Buffer.Count">
            <summary> 
            返回数据可读取长度
            </summary>
        </member>
        <member name="P:AIO.Buffer.Capacity">
            <summary> 
            数据缓存:容量
            </summary>
        </member>
        <member name="M:AIO.Buffer.Skip(System.Int32)">
            <summary>
            跳过
            </summary>
        </member>
        <member name="M:AIO.Buffer.CheckSize(System.Int32)">
            <summary>
            检查剩余数量 
            Flase:不满足
            Ture:满足
            </summary>
        </member>
        <member name="T:AIO.Buffer`1">
            <summary>
            缓冲流
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Addition(AIO.Buffer{`0},AIO.Buffer{`0}@)">
            <summary>
            增加
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Addition(AIO.Buffer{`0},`0[]@)">
            <summary>
            增加
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Addition(AIO.Buffer{`0},System.Collections.Generic.HashSet{`0}@)">
            <summary>
            增加
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Addition(AIO.Buffer{`0},System.Collections.Generic.ICollection{`0}@)">
            <summary>
            增加
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Implicit(AIO.Buffer{`0}@)~`0[]">
            <summary>
            隐式转化为数组
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Implicit(AIO.Buffer{`0}@)~System.Collections.Generic.HashSet{`0}">
            <summary>
            隐式转化为数组
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Implicit(AIO.Buffer{`0}@)~System.Collections.Generic.List{`0}">
            <summary>
            隐式转化为List
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.#ctor(System.Int32)">
            <summary>
            构建一个指定容量的Buffer
            </summary>
        </member>
        <member name="P:AIO.Buffer`1.Arrays">
            <summary>
            数据缓存
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            构建一个指定数据的ByteBuffer
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.Reserve">
            <summary>
            自动扩容一杯
            </summary>
            <remarks>Reserve the buffer of the given capacity</remarks>
        </member>
        <member name="M:AIO.Buffer`1.Reserve(System.Int32)">
            <summary>
            自动扩容
            </summary>
            <remarks>Reserve the buffer of the given capacity</remarks>
        </member>
        <member name="P:AIO.Buffer`1.Capacity">
            <summary> 
            数据缓存:容量
            </summary>
        </member>
        <member name="P:AIO.Buffer`1.IsEmpty">
            <summary>
            Is the buffer empty?
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.ToArray">
            <summary> 
            获取有效字节数组
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.Write(AIO.Buffer{`0})">
            <summary> 
            将指定字节缓冲区数据写入当前缓存区
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.Write(System.Collections.Generic.ICollection{`0})">
            <summary> 
            将指定字节缓冲区数据写入当前缓存区
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.Write(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            写入byte数组(从position开始写入len个)
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.Write(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32)">
            <summary>
            写入byte数组(从position开始写入len个)
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Buffer`1.Equals(AIO.Buffer{`0},AIO.Buffer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Buffer`1.GetHashCode(AIO.Buffer{`0})">
            <inheritdoc/>
        </member>
        <member name="P:AIO.Buffer`1.IsReadOnly">
            <summary>
            是否为只读
            </summary>
        </member>
        <member name="P:AIO.Buffer`1.Item(System.Int32)">
            <summary>
            获取指定元素
            </summary>
            <param name="index">下标</param>
        </member>
        <member name="M:AIO.Buffer`1.IndexOf(`0)">
            <summary>
            判断元素所在下标
            </summary>
            <param name="item">元素</param>
            <returns>-1未找到指定下标</returns>
        </member>
        <member name="M:AIO.Buffer`1.Insert(System.Int32,`0)">
            <summary>
            在指定位置插入元素
            </summary>
            <param name="index">下标</param>
            <param name="item">元素</param>
            <exception cref="T:System.IndexOutOfRangeException">数组越界</exception>
        </member>
        <member name="M:AIO.Buffer`1.RemoveAt(System.Int32)">
            <summary>
            移除指定下标元素
            </summary>
            <param name="index">下标</param>
            <exception cref="T:System.IndexOutOfRangeException">数组越界</exception>
        </member>
        <member name="M:AIO.Buffer`1.Add(`0)">
            <summary>
            添加指定元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:AIO.Buffer`1.Contains(`0)">
            <summary>
            确定序列是否包含指定的元素使用的默认相等比较器。
            </summary>
            <param name="item">要在其中定位某个值的序列。</param>
            <returns>true 如果源序列包含具有指定的值; 的元素否则为 false。</returns>
        </member>
        <member name="M:AIO.Buffer`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制
            </summary>
            <param name="array">目标数组</param>
            <param name="arrayIndex">数组下标</param>
        </member>
        <member name="M:AIO.Buffer`1.Remove(`0)">
            <summary>
            移除指定元素
            </summary>
            <param name="item">元素</param>
            <returns>true 移除成功 false 集合不包含该元素</returns>
        </member>
        <member name="M:AIO.Buffer`1.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>返回指定元素</returns>
        </member>
        <member name="M:AIO.Buffer`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:AIO.BufferByte">
            <summary>
            字节缓存类
            </summary>
            提供 write, read, set, get 方法
            write  :  将写入字节缓存,改变写入进度
            read   :  从字节缓存中读取,改变读取进度
            set    :  需要传入索引,在字节缓存的指定索引处写入一个,不影响缓存读写进度
            get    :  需要传入索引,在字节缓存的指定索引处读取一个,不影响缓存读写进度
            method_:  为倒序写入 倒序读取
        </member>
        <member name="M:AIO.BufferByte.ReadBool">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadBoolArray(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteBool(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteBoolArray(System.Collections.Generic.ICollection{System.Boolean},System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadByte">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadByteArray(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteByte(System.Byte)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteByteArray(System.Collections.Generic.ICollection{System.Byte},System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadChar(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadCharArray(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteChar(System.Char,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteCharArray(System.Collections.Generic.ICollection{System.Char},System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:AIO.BufferByte.#ctor(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.BufferByte.#ctor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.BufferByte.Write(AIO.Buffer{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.Read(System.Int32,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="start">开始下标</param>
            <param name="count">长度</param>
            <returns>返回数组</returns>
        </member>
        <member name="M:AIO.BufferByte.Write(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.Write(System.Collections.Generic.ICollection{System.Byte},System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AIO.BufferByte.ReadData``1">
            <summary>
            读取数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>值</returns>
        </member>
        <member name="M:AIO.BufferByte.ReadDataArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            读取数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>值</returns>
        </member>
        <member name="M:AIO.BufferByte.WriteData``1(``0)">
            <summary>
            写入二进制数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:AIO.BufferByte.WriteDataArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            读取数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>值</returns>
        </member>
        <member name="M:AIO.BufferByte.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AIO.BufferByte.ReadDecimal(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadDecimalArray(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteDecimal(System.Decimal,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteDecimalArray(System.Collections.Generic.ICollection{System.Decimal},System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadDouble(System.Boolean,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadDoubleArray(System.Boolean,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteDouble(System.Double,System.Boolean,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteDoubleArray(System.Collections.Generic.ICollection{System.Double},System.Boolean,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadEnum``1">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadEnumArray``1">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteEnum``1(``0)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteEnumArray``1(System.Collections.Generic.ICollection{``0})">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadFloat(System.Boolean,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadFloatArray(System.Boolean,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteFloat(System.Single,System.Boolean,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteFloatArray(System.Collections.Generic.ICollection{System.Single},System.Boolean,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteCollection``1(System.Collections.Generic.ICollection{``0})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.ReadCollection``1(System.Collections.Generic.ICollection{``0})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.WriteDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.ReadDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.WriteList``1(System.Collections.Generic.IList{``0})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.ReadList``1(System.Collections.Generic.IList{``0})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.ReadInt16(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadInt16Array(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteInt16(System.Int16,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteInt16Array(System.Collections.Generic.ICollection{System.Int16},System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadInt32(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadInt32Array(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteInt32(System.Int32,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteInt32Array(System.Collections.Generic.ICollection{System.Int32},System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadInt64(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadInt64Array(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteInt64Array(System.Collections.Generic.ICollection{System.Int64},System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteInt64(System.Int64,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadJson``1(System.Text.Encoding,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadJsonUTF8``1(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadJsonASCII``1(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadJsonUnicode``1(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteJson``1(``0,System.Text.Encoding,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteJsonUTF8``1(``0,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteJsonASCII``1(``0,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteJsonUnicode``1(``0,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadLen">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadLenArray">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteLen(System.Int32)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteLen(System.UInt16)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteLen(System.Int16)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteLen(System.Byte)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteLen(System.SByte)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteLenArray(System.Collections.Generic.ICollection{System.Int32})">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadSByte">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadSByteArray(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteSByte(System.SByte)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteSByteArray(System.Collections.Generic.ICollection{System.SByte},System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadString(System.Text.Encoding,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadStringUTF8(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadStringASCII(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadStringUnicode(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteString(System.String,System.Text.Encoding,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteString(System.Text.StringBuilder,System.Text.Encoding,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteStringUTF8(System.String,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteStringUTF8(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteStringASCII(System.String,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteStringASCII(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteStringUnicode(System.String,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteStringUnicode(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadUInt16(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteUInt16(System.UInt16,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadUInt16Array(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteUInt16Array(System.Collections.Generic.ICollection{System.UInt16},System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadUInt32(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadUInt32Array(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteUInt32(System.UInt32,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteUInt32Array(System.Collections.Generic.ICollection{System.UInt32},System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadUInt64Array(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteUInt64Array(System.Collections.Generic.ICollection{System.UInt64},System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadUInt64(System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteUInt64(System.UInt64,System.Boolean)">
            <inheritdoc/> 
        </member>
        <member name="T:AIO.BufferRing`1">
            <summary>
            闭环数据流
            </summary>
            参考链接
            <see>
                <cref>https://ifeve.com/dissecting-disruptor-whats-so-special/</cref>
            </see>
        </member>
        <member name="F:AIO.BufferRing`1.FreedDic">
            <summary>
            存储队列 该队列专门存储数据作为对象池
            </summary>
        </member>
        <member name="F:AIO.BufferRing`1.UsedDic">
            <summary>
            读写队列 该队列专门处理数据读写
            </summary>
        </member>
        <member name="P:AIO.BufferRing`1.Capacity">
            <summary>
            容量
            </summary>
        </member>
        <member name="P:AIO.BufferRing`1.First">
            <summary>
            第一个读取的数组长度 队列最上面的数据数组
            </summary>
        </member>
        <member name="P:AIO.BufferRing`1.Last">
            <summary>
            最后读取的数组长度 队列最下面的数据数组
            </summary>
        </member>
        <member name="P:AIO.BufferRing`1.Count">
            <summary>
            当前可读取数据长度
            </summary>
        </member>
        <member name="P:AIO.BufferRing`1.WriteOffset">
            <summary>
            缓存写入进度: 当前首位
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.ToArray">
            <summary> 返回:有效字节数组 </summary>
        </member>
        <member name="M:AIO.BufferRing`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.AddLast">
            <summary>
            添加 读写数据数组 进入 读写队列
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.RemoveFirst">
            <summary>
            移除最上层的数据 添加进入到对象池
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.Read(`0[])">
            <summary>
            读取
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.Read(System.Int32)">
            <summary>
            读取
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.Read(`0[],System.Int32,System.Int32)">
            <summary>
            读取
            </summary>
            <param name="Buffer">字节数组</param>
            <param name="Offset">开始值 偏移量</param>
            <param name="count">读取长度</param>
            <returns>实际读取长度</returns>
        </member>
        <member name="M:AIO.BufferRing`1.Write(System.Collections.Generic.ICollection{`0})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferRing`1.Write(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferRing`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferRing`1.IsLastFull">
            <summary>
            判断Last数组是否满
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:AIO.RingBufferExtend">
            <summary>
            扩展
            </summary>
        </member>
        <member name="M:AIO.RingBufferExtend.Read(AIO.BufferRing{System.Byte},System.IO.Stream,System.Int32@)">
            <summary>
            读取数据流
            </summary>
        </member>
        <member name="M:AIO.RingBufferExtend.Write(AIO.BufferRing{System.Byte},System.IO.Stream)">
            <summary>
            写入数据
            </summary>
        </member>
        <member name="T:AIO.FileCache">
            <summary>
            File cache is used to cache files in memory with optional timeouts.
            FileSystemWatcher is used to monitor file system changes in cached
            directories.
            </summary>
            <remarks>Thread-safe.</remarks>
        </member>
        <member name="T:AIO.FileCache.InsertHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.FileCache.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIO.FileCache.Empty">
            <summary>
            Is the file cache empty?
            </summary>
        </member>
        <member name="P:AIO.FileCache.Size">
            <summary>
            Get the file cache size
            </summary>
        </member>
        <member name="M:AIO.FileCache.Add(System.String,System.Byte[],System.TimeSpan)">
            <summary>
            Add a new cache value with the given timeout into the file cache
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value to add</param>
            <param name="timeout">Cache timeout (default is 0 - no timeout)</param>
            <returns>'true' if the cache value was added, 'false' if the given key was not added</returns>
        </member>
        <member name="M:AIO.FileCache.Add``1(System.String,``0,System.TimeSpan)">
            <summary>
            Add a new cache value with the given timeout into the file cache
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value to add</param>
            <param name="timeout">Cache timeout (default is 0 - no timeout)</param>
            <returns>'true' if the cache value was added, 'false' if the given key was not added</returns>
        </member>
        <member name="M:AIO.FileCache.Get(System.String)">
            <summary>
            Try to find the cache value by the given key
            </summary>
            <param name="key">Key to find</param>
            <returns>'true' and cache value if the cache value was found, 'false' if the given key was not found</returns>
        </member>
        <member name="M:AIO.FileCache.Get``1(System.String)">
            <summary>
            Try to find the cache value by the given key
            </summary>
            <param name="key">Key to find</param>
            <returns>'true' and cache value if the cache value was found, 'false' if the given key was not found</returns>
        </member>
        <member name="M:AIO.FileCache.Remove(System.String)">
            <summary>
            Remove the cache value with the given key from the file cache
            </summary>
            <param name="key">Key to remove</param>
            <returns>'true' if the cache value was removed, 'false' if the given key was not found</returns>
        </member>
        <member name="M:AIO.FileCache.InsertPath(System.String,System.String,System.String,System.TimeSpan,AIO.FileCache.InsertHandler)">
            <summary>
            Insert a new cache path with the given timeout into the file cache
            </summary>
            <param name="path">Path to insert</param>
            <param name="prefix">Cache prefix (default is "/")</param>
            <param name="filter">Cache filter (default is "*.*")</param>
            <param name="timeout">Cache timeout (default is 0 - no timeout)</param>
            <param name="handler">Cache insert handler (default is 'return cache.Add(key, value, timeout)')</param>
            <returns>'true' if the cache path was setup, 'false' if failed to setup the cache path</returns>
        </member>
        <member name="M:AIO.FileCache.ContainPath(System.String)">
            <summary>
            Try to find the cache path
            </summary>
            <param name="path">Path to find</param>
            <returns>'true' if the cache path was found, 'false' if the given path was not found</returns>
        </member>
        <member name="M:AIO.FileCache.RemovePath(System.String)">
            <summary>
            Remove the cache path from the file cache
            </summary>
            <param name="path">Path to remove</param>
            <returns>'true' if the cache path was removed, 'false' if the given path was not found</returns>
        </member>
        <member name="M:AIO.FileCache.Clear">
            <summary>
            Clear the memory cache
            </summary>
        </member>
        <member name="M:AIO.FileCache.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.FileCache.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposingManagedResources"></param>
        </member>
        <member name="T:AIO.HashCode">
            <summary>
            HashCode is designed to quickly compute hash codes of arbitrary objects.
            </summary>
        </member>
        <member name="T:AIO.MailHandle">
            <summary>
            邮件处理
            </summary>
        </member>
        <member name="P:AIO.MailHandle.SmtpClient">
            <summary>
            Smtp客户端
            </summary>
        </member>
        <member name="P:AIO.MailHandle.MailMessage">
            <summary>
            邮件主体
            </summary>
        </member>
        <member name="P:AIO.MailHandle.Addresser">
            <summary>
            发件人
            </summary>
        </member>
        <member name="P:AIO.MailHandle.MailMessageIsBodyHtml">
            <summary>
            是否支持内容为HTML
            </summary>
        </member>
        <member name="P:AIO.MailHandle.MailMessagePriority">
            <summary>
            信息优先级
            </summary>
        </member>
        <member name="P:AIO.MailHandle.ClientHost">
            <summary>
            Host Example : smtp.exmail.qq.com
            </summary>
        </member>
        <member name="P:AIO.MailHandle.ClientEnableSsl">
            <summary>
            是否启用SSL
            </summary>
        </member>
        <member name="P:AIO.MailHandle.ClientPort">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:AIO.MailHandle.ClientCredentials">
            <summary>
            通行证
            </summary>
        </member>
        <member name="P:AIO.MailHandle.Subject">
            <summary>
            默认标题
            </summary>
        </member>
        <member name="M:AIO.MailHandle.AddCRecipients(System.Net.Mail.MailAddress[])">
            <summary>
            添加 抄送人
            </summary>
        </member>
        <member name="M:AIO.MailHandle.AddCRecipients(System.String[])">
            <summary>
            添加 抄送人
            </summary>
        </member>
        <member name="M:AIO.MailHandle.ClearCRecipients(System.Net.Mail.MailAddress[])">
            <summary>
            清空抄送人
            </summary>
        </member>
        <member name="M:AIO.MailHandle.RemoveCRecipients(System.Net.Mail.MailAddress[])">
            <summary>
            移除 抄送人
            </summary>
        </member>
        <member name="M:AIO.MailHandle.RemoveCRecipients(System.String[])">
            <summary>
            移除 抄送人
            </summary>
        </member>
        <member name="M:AIO.MailHandle.SendMail(System.Action)">
            <summary>
            发送邮件
            </summary>
        </member>
        <member name="M:AIO.MailHandle.Dispose">
            <inheritdoc />
        </member>
        <member name="T:AIO.MailMultipInfo">
            <summary>
            邮件 一对一 传入参数
            </summary>
        </member>
        <member name="F:AIO.MailMultipInfo.Form">
            <summary>
            发送者 地址
            </summary>
        </member>
        <member name="F:AIO.MailMultipInfo.FormPort">
            <summary>
            发送者 端口
            </summary>
        </member>
        <member name="F:AIO.MailMultipInfo.FormDisplayName">
            <summary>
            发送者  昵称  如果没有则用地址代替
            </summary>
        </member>
        <member name="F:AIO.MailMultipInfo.Passwrod">
            <summary>
            凭证授权码
            </summary>
        </member>
        <member name="F:AIO.MailMultipInfo.Encoding">
            <summary>
            编码格式
            </summary>
        </member>
        <member name="F:AIO.MailMultipInfo.ClientHost">
            <summary>
            连接服务器 地址 例子:"smtp.qq.com"
            </summary>
        </member>
        <member name="F:AIO.MailMultipInfo.ClientEnableSsl">
            <summary>
            连接服务器 SSL验证
            </summary>
        </member>
        <member name="F:AIO.MailMultipInfo.ClientTimeout">
            <summary>
            连接服务器 超时秒限制
            </summary>
        </member>
        <member name="F:AIO.MailMultipInfo.ClientDeliveryMethod">
            <summary>
            连接服务器 连接方式
            </summary>
        </member>
        <member name="F:AIO.MailMultipInfo.ClientUseDefaultCredentials">
            <summary>
            连接服务器 是否使用默认凭证
            </summary>
        </member>
        <member name="M:AIO.MailMultipInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            邮件
            </summary>
            <param name="form"></param>
            <param name="to"></param>
            <param name="passwrod"></param>
        </member>
        <member name="T:AIO.MailMultipleHandle">
            <summary>
            邮件 一对多
            </summary>
        </member>
        <member name="M:AIO.MailMultipleHandle.#ctor(AIO.MailMultipInfo,System.String)">
            <summary>
            邮件
            </summary>
            <param name="Info"></param>
            <param name="subject"></param>
        </member>
        <member name="M:AIO.MailMultipleHandle.AddRecipients(System.Net.Mail.MailAddress[])">
            <summary>
            添加 收件人
            </summary>
        </member>
        <member name="M:AIO.MailMultipleHandle.AddRecipients(System.String[])">
            <summary>
            添加 收件人
            </summary>
        </member>
        <member name="M:AIO.MailMultipleHandle.RemoveRecipients(System.Net.Mail.MailAddress[])">
            <summary>
            移除 收件人
            </summary>
        </member>
        <member name="M:AIO.MailMultipleHandle.RemoveRecipients(System.String[])">
            <summary>
            移除 收件人
            </summary>
        </member>
        <member name="M:AIO.MailMultipleHandle.Send(System.String,System.Action)">
            <summary>
            发送邮件
            </summary>
            <param name="Body">内容主体</param>
            <param name="CallBack">回调</param>
        </member>
        <member name="M:AIO.MailMultipleHandle.Send(System.String,System.Net.Mail.MailAddress[],System.Action)">
            <summary>
            发送邮件
            </summary>
            <param name="Body">内容主体</param>
            <param name="CallBack">回调</param>
            <param name="Addresses">接收者</param>
        </member>
        <member name="M:AIO.MailMultipleHandle.Send(System.String,System.String,System.Action)">
            <summary>
            发送邮件
            </summary>
            <param name="Label">邮件标题</param>
            <param name="Body">内容主体</param>
            <param name="CallBack">回调</param>
        </member>
        <member name="T:AIO.MailSingleHandle">
            <summary>
            单对单 直接发送
            </summary>
        </member>
        <member name="P:AIO.MailSingleHandle.Recipients">
            <summary>
            收件人
            </summary>
        </member>
        <member name="M:AIO.MailSingleHandle.#ctor(AIO.MailSingleInfo,System.String)">
            <summary>
            
            </summary>
            <param name="Info"></param>
            <param name="subject"></param>
        </member>
        <member name="M:AIO.MailSingleHandle.Send(System.String,System.Action)">
            <summary>
            发送邮件
            </summary>
            <param name="Body">内容主体</param>
            <param name="CallBack">回调</param>
        </member>
        <member name="M:AIO.MailSingleHandle.Send(System.String,System.String,System.Action)">
            <summary>
            发送邮件
            </summary>
            <param name="Label">邮件标题</param>
            <param name="Body">内容主体</param>
            <param name="CallBack">回调</param>
        </member>
        <member name="T:AIO.MailSingleInfo">
            <summary>
            邮件 一对一 传入参数
            </summary>
        </member>
        <member name="F:AIO.MailSingleInfo.Form">
            <summary>
            发送者 地址
            </summary>
        </member>
        <member name="F:AIO.MailSingleInfo.FormPort">
            <summary>
            发送者 端口
            </summary>
        </member>
        <member name="F:AIO.MailSingleInfo.FormDisplayName">
            <summary>
            发送者  昵称  如果没有则用地址代替
            </summary>
        </member>
        <member name="F:AIO.MailSingleInfo.To">
            <summary>
            接收者 地址
            </summary>
        </member>
        <member name="F:AIO.MailSingleInfo.ToDisplayName">
            <summary>
            接收者 昵称
            </summary>
        </member>
        <member name="F:AIO.MailSingleInfo.Passwrod">
            <summary>
            凭证授权码
            </summary>
        </member>
        <member name="F:AIO.MailSingleInfo.Encoding">
            <summary>
            编码格式
            </summary>
        </member>
        <member name="F:AIO.MailSingleInfo.ClientHost">
            <summary>
            连接服务器 地址 例子:"smtp.qq.com"
            </summary>
        </member>
        <member name="F:AIO.MailSingleInfo.ClientEnableSsl">
            <summary>
            连接服务器 SSL验证
            </summary>
        </member>
        <member name="F:AIO.MailSingleInfo.ClientTimeout">
            <summary>
            连接服务器 超时秒限制
            </summary>
        </member>
        <member name="F:AIO.MailSingleInfo.ClientDeliveryMethod">
            <summary>
            连接服务器 连接方式
            </summary>
        </member>
        <member name="F:AIO.MailSingleInfo.ClientUseDefaultCredentials">
            <summary>
            连接服务器 是否使用默认凭证
            </summary>
        </member>
        <member name="M:AIO.MailSingleInfo.#ctor(System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="form"></param>
             <param name="to"></param>
             <param name="passwrod"></param>
        </member>
        <member name="T:AIO.PList.IPListElementExten">
            <summary>
            A .Net representation of a  PList element exten
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsString(AIO.PList.IPListElement)">
            <summary>
            转换为 String
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsReal(AIO.PList.IPListElement)">
            <summary>
            转换为 Real
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsBool(AIO.PList.IPListElement)">
            <summary>
            转换为 Bool
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsDict(AIO.PList.IPListElement)">
            <summary>
            转换为 Dict
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsInteger(AIO.PList.IPListElement)">
            <summary>
            转换为 Integer
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsDate(AIO.PList.IPListElement)">
            <summary>
            转换为 Date
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsData(AIO.PList.IPListElement)">
            <summary>
            转换为 Data
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsArray(AIO.PList.IPListElement)">
            <summary>
            转换为 Null
            </summary>
        </member>
        <member name="T:AIO.PList.IPListElement">
            <summary>
            A .Net representation of a  PList element
            </summary>
        </member>
        <member name="P:AIO.PList.IPListElement.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.IPListElement.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="M:AIO.PList.IPListElement.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.IPListElement.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>The count of PList elements in this element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="P:AIO.PList.IPListElement.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.IPListElement.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.IPListElement.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListBinaryReader">
            <summary>
            A class, used to read binary formated <see cref="T:CE.iPhone.IPListElemnet"/> from a stream
            </summary>
        </member>
        <member name="P:AIO.PList.PListBinaryReader.BaseStream">
            <summary>
            Gets the basestream.
            </summary>
            <value>The basestream.</value>
        </member>
        <member name="P:AIO.PList.PListBinaryReader.ElementIdxSize">
            <summary>
            Gets or sets the size of the element idx.
            </summary>
            <value>The size of the element idx.</value>
        </member>
        <member name="M:AIO.PList.PListBinaryReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListBinaryReader"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListBinaryReader.Read(System.IO.Stream)">
            <summary>
            Reads a binary formated <see cref="T:CE.iPhone.IPListElemnet"/> from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElemnet"/>, read from the specified stream</returns>
        </member>
        <member name="P:AIO.PList.PListBinaryReader.CurrentElementTypeCode">
            <summary>
            Gets the current element type code.
            </summary>
            <value>The current element type code.</value>
        </member>
        <member name="P:AIO.PList.PListBinaryReader.CurrentElementLength">
            <summary>
            Gets the length of the current element.
            </summary>
            <value>The length of the current element.</value>
        </member>
        <member name="M:AIO.PList.PListBinaryReader.ReadInternal(System.Int32)">
            <summary>
            Reads the <see cref="T:CE.iPhone.IPListElemnet"/> at the specified idx.
            </summary>
            <param name="elemIdx">The elem idx.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElemnet"/> at the specified idx.</returns>
        </member>
        <member name="M:AIO.PList.PListBinaryReader.ReadInternal">
            <summary>
            Reads the <see cref="T:CE.iPhone.IPListElemnet"/> at the current stream position.
            </summary>
            <returns>The <see cref="T:CE.iPhone.IPListElemnet"/> at the current stream position.</returns>
        </member>
        <member name="T:AIO.PList.PListBinaryWriter">
            <summary>
            A class, used to write a <see cref="T:CE.iPhone.IPListElemnet"/>  binary formated to a stream
            </summary>
        </member>
        <member name="F:AIO.PList.PListBinaryWriter.s_PListHeader">
            <summary>
            The Header (bplist00)
            </summary>
        </member>
        <member name="P:AIO.PList.PListBinaryWriter.BaseStream">
            <summary>
            Gets the basestream.
            </summary>
            <value>The basestream.</value>
        </member>
        <member name="P:AIO.PList.PListBinaryWriter.ElementIdxSize">
            <summary>
            Gets or sets the size of the element idx.
            </summary>
            <value>The size of the element idx.</value>
        </member>
        <member name="P:AIO.PList.PListBinaryWriter.Offsets">
            <summary>
            Gets the offset table.
            </summary>
            <value>The offset table.</value>
        </member>
        <member name="M:AIO.PList.PListBinaryWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListBinaryWriter"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListBinaryWriter.Write(System.IO.Stream,AIO.PList.IPListElement)">
            <summary>
            Writers a <see cref="T:CE.iPhone.IPListElemnet"/> to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:AIO.PList.PListBinaryWriter.FormatIdx(System.Int32)">
            <summary>
            Formats an element idx based on the ElementIdxSize.
            </summary>
            <param name="idx">The idx.</param>
            <returns>The formated idx.</returns>
        </member>
        <member name="M:AIO.PList.PListBinaryWriter.WriteInternal(AIO.PList.IPListElement)">
            <summary>
            Writers a <see cref="T:CE.iPhone.IPListElemnet"/> to the current stream position
            </summary>
            <param name="element">The element.</param>
            <returns>The Inx of the written element</returns>
        </member>
        <member name="T:AIO.PList.PListArray">
            <summary>
            Represents an array of an <see cref="T:CE.iPhone.IPListElement"/> objects
            </summary>
        </member>
        <member name="P:AIO.PList.PListArray.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListArray.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListArray.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.PListArray.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListArray.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListArray.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListArray.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListArray.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListArray.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListArray.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PList.PListDict">
            <summary>
            Represents an dictionary with <see cref="T:System.String"/> keys and <see cref="T:CE.iPhone.IPListElement"/> values
            </summary>
        </member>
        <member name="P:AIO.PList.PListDict.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListDict.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListDict.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.PListDict.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDict.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDict.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDict.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDict.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListDict.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListDict.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PList.PListElement`1">
            <summary>
            An abstract base class for primitive PList types
            </summary>
            <typeparam name="T">The .Net equivalent to the PList type</typeparam>
        </member>
        <member name="P:AIO.PList.PListElement`1.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListElement`1.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListElement`1.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AIO.PList.PListElement`1.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListElement`1.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a
            custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/>
            to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListElement`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:AIO.PList.PListElement`1.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListElement`1.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>The XML String representation of the Value.</returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.op_Implicit(AIO.PList.PListElement{`0})~`0">
            <summary>
            </summary>
            <param name="element">The elem.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListElement`1.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListElement`1.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListElement`1.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListElement`1.Equals(AIO.PList.IPListElement)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListElement`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIO.PList.PListElementFactory">
            <summary>
            Singleton class which generates concrete <see cref="T:CE.iPhone.IPListElement"/> from the Tag or TypeCode
            </summary>
        </member>
        <member name="P:AIO.PList.PListElementFactory.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:AIO.PList.PListElementFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListElementFactory"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListElementFactory.Register``1(``0)">
            <summary>
            Registers the specified element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
        </member>
        <member name="M:AIO.PList.PListElementFactory.Register``1(System.String,System.Byte,``0)">
            <summary>
            Registers the specified element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag">The tag.</param>
            <param name="typeCode">The type code.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:AIO.PList.PListElementFactory.Create(System.Byte,System.Int32)">
            <summary>
            Creates a concrete <see cref="T:CE.iPhone.IPListElement"/> object secified specified by it's typecode.
            </summary>
            <param name="typeCode">The typecode of the element.</param>
            <param name="length">The length of the element
            (required only for <see cref="T:CE.iPhone.PListBool"/>, <see cref="T:CE.iPhone.PListNull"/> and <see cref="T:CE.iPhone.PListFill"/>).</param>
            <returns>The created <see cref="T:CE.iPhone.IPListElement"/> object</returns>
        </member>
        <member name="M:AIO.PList.PListElementFactory.Create(System.String)">
            <summary>
            Creates a concrete <see cref="T:CE.iPhone.IPListElement"/> object secified specified by it's tag.
            </summary>
            <param name="tag">The tag of the element.</param>
            <returns>The created <see cref="T:CE.iPhone.IPListElement"/> object</returns>
        </member>
        <member name="M:AIO.PList.PListElementFactory.CreateLengthElement(System.Int32)">
            <summary>
            Creates a <see cref="T:CE.iPhone.IPListElement"/> object used for exteded length information.
            </summary>
            <param name="length">The exteded length information.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElement"/> object used for exteded length information.</returns>
        </member>
        <member name="M:AIO.PList.PListElementFactory.CreateKeyElement(System.String)">
            <summary>
            Creates a <see cref="T:CE.iPhone.IPListElement"/> object used for dictionary keys.
            </summary>
            <param name="key">The key.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElement"/> object used for dictionary keys.</returns>
        </member>
        <member name="T:AIO.PList.PListException">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:AIO.PList.PListFormatException">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListFormatException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListFormatException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListFormatException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:AIO.PList.PListFormat">
            <summary>
            The Format of a PList File
            </summary>
        </member>
        <member name="F:AIO.PList.PListFormat.Binary">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.PList.PListFormat.Xml">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIO.PList.PListBool">
            <summary>
            Represents a Boolean Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListBool.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListBool.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListBool.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AIO.PList.PListBool.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListBool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListBool"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListBool.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListBool"/> class.
            </summary>
            <param name="value">The Value of this element</param>
        </member>
        <member name="M:AIO.PList.PListBool.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListBool.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:AIO.PList.PListBool.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListBool.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListBool.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListBool.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListBool.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListData">
            <summary>
            Represents a Byte[] Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListData.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListData.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListData.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListData"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListData"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:AIO.PList.PListData.Parse(System.String)">
            <summary>
            Parses the specified value from a given String (encoded as Base64), read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListData.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value (encoded as Base64).
            </returns>
        </member>
        <member name="M:AIO.PList.PListData.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListData.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListData.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListDate">
            <summary>
            Represents a DateTime Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListDate.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListDate.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListDate.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListDate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListDate"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListDate.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListDate"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:AIO.PList.PListDate.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListDate.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListDate.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDate.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDate.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListFill">
            <summary>
            Represents a fill element in a PList
            </summary>
            <remarks>Is skipped in Xml-Serialization</remarks>
        </member>
        <member name="P:AIO.PList.PListFill.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListFill.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListFill.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.PListFill.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListFill.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListFill.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListFill.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListFill.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListFill.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListFill.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PList.PListInteger">
            <summary>
            Represents an integer Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListInteger.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListInteger.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListInteger.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListInteger"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListInteger.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListInteger"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:AIO.PList.PListInteger.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListInteger.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListInteger.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListInteger.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListInteger.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListNull">
            <summary>
            Represents a null element in a PList
            </summary>
            <remarks>Is skipped in Xml-Serialization</remarks>
        </member>
        <member name="P:AIO.PList.PListNull.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListNull.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListNull.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.PListNull.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListNull.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListNull.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListNull.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListNull.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListNull.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListNull.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PList.PListReal">
            <summary>
            Represents a double Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListReal.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListReal.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListReal.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListReal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListReal"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListReal.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListReal"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:AIO.PList.PListReal.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListReal.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListReal.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListReal.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListReal.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListString">
            <summary>
            Represents an string Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListString.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListString.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="M:AIO.PList.PListString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListString"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:AIO.PList.PListString.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListString.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListString.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListString.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListString.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListString.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListString.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.PList.PListString.Equals(System.Object)">
            <summary>
            比较
            </summary>
        </member>
        <member name="M:AIO.PList.PListString.op_Equality(AIO.PList.PListString,AIO.PList.PListString)">
            <summary>
            相等
            </summary>
        </member>
        <member name="M:AIO.PList.PListString.op_Inequality(AIO.PList.PListString,AIO.PList.PListString)">
            <summary>
            不相等
            </summary>
        </member>
        <member name="M:AIO.PList.PListString.op_Implicit(System.String)~AIO.PList.PListString">
            <summary>
            隐式转换
            </summary>
        </member>
        <member name="T:AIO.PList.PListRoot">
            <summary>
            Represents a PList File
            </summary>
        </member>
        <member name="P:AIO.PList.PListRoot.Format">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:AIO.PList.PListRoot"/> is stored in binary format.
            </summary>
            <value><c>true</c> if stored in binary format; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:AIO.PList.PListRoot.Load(System.String)">
            <summary>
            Loads the PList from specified file.
            </summary>
            <param name="fileName">The path of the PList.</param>
            <returns>A <see cref="T:AIO.PList.PListRoot"/> object loaded from the file</returns>
        </member>
        <member name="M:AIO.PList.PListRoot.Load(System.IO.Stream)">
            <summary>
            Loads the PList from specified stream.
            </summary>
            <param name="stream">The stream containing the PList.</param>
            <returns>A <see cref="T:AIO.PList.PListRoot"/> object loaded from the stream</returns>
        </member>
        <member name="M:AIO.PList.PListRoot.Save(System.String,AIO.PList.PListFormat)">
            <summary>
            Saves the PList to the specified path.
            </summary>
            <param name="fileName">The path of the PList.</param>
            <param name="format">The format of the PList (Binary/Xml).</param>
        </member>
        <member name="M:AIO.PList.PListRoot.Save(System.String)">
            <summary>
            Saves the PList to the specified path.
            </summary>
            <param name="fileName">The path of the PList.</param>
        </member>
        <member name="M:AIO.PList.PListRoot.Save(System.IO.Stream)">
            <summary>
            Saves the PList to the specified stream.
            </summary>
            <param name="stream">The stream in which the PList is saves.</param>
        </member>
        <member name="M:AIO.PList.PListRoot.Save(System.IO.Stream,AIO.PList.PListFormat)">
            <summary>
            Saves the PList to the specified stream.
            </summary>
            <param name="stream">The stream in which the PList is saves.</param>
            <param name="format">The format of the PList (Binary/Xml).</param>
        </member>
        <member name="P:AIO.PList.PListRoot.Root">
            <summary>
            Gets or sets the root PList-Element.
            </summary>
            <value>The root PList-Element.</value>
        </member>
        <member name="M:AIO.PList.PListRoot.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a
            custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/>
            to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListRoot.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListRoot.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PoolSystem`2">
            <summary>
            一维对象池系统
            </summary>
            <typeparam name="E">对象池泛型</typeparam>
            <typeparam name="T">实体泛型</typeparam>
        </member>
        <member name="M:AIO.PoolSystem`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.PoolSystem`2.GetEID(`1)">
            <summary>
             获取实体唯一ID
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:AIO.PoolSystem`2.ClearCache">
            <summary>
             清空缓存数据
            </summary>
        </member>
        <member name="M:AIO.PoolSystem`2.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="P:AIO.PoolSystem`2.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:AIO.PoolSystem`2.HasInstance">
            <summary>
            是否存在实例
            </summary>
        </member>
        <member name="P:AIO.PoolSystem`2.BusyPool">
            <summary>
            使用中的对象
            </summary>
        </member>
        <member name="P:AIO.PoolSystem`2.FreePool">
            <summary>
            空闲的对象
            </summary>
        </member>
        <member name="M:AIO.PoolSystem`2.CreateInstance">
            <summary>
            初始化系统
            </summary>
        </member>
        <member name="M:AIO.PoolSystem`2.UnInstall">
            <summary>
            卸载系统
            </summary>
        </member>
        <member name="M:AIO.PoolSystem`2.GetBusyPool">
            <summary>
            获取使用中的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.PoolSystem`2.GetSurviving(System.Int32@)">
            <summary>
            获取单位类型
            </summary>
            <param name="id">实例ID</param>
            <returns>实例单位对象</returns>
        </member>
        <member name="M:AIO.PoolSystem`2.GetSurviving(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            获取单位类型
            </summary>
            <param name="ids">实例ID列表</param>
            <returns>实例单位对象</returns>
        </member>
        <member name="M:AIO.PoolSystem`2.ClearCacheData">
            <summary>
            清理缓存数据
            </summary>
        </member>
        <member name="M:AIO.PoolSystem`2.AddSurviving(`1)">
            <summary>
             添加存活对象
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:AIO.PoolSystem`2.RemoveSurviving(`1)">
            <summary>
            移除存活对象
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:AIO.PoolSystem`2.Recycle(`1)">
            <summary>
            回收对象
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:AIO.PoolSystem`2.Recycle(System.Int32)">
            <summary>
            回收对象
            </summary>
            <param name="eid">实体ID</param>
        </member>
        <member name="M:AIO.PoolSystem`2.RecycleBusy">
            <summary>
            回收所有正在使用的对象
            </summary>
        </member>
        <member name="T:AIO.PoolTypeSystem`2">
            <summary>
            二维对象池系统
            </summary>
            <typeparam name="E">对象池泛型</typeparam>
            <typeparam name="T">实体泛型</typeparam>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.GetEID(`1)">
            <summary>
             获取实体唯一ID
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.GetTID(`1)">
            <summary>
             获取配置类型唯一ID
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.ClearCache">
            <summary>
             清空缓存数据
            </summary>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="P:AIO.PoolTypeSystem`2.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:AIO.PoolTypeSystem`2.HasInstance">
            <summary>
            是否存在实例
            </summary>
        </member>
        <member name="P:AIO.PoolTypeSystem`2.BusyPool">
            <summary>
            使用中的对象
            </summary>
        </member>
        <member name="P:AIO.PoolTypeSystem`2.FreePool">
            <summary>
            空闲的对象
            </summary>
        </member>
        <member name="P:AIO.PoolTypeSystem`2.Surviving">
            <summary>
            存活的对象
            </summary>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.CreateInstance">
            <summary>
            初始化系统
            </summary>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.UnInstall">
            <summary>
            卸载系统
            </summary>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.GetBusyPool">
            <summary>
            获取使用中的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.GetSurviving(System.Int32@)">
            <summary>
            获取单位类型
            </summary>
            <param name="id">实例ID</param>
            <returns>实例单位对象</returns>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.GetSurviving(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            获取单位类型
            </summary>
            <param name="ids">实例ID列表</param>
            <returns>实例单位对象</returns>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.ClearCacheData">
            <summary>
            清理缓存数据
            </summary>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.AddSurviving(`1)">
            <summary>
             添加存活对象
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.RemoveSurviving(`1)">
            <summary>
            移除存活对象
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.Recycle(`1)">
            <summary>
            回收对象
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:AIO.PoolTypeSystem`2.RecycleBusy">
            <summary>
            回收所有正在使用的对象
            </summary>
        </member>
        <member name="T:AIO.Singleton`1">
            <summary>
            单例模式
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="P:AIO.Singleton`1.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:AIO.Singleton`1.CreateInstance">
            <summary>
            创建实例
            </summary>
        </member>
        <member name="M:AIO.Singleton`1.ReleaseInstance">
            <summary>
            释放实例
            </summary>
        </member>
        <member name="P:AIO.Singleton`1.HasInstance">
            <summary>
            是否存在实例
            </summary>
        </member>
        <member name="T:AIO.BinDictionary`2">
            <summary>
            数据字典
            </summary>
            <typeparam name="K">Key泛型</typeparam>
            <typeparam name="V">Value泛型</typeparam>
        </member>
        <member name="P:AIO.BinDictionary`2.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.BinDictionary`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.BinDictionary`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Deserialize(AIO.IReadData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Serialize(AIO.IWriteData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Reset">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinDictionary`2.Count">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinDictionary`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinDictionary`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinDictionary`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinDictionary`2.Values">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Clone">
            <inheritdoc />
        </member>
        <member name="T:AIO.BinHashSet`1">
            <summary>
            列表存储
            </summary>
        </member>
        <member name="P:AIO.BinHashSet`1.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.BinHashSet`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AIO.BinHashSet`1.Dispose">
            <summary>
            执行与释放或重置非托管资源关联的应用程序定义的任务
            </summary>
        </member>
        <member name="M:AIO.BinHashSet`1.Deserialize(AIO.IReadData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinHashSet`1.Serialize(AIO.IWriteData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinHashSet`1.GetEnumerator">
            <summary>返回一个循环访问集合的枚举器。</summary>
            <returns>用于循环访问集合的枚举数。</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>返回循环访问集合的枚举数。</summary>
            <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
            </returns>
        </member>
        <member name="M:AIO.BinHashSet`1.Add(`0)">
            <summary>
              将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。
            </summary>
            <param name="item">
              要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。
            </param>
            <exception cref="T:System.NotSupportedException">
              <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。
            </exception>
        </member>
        <member name="M:AIO.BinHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            对该集合进行与另一个IEnumerable (T)对象的并集运算；
            </summary>
            <param name="other">另一个集合</param>
        </member>
        <member name="M:AIO.BinHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            对该集合进行与另一个IEnumerable (T)对象的交集运算；
            </summary>
            <param name="other">另一个集合</param>
        </member>
        <member name="M:AIO.BinHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            将该集合中与其他集合重复的元素移除；
            </summary>
            <param name="other">另一个集合</param>
        </member>
        <member name="M:AIO.BinHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            将该集合变换成只包含在该集合或者另一个集合中而不同时属于两个集合的元素；
            </summary>
            <param name="other">另一个集合</param>
        </member>
        <member name="M:AIO.BinHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的子集；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的超集；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的真超集；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的真子集；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否与另一个集合存在共同的元素；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否与另一个集合有完全相同的元素，且仅有这些元素。
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.AIO#ISet{T}#Add(`0)">
            <summary>
            将ITEM添加到集合中，如果已存在，则返回false；
            </summary>
            <param name="item">要添加的元素</param>
            <returns>Ture:不存在 False:已存在</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.Clear">
            <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。
            </summary>
            <exception cref="T:System.NotSupportedException">
              <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。
            </exception>
        </member>
        <member name="M:AIO.BinHashSet`1.Contains(`0)">
            <summary>
              确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。
            </summary>
            <param name="item">
              要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。
            </param>
            <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
        </member>
        <member name="M:AIO.BinHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
              从特定的 <see cref="T:System.Collections.Generic.ICollection`1" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
            <param name="array">
              一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标。
              <see cref="T:System.Array" /> 必须具有从零开始的索引。
            </param>
            <param name="arrayIndex">
              <paramref name="array" /> 中从零开始的索引，从此处开始复制。
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> 为 <see langword="null" />。
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="arrayIndex" /> 小于 0。
            </exception>
            <exception cref="T:System.ArgumentException">
              源中的元素数目 <see cref="T:System.Collections.Generic.ICollection`1" /> 大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。
            </exception>
        </member>
        <member name="M:AIO.BinHashSet`1.Remove(`0)">
            <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。
            </summary>
            <param name="item">
              要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。
            </param>
            <returns>
              如果从 <see langword="true" /> 中成功移除 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
               如果在原始 <see langword="false" /> 中没有找到 <paramref name="item" />，该方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。
            </returns>
            <exception cref="T:System.NotSupportedException">
              <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。
            </exception>
        </member>
        <member name="P:AIO.BinHashSet`1.Count">
            <summary>
              获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。
            </summary>
            <returns>
              <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。
            </returns>
        </member>
        <member name="P:AIO.BinHashSet`1.IsReadOnly">
            <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
            <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
        </member>
        <member name="M:AIO.BinHashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
            </summary>
            <param name="info">
              要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
            </param>
            <param name="context">
              此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。
            </param>
            <exception cref="T:System.Security.SecurityException">
              调用方没有所要求的权限。
            </exception>
        </member>
        <member name="M:AIO.BinHashSet`1.OnDeserialization(System.Object)">
            <summary>在整个对象图形已经反序列化时运行。</summary>
            <param name="sender">
              启动回调的对象。
               当前未实现该参数的功能。
            </param>
        </member>
        <member name="M:AIO.BinHashSet`1.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:AIO.BinHashSet`1.Clone">
            <inheritdoc />
        </member>
        <member name="T:AIO.BinList`1">
            <summary>
            列表存储
            </summary>
        </member>
        <member name="P:AIO.BinList`1.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.BinList`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AIO.BinList`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Reset">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Deserialize(AIO.IReadData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Serialize(AIO.IWriteData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinList`1.Count">
            <summary>
              获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。
            </summary>
            <returns>
              <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。
            </returns>
        </member>
        <member name="P:AIO.BinList`1.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinList`1.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinList`1.IsReadOnly">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
        </member>
        <member name="M:AIO.BinList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.RemoveAt(System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" />
        </member>
        <member name="P:AIO.BinList`1.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.Generic.IList`1.Item(System.Int32)" />
        </member>
        <member name="M:AIO.BinList`1.Clone">
            <inheritdoc />
        </member>
        <member name="T:AIO.BinQueue`1">
            <summary>
            数据队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AIO.BinQueue`1.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.BinQueue`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AIO.BinQueue`1.Dispose">
            <summary>
            执行与释放或重置非托管资源关联的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:AIO.BinQueue`1.Deserialize(AIO.IReadData)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.BinQueue`1.Serialize(AIO.IWriteData)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.BinQueue`1.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:AIO.BinQueue`1.GetEnumerator">
            <summary>返回一个循环访问集合的枚举器。</summary>
            <returns>用于循环访问集合的枚举数。</returns>
        </member>
        <member name="M:AIO.BinQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>返回循环访问集合的枚举数。</summary>
            <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
            </returns>
        </member>
        <member name="M:AIO.BinQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
            <param name="array">
              一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
              <see cref="T:System.Array" /> 必须具有从零开始的索引。
            </param>
            <param name="index">
              <paramref name="array" /> 中从零开始的索引，从此处开始复制。
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> 为 <see langword="null" />。
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> 小于零。
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="array" /> 是多维的。
              - 或 -
              源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
              - 或 -
              无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。
            </exception>
        </member>
        <member name="P:AIO.BinQueue`1.System#Collections#ICollection#Count">
            <summary>
              获取 <see cref="T:System.Collections.ICollection" /> 中包含的元素数。
            </summary>
            <returns>
              <see cref="T:System.Collections.ICollection" /> 中包含的元素数。
            </returns>
        </member>
        <member name="P:AIO.BinQueue`1.SyncRoot">
            <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
            <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </returns>
        </member>
        <member name="P:AIO.BinQueue`1.IsSynchronized">
            <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
            <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
            </returns>
        </member>
        <member name="P:AIO.BinQueue`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
            <summary>获取集合中的元素数。</summary>
            <returns>集合中的元素数。</returns>
        </member>
        <member name="M:AIO.BinQueue`1.Clone">
            <inheritdoc />
        </member>
        <member name="T:AIO.BinSortedList`2">
            <summary>
            数据字典
            </summary>
            <typeparam name="TKey">Key泛型</typeparam>
            <typeparam name="TValue">Value泛型</typeparam>
        </member>
        <member name="P:AIO.BinSortedList`2.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.BinSortedList`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.BinSortedList`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Deserialize(AIO.IReadData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Serialize(AIO.IWriteData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Reset">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinSortedList`2.Count">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.Count" />
        </member>
        <member name="P:AIO.BinSortedList`2.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinSortedList`2.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinSortedList`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.ContainsKey(`0)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        </member>
        <member name="M:AIO.BinSortedList`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.TryGetValue(`0,`1@)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />
        </member>
        <member name="P:AIO.BinSortedList`2.Item(`0)">
            <inheritdoc cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
        </member>
        <member name="P:AIO.BinSortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinSortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinSortedList`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinSortedList`2.Values">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Clone">
            <inheritdoc />
        </member>
        <member name="T:AIO.BinStack`1">
            <summary>
            数据队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AIO.BinStack`1.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.BinStack`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AIO.BinStack`1.Dispose">
            <summary>
            执行与释放或重置非托管资源关联的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:AIO.BinStack`1.Deserialize(AIO.IReadData)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.BinStack`1.Serialize(AIO.IWriteData)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.BinStack`1.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:AIO.BinStack`1.GetEnumerator">
            <summary>返回一个循环访问集合的枚举器。</summary>
            <returns>用于循环访问集合的枚举数。</returns>
        </member>
        <member name="M:AIO.BinStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>返回循环访问集合的枚举数。</summary>
            <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
            </returns>
        </member>
        <member name="M:AIO.BinStack`1.CopyTo(System.Array,System.Int32)">
            <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
            <param name="array">
              一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
              <see cref="T:System.Array" /> 必须具有从零开始的索引。
            </param>
            <param name="index">
              <paramref name="array" /> 中从零开始的索引，从此处开始复制。
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> 为 <see langword="null" />。
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> 小于零。
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="array" /> 是多维的。
              - 或 -
              源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
              - 或 -
              无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。
            </exception>
        </member>
        <member name="P:AIO.BinStack`1.System#Collections#ICollection#Count">
            <summary>
              获取 <see cref="T:System.Collections.ICollection" /> 中包含的元素数。
            </summary>
            <returns>
              <see cref="T:System.Collections.ICollection" /> 中包含的元素数。
            </returns>
        </member>
        <member name="P:AIO.BinStack`1.SyncRoot">
            <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
            <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </returns>
        </member>
        <member name="P:AIO.BinStack`1.IsSynchronized">
            <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
            <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
            </returns>
        </member>
        <member name="P:AIO.BinStack`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
            <summary>获取集合中的元素数。</summary>
            <returns>集合中的元素数。</returns>
        </member>
        <member name="M:AIO.BinStack`1.Clone">
            <inheritdoc />
        </member>
        <member name="T:AIO.Storage">
            <summary>
            数据存储
            </summary>
        </member>
        <member name="P:AIO.Storage.Buffer">
            <summary>
            字节数据
            </summary>
        </member>
        <member name="P:AIO.Storage.Data">
            <summary>
            数据有效长度 需要调动序列化 Serialize
            </summary>
        </member>
        <member name="M:AIO.Storage.#ctor">
            <summary>
            数据存储
            </summary>
        </member>
        <member name="M:AIO.Storage.Deserialize">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.Storage.Serialize">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.Storage.Dispose">
            <summary>
            执行与释放或重置非托管资源关联的应用程序定义的任务
            </summary>
        </member>
        <member name="M:AIO.Storage.OnDeserialize(AIO.IReadData)">
            <summary>
            反序列化
            </summary>
            <param name="buffer">读取接口 如果长度等于0则说明没有数据</param>
        </member>
        <member name="M:AIO.Storage.OnSerialize(AIO.IWriteData)">
            <summary>
            序列化
            </summary>
            <param name="buffer">存储接口</param>
        </member>
        <member name="M:AIO.Storage.OnReset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="M:AIO.Storage.Reset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="P:AIO.Storage.Count">
            <summary>
            数据有效长度 需要调动序列化 Serialize
            </summary>
        </member>
        <member name="M:AIO.Storage.AddBin(AIO.IBinData)">
            <summary>
            添加数据bin
            </summary>
        </member>
        <member name="M:AIO.Storage.ClearBin">
            <summary>
            清空数据Bin
            </summary>
        </member>
        <member name="M:AIO.Storage.ContainBin(AIO.IBinData)">
            <summary>
            判断是否存在数据
            </summary>
            <param name="item">数据</param>
            <returns>Ture存在 False不存在</returns>
        </member>
        <member name="M:AIO.Storage.IndexOfBin(AIO.IBinData)">
            <summary>
            获取当前数据的下标
            </summary>
        </member>
        <member name="M:AIO.Storage.InsertBin(System.Int32,AIO.IBinData)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.Storage.RemoveBin(AIO.IBinData)">
            <summary>
            移除指定数据
            </summary>
        </member>
        <member name="T:AIO.StorageFile">
            <summary>
            数据文件
            </summary>
        </member>
        <member name="F:AIO.StorageFile.Path">
            <summary>
            保存读取路径
            </summary>
        </member>
        <member name="M:AIO.StorageFile.#ctor(System.String@)">
            <summary>
            数据存储
            </summary>
            <param name="path">存储读取路径</param>
        </member>
        <member name="M:AIO.StorageFile.Save">
            <summary>
            保存文件
            </summary>
        </member>
        <member name="M:AIO.StorageFile.Load">
            <summary>
            加载
            </summary>
        </member>
        <member name="T:AIO.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="M:AIO.Version.CompareTo(System.Object,System.Boolean)">
            <summary>
            比较版本号
            </summary>
            <param name="version">版本</param>
            <param name="ignoreBuildNumber">忽略构件号</param>
            <returns>0:相等 1:大于目标版本 -1:小余目标版本</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="P:AIO.Version.major">
            <summary>
            主版本号
            </summary>
        </member>
        <member name="P:AIO.Version.minor">
            <summary>
            小版本号
            </summary>
        </member>
        <member name="P:AIO.Version.revision">
            <summary>
            补丁修正号
            </summary>
        </member>
        <member name="P:AIO.Version.build">
            <summary>
            构建号,可选
            </summary>
        </member>
        <member name="M:AIO.Version.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.Version.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="major">主版本号</param>
            <param name="minor">小版本号</param>
            <param name="revision">补丁修正号</param>
        </member>
        <member name="M:AIO.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="major">主版本号</param>
            <param name="minor">小版本号</param>
            <param name="revision">补丁修正号</param>
            <param name="build">构建号,可选</param>
        </member>
        <member name="M:AIO.Version.ToString">
            <summary>
            转换为字符串
            </summary>
        </member>
        <member name="M:AIO.Version.ToStringWithoutBuildNumber">
            <summary>
            转换为字符串 不包含构建号
            </summary>
        </member>
        <member name="M:AIO.Version.GetHashCode">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.Version.Equals(System.Object)">
            <summary>
            比较版本号
            </summary>
        </member>
        <member name="M:AIO.Version.op_Equality(AIO.Version,AIO.Version)">
            <summary>
            ==
            </summary>
            <param name="v1"><see cref="T:AIO.Version"/></param>
            <param name="v2"><see cref="T:AIO.Version"/></param>
            <returns></returns>
        </member>
        <member name="M:AIO.Version.op_Inequality(AIO.Version,AIO.Version)">
            <summary>
            !=
            </summary>
            <param name="v1"><see cref="T:AIO.Version"/></param>
            <param name="v2"><see cref="T:AIO.Version"/></param>
            <returns></returns>
        </member>
        <member name="M:AIO.Version.op_LessThan(AIO.Version,AIO.Version)">
            <summary>
            &lt;
            </summary>
            <param name="v1"><see cref="T:AIO.Version"/></param>
            <param name="v2"><see cref="T:AIO.Version"/></param>
            <returns></returns>
        </member>
        <member name="M:AIO.Version.op_LessThanOrEqual(AIO.Version,AIO.Version)">
            <summary>
            &lt;=
            </summary>
            <param name="v1"><see cref="T:AIO.Version"/></param>
            <param name="v2"><see cref="T:AIO.Version"/></param>
            <returns></returns>
        </member>
        <member name="M:AIO.Version.op_GreaterThan(AIO.Version,AIO.Version)">
            <summary>
            >
            </summary>
            <param name="v1"><see cref="T:AIO.Version"/></param>
            <param name="v2"><see cref="T:AIO.Version"/></param>
            <returns></returns>
        </member>
        <member name="M:AIO.Version.op_GreaterThanOrEqual(AIO.Version,AIO.Version)">
            <summary>
            >=
            </summary>
            <param name="v1"><see cref="T:AIO.Version"/></param>
            <param name="v2"><see cref="T:AIO.Version"/></param>
            <returns></returns>
        </member>
        <member name="T:AIO.ScriptType">
            <summary>
            脚本类型
            </summary>
        </member>
        <member name="F:AIO.ScriptType.CScript">
            <summary>
            C#
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Lua">
            <summary>
            Lua
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Java">
            <summary>
            Java
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Python">
            <summary>
            Python
            </summary>
        </member>
        <member name="F:AIO.ScriptType.PHP">
            <summary>
            PHP
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Shell">
            <summary>
            Shell
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Bat">
            <summary>
            Bat
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Object_C">
            <summary>
            OC
            </summary>
        </member>
        <member name="F:AIO.ScriptType.TypeScript">
            <summary>
            TS
            </summary>
        </member>
        <member name="F:AIO.ScriptType.FScript">
            <summary>
            F#
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Rust">
            <summary>
            Rust
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Ruby">
            <summary>
            Ruby
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Go">
            <summary>
            Go
            </summary>
        </member>
        <member name="F:AIO.ScriptType.UnityShader">
            <summary>
            Unity Shader
            </summary>
        </member>
        <member name="T:AIO.Unit">
            <summary>
            单位
            </summary>
        </member>
        <member name="T:AIO.Unit.Char">
            <summary>
            只读变量
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.C0">
            <summary>
            0的字符
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.BEL">
            <summary>
            响铃
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.BackSpace">
            <summary>
            回格
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.TabH">
            <summary>
            tab(水平制表符)
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.NewLine">
            <summary>
            换行
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.TabV">
            <summary>
            tab(垂直制表符)
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Page">
            <summary>
            换页
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.EnterNewLine">
            <summary>
            回车 chr(13) &amp; chr(10) 回车和换行的组合
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.End">
            <summary>
            结束 End
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.PauseBreak">
            <summary>
            脱离 Pause Break
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Space">
            <summary>
            空格
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Exclamation">
            <summary>
            !
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.DoubleQuote">
            <summary>
            "
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Pound">
            <summary>
            #
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.USD">
            <summary>
            $
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Modulus">
            <summary>
            -%
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.AND">
            <summary>
            -&amp;
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.SingleQuote">
            <summary>
            -’
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.LeftBracket">
            <summary>
            -(
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.RightBracket">
            <summary>
            -)
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Asterisk">
            <summary>
            *
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.ADD">
            <summary>
            +
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Comma">
            <summary>
            ,
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.SUB">
            <summary>
            -
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Point">
            <summary>
            .
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Slash">
            <summary>
            /
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.N0">
            <summary>
            0
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.N1">
            <summary>
            1
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.N2">
            <summary>
            2
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.N3">
            <summary>
            3
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.N4">
            <summary>
            4
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.N5">
            <summary>
            5
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.N6">
            <summary>
            6
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.N7">
            <summary>
            7
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.N8">
            <summary>
            8
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.N9">
            <summary>
            9
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Colon">
            <summary>
            :
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Semicolon">
            <summary>
            ;
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.LessThanSign">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.Equality">
            <summary>
            61 =
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.EA">
            62 >　
            63 ?
            64 @
            <summary>
            65 A
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.EZ">
            66 B
            67 C
            68 D
            69 E
            70 F
            71 G
            72 H
            73 I
            74 J
            75 K
            76 L
            77 M
            78 N
            79 O
            80 P
            81 Q
            82 R
            83 S
            84 T
            85 U
            86 V
            87 W
            88 X
            89 Y
            <summary>
            90 Z
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.EAlphaBet">
            <summary>
            大写A-大写Z
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.UnderLine">
            91 [
            92 /　
            92 /
            93]
            94 ^
            <summary>
            95 _
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.ea">
            96 `
            <summary>
            97 a
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.ez">
            98 b
            99 c
            100 d
            101 e
            102 f
            103 g
            104 h
            105 i
            106 j
            107 k
            108 l
            109 m
            110 n
            111 o
            112 p
            113 q
            114 r
            115 s
            116 t
            117 u
            118 v
            119 w
            120 x
            121 y
            <summary>
            122 z
            </summary>
        </member>
        <member name="F:AIO.Unit.Char.eAlphaBet">
            <summary>
            小写e-小写z
            </summary>
        </member>
        <member name="T:AIO.Unit.Chinese">
            <summary>
            中文单位
            </summary>
        </member>
        <member name="F:AIO.Unit.Chinese.CNSNum">
            <summary>
            数字单位:个数组
            </summary>
        </member>
        <member name="F:AIO.Unit.Chinese.CNSDigit">
            <summary>
            数字单位:位数组
            </summary>
        </member>
        <member name="F:AIO.Unit.Chinese.CNSUnits">
            <summary>
            数字单位:单位数组
            </summary>
        </member>
        <member name="F:AIO.Unit.Chinese.NumberChar">
            <summary>
            数字字符串
            </summary>
        </member>
        <member name="T:AIO.Unit.Color">
            <summary>
            颜色库
            </summary>
        </member>
        <member name="F:AIO.Unit.Color.Write">
            <summary> 白色 1 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Red">
            <summary> 红色 5 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Green">
            <summary> 绿色 3 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Blue">
            <summary> 蓝色 4 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Peony">
            <summary> 牡丹红 5 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Cyan">
            <summary> 青色 6 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Yellow">
            <summary> 黄色 7 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Black">
            <summary> 黑色 8 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Gary">
            <summary> 灰色 41 </summary>
        </member>
        <member name="F:AIO.Unit.Color.SeaBlue">
            <summary> 海蓝 9 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Orange">
            <summary> 橙色 81 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Chocolate">
            <summary> 巧克力色 10 </summary>
        </member>
        <member name="F:AIO.Unit.Color.BluishViolet">
            <summary> 蓝紫色 11 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Brassiness">
            <summary> 黄铜色 12 </summary>
        </member>
        <member name="F:AIO.Unit.Color.BrightGold">
            <summary> 亮金色 13 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Brown">
            <summary> 棕色 14 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Aeneous1">
            <summary> 青铜色1 15 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Aeneous2">
            <summary> 青铜色2 16 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Bluewore">
            <summary> 士官服蓝色 17 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Coppercold">
            <summary> 冷铜色 18 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Coppery">
            <summary> 铜色 19 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Redcoral">
            <summary> 珊瑚红 20 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Hyacinthine">
            <summary> 紫蓝色 21 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Copperdeep">
            <summary> 深铜 22 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Greendeep">
            <summary> 深绿 23 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Darkcoppergreen">
            <summary> 深铜绿色 24 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Darkolivegreen">
            <summary> 深橄榄绿 25 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Bluedeep">
            <summary> 深蓝花色 26 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Modena">
            <summary> 深紫色 27 </summary>
        </member>
        <member name="F:AIO.Unit.Color.BlueSLATEdeep">
            <summary> 深石板蓝 28 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Slabsdeep">
            <summary> 深铅灰色 29 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Browndark">
            <summary> 深棕褐色 30 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Turquoisedeep">
            <summary> 深绿松石色 32 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Colordark">
            <summary> 暗木色 33 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Greylight">
            <summary> 淡灰色 34 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Redearthgreyrose">
            <summary> 土灰玫瑰红色 35 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Longstone">
            <summary> 长石色 36 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Firebrick">
            <summary> 火砖色 37 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Greenforest">
            <summary> 森林绿 38 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Golden">
            <summary> 金色 39 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Foresythia">
            <summary> 鲜黄色 40 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Aerugo">
            <summary> 铜绿色 42 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Yellowbluish">
            <summary> 青黄色 43 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Greenhunter">
            <summary> 猎人绿 44 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Redindian">
            <summary> 印度红 45 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Yellowearthy">
            <summary> 土黄色 46 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Wathet">
            <summary> 浅蓝色 47 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Greyfrench">
            <summary> 浅灰色 48 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Bluelightsteel">
            <summary> 浅钢蓝色 49 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Colorlight">
            <summary> 浅木色 59 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Greenlime">
            <summary> 石灰绿色 60 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Bisque">
            <summary> 桔黄色 61 </summary>
        </member>
        <member name="F:AIO.Unit.Color.Maroon">
            <summary> 褐红色 62 </summary> 62
        </member>
        <member name="T:AIO.Unit.Suffix">
            <summary>
            后缀
            </summary>
        </member>
        <member name="F:AIO.Unit.Suffix.TextureSuffix">
            <summary>
            图片文件后缀
            </summary>
        </member>
        <member name="F:AIO.Unit.Suffix.VideoSuffix">
            <summary>
            视频文件后缀
            </summary>
        </member>
        <member name="F:AIO.Unit.Suffix.SoundSuffix">
            <summary>
            音频文件后缀
            </summary>
        </member>
        <member name="F:AIO.Unit.Suffix.TextSuffix">
            <summary>
            文本文件后缀
            </summary>
        </member>
        <member name="F:AIO.Unit.Suffix.ShaderSuffix">
            <summary>
            shader文件后缀
            </summary>
        </member>
        <member name="F:AIO.Unit.Suffix.FontSuffix">
            <summary>
            字体后缀
            </summary>
        </member>
        <member name="F:AIO.Unit.Suffix.Animation">
            <summary>
            动画文件后缀
            </summary>
        </member>
        <member name="F:AIO.Unit.Suffix.Animator">
            <summary>
            控制器文件后缀
            </summary>
        </member>
        <member name="F:AIO.Unit.Suffix.Material">
            <summary>
            材质文件后缀
            </summary>
        </member>
        <member name="F:AIO.Unit.Suffix.PrefabSuffix">
            <summary>
            预制体文件后缀
            </summary>
        </member>
        <member name="F:AIO.Unit.Suffix.RTextureSuffix">
            <summary>
            渲染纹理后缀
            </summary>
        </member>
        <member name="T:AIO.Unit.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="T:AIO.Unit.Time.SencondUnit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.Unit.Time.SencondUnit.SECOND">
            <summary> 秒 </summary>
        </member>
        <member name="F:AIO.Unit.Time.SencondUnit.MILLISCOND">
            <summary> 毫秒 </summary>
        </member>
        <member name="F:AIO.Unit.Time.SencondUnit.MICROSECOND">
            <summary> 微秒 </summary>
        </member>
        <member name="F:AIO.Unit.Time.SencondUnit.NANOSECOND">
            <summary> 纳秒 </summary>
        </member>
        <member name="F:AIO.Unit.Time.SencondUnit.NANOSECOND_100">
            <summary> 100纳秒计数单位 </summary>
        </member>
        <member name="M:AIO.Unit.Time.GetSencondUnit(AIO.Unit.Time.SencondUnit)">
            <summary>
            获取秒 计数单位 秒
            </summary>
        </member>
        <member name="M:AIO.Unit.Time.GetMinUnit(AIO.Unit.Time.SencondUnit)">
            <summary>
            获取秒 计数单位 分
            </summary>
        </member>
        <member name="M:AIO.Unit.Time.GetHourUnit(AIO.Unit.Time.SencondUnit)">
            <summary>
            获取秒 计数单位 时
            </summary>
        </member>
        <member name="M:AIO.Unit.Time.GetDayUnit(AIO.Unit.Time.SencondUnit)">
            <summary>
            获取秒 计数单位 时
            </summary>
        </member>
        <member name="M:AIO.Unit.Time.GetWeekUnit(AIO.Unit.Time.SencondUnit)">
            <summary>
            获取秒 计数单位 时
            </summary>
        </member>
        <member name="T:AIO.Unit.Time.DateTimeUnit">
            <summary>
            时间间隔
            </summary>
        </member>
        <member name="F:AIO.Unit.Time.DateTimeUnit.Day">
            <summary> 日 </summary>
        </member>
        <member name="F:AIO.Unit.Time.DateTimeUnit.Week">
            <summary> 周 </summary>
        </member>
        <member name="F:AIO.Unit.Time.DateTimeUnit.Month">
            <summary> 月 </summary>
        </member>
        <member name="F:AIO.Unit.Time.DateTimeUnit.Season">
            <summary> 季 </summary>
        </member>
        <member name="F:AIO.Unit.Time.DateTimeUnit.Year">
            <summary> 年 </summary>
        </member>
        <member name="F:AIO.Unit.Time.UNIT_WEEK_DAY">
            <summary> 一周7天 </summary>
        </member>
        <member name="F:AIO.Unit.Time.UNIT_DAY_HOUR">
            <summary> 一天24时 </summary>
        </member>
        <member name="F:AIO.Unit.Time.UNIT_HOUR_MIN">
            <summary> 一时60分 </summary>
        </member>
        <member name="F:AIO.Unit.Time.UNIT_MIN_SECOND">
            <summary> 一分60秒 </summary>
        </member>
        <member name="F:AIO.Unit.Time.SECOND">
            <summary> 秒 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.Unit.Time.SECOND_MIN">
            <summary> 分 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.Unit.Time.SECOND_HOUR">
            <summary> 时 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.Unit.Time.SECOND_DAY">
            <summary> 日 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.Unit.Time.SECOND_WEEK">
            <summary> 周 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.Unit.Time.MS_SECOND">
            <summary> 秒 单位时间（毫秒） ms </summary>
        </member>
        <member name="F:AIO.Unit.Time.MS_MIN">
            <summary> 分 单位时间（毫秒） ms  </summary>
        </member>
        <member name="F:AIO.Unit.Time.MS_HOUR">
            <summary> 时 单位时间（毫秒） ms  </summary>
        </member>
        <member name="F:AIO.Unit.Time.MS_DAY">
            <summary> 日 单位时间（毫秒） ms  </summary>
        </member>
        <member name="F:AIO.Unit.Time.MS_WEEK">
            <summary> 周 单位时间（毫秒） ms  </summary>
        </member>
        <member name="F:AIO.Unit.Time.μS_SECOND">
            <summary> 秒 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.Unit.Time.μS_MIN">
            <summary> 分 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.Unit.Time.μS_HOUR">
            <summary> 时 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.Unit.Time.μS_DAY">
            <summary> 天 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.Unit.Time.μS_WEEK">
            <summary> 周 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.Unit.Time.NS_SECOND">
            <summary> 秒 单位时间（纳秒） ns </summary>
        </member>
        <member name="F:AIO.Unit.Time.NS_MIN">
            <summary> 分 单位时间（纳秒） ns </summary>
        </member>
        <member name="F:AIO.Unit.Time.NS_HOUR">
            <summary> 时 单位时间（纳秒） ns </summary>
        </member>
        <member name="F:AIO.Unit.Time.NS_DAY">
            <summary> 天 单位时间（纳秒） ns </summary>
        </member>
        <member name="F:AIO.Unit.Time.NS_WEEK">
            <summary> 周 单位时间（纳秒） ns </summary>
        </member>
        <member name="P:AIO.Unit.Time.Milliseconds">
            <summary> 1毫秒 </summary>
        </member>
        <member name="P:AIO.Unit.Time.Second">
            <summary> 1秒钟 </summary>
        </member>
        <member name="P:AIO.Unit.Time.Minute">
            <summary> 1分钟 </summary>
        </member>
        <member name="P:AIO.Unit.Time.Hour">
            <summary> 1小时 </summary>
        </member>
        <member name="P:AIO.Unit.Time.Day">
            <summary> 1天 </summary>
        </member>
        <member name="F:AIO.Unit.Time.GREENWICH">
            <summary> 格林威治时间UTC参照点：1970年1月1日0时0分0秒 </summary>
        </member>
        <member name="T:AIO.AmbiguousOperatorException">
            <summary>
            模棱两可的运算符
            </summary>
        </member>
        <member name="M:AIO.AmbiguousOperatorException.#ctor(System.String@,System.Type@,System.Type@)">
            <inheritdoc />
        </member>
        <member name="T:AIO.InvalidConversionException">
            <summary>
            表示当进行无效类型转换时引发的异常。
            </summary>
        </member>
        <member name="M:AIO.InvalidConversionException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.InvalidConversionException.#ctor(System.String@)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.InvalidConversionException.#ctor(System.String@,System.Exception@)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AIO.InvalidOperatorException">
            <summary>
            无效的运算符
            </summary>
        </member>
        <member name="M:AIO.InvalidOperatorException.#ctor(System.String@,System.Type@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.InvalidOperatorException.#ctor(System.String@,System.Type@,System.Type@)">
            <inheritdoc />
        </member>
        <member name="T:AIO.OperatorException">
            <summary>
            运算符异常
            </summary>
        </member>
        <member name="M:AIO.OperatorException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:AIO.OperatorException.#ctor(System.String@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.OperatorException.#ctor(System.String@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="T:AIO.UnexpectedEnumValueException`1">
            <summary>
            表示当枚举类型的值不在预期范围内时引发的异常。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
        </member>
        <member name="M:AIO.UnexpectedEnumValueException`1.#ctor(`0@)">
            <summary>
            使用指定的枚举值初始化 UnexpectedEnumValueException&lt;T&gt; 类的新实例。
            </summary>
            <param name="value">不在预期范围内的枚举值</param>
        </member>
        <member name="P:AIO.UnexpectedEnumValueException`1.Value">
            <summary>
            获取引发当前异常的枚举值。
            </summary>
        </member>
        <member name="T:AIO.IKeyedCollection`2">
            <summary>
            键迭代器
            </summary>
        </member>
        <member name="P:AIO.IKeyedCollection`2.Item(`0)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="P:AIO.IKeyedCollection`2.Item(System.Int32)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:AIO.IKeyedCollection`2.TryGetValue(`0,`1@)">
            <summary>
            尝试获取值
            </summary>
        </member>
        <member name="M:AIO.IKeyedCollection`2.Contains(`0)">
            <summary>
            存在
            </summary>
        </member>
        <member name="M:AIO.IKeyedCollection`2.Remove(`0)">
            <summary>
            移除
            </summary>
        </member>
        <member name="T:AIO.IMergedCollection`1">
            <summary>
            合并集合的接口
            </summary>
            <typeparam name="T">集合的类型</typeparam>
        </member>
        <member name="M:AIO.IMergedCollection`1.Includes``1">
            <summary>
            检查指定类型是否包含在集合中
            </summary>
            <typeparam name="TI">指定类型</typeparam>
            <returns>如果包含则为真，否则为假</returns>
        </member>
        <member name="M:AIO.IMergedCollection`1.Includes(System.Type)">
            <summary>
            检查指定类型是否包含在集合中
            </summary>
            <param name="elementType">元素的类型</param>
            <returns>如果包含则为真，否则为假</returns>
        </member>
        <member name="T:AIO.ISet`1">
            <summary>
            这是一个泛型集合接口，保证其元素的唯一性，这个唯一性是由某个比较器定义的。它还支持基本的集合操作，如并集、交集、补集和排他补集。
            </summary>
        </member>
        <member name="M:AIO.ISet`1.Add(`0)">
            <summary>
            将ITEM添加到集合中，如果已存在，则返回false；
            </summary>
            <param name="item">要添加的元素</param>
            <returns>Ture:不存在 False:已存在</returns>
        </member>
        <member name="M:AIO.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            对该集合进行与另一个IEnumerable (T)对象的并集运算；
            </summary>
            <param name="other">另一个集合</param>
        </member>
        <member name="M:AIO.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            对该集合进行与另一个IEnumerable (T)对象的交集运算；
            </summary>
            <param name="other">另一个集合</param>
        </member>
        <member name="M:AIO.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            将该集合中与其他集合重复的元素移除；
            </summary>
            <param name="other">另一个集合</param>
        </member>
        <member name="M:AIO.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            将该集合变换成只包含在该集合或者另一个集合中而不同时属于两个集合的元素；
            </summary>
            <param name="other">另一个集合</param>
        </member>
        <member name="M:AIO.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的子集；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的超集；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的真超集；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的真子集；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否与另一个集合存在共同的元素；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否与另一个集合有完全相同的元素，且仅有这些元素。
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="T:AIO.MergedCollection`1">
            <summary>
            实现 IMergedCollection 接口
            </summary>
            <typeparam name="T">泛型类型</typeparam>
        </member>
        <member name="M:AIO.MergedCollection`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:AIO.MergedCollection`1.Count">
            <summary>
            获取集合中元素的数量
            </summary>
        </member>
        <member name="P:AIO.MergedCollection`1.IsReadOnly">
            <summary>
            是否为只读集合
            </summary>
        </member>
        <member name="M:AIO.MergedCollection`1.Include``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            添加一个集合
            </summary>
            <typeparam name="TI">泛型类型</typeparam>
            <param name="collection">集合</param>
        </member>
        <member name="M:AIO.MergedCollection`1.Includes``1">
            <summary>
            是否包含某个类型的集合
            </summary>
            <typeparam name="TI">泛型类型</typeparam>
            <returns>是否包含某个类型的集合</returns>
        </member>
        <member name="M:AIO.MergedCollection`1.Includes(System.Type)">
            <summary>
            是否包含某个类型的集合
            </summary>
            <param name="implementationType">实现类型</param>
            <returns>是否包含某个类型的集合</returns>
        </member>
        <member name="M:AIO.MergedCollection`1.ForType``1">
            <summary>
            获取某个类型的集合
            </summary>
            <typeparam name="TI">泛型类型</typeparam>
            <returns>某个类型的集合</returns>
        </member>
        <member name="M:AIO.MergedCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AIO.MergedCollection`1.GetEnumerator">
            <summary>
            获取枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AIO.MergedCollection`1.GetCollectionForItem(`0)">
            <summary>
            获取某个元素所在的集合
            </summary>
            <param name="item">元素</param>
            <returns>某个元素所在的集合</returns>
        </member>
        <member name="M:AIO.MergedCollection`1.GetCollectionForType(System.Type,System.Boolean)">
            <summary>
            获取某个类型的集合
            </summary>
            <param name="type">类型</param>
            <param name="throwOnFail">是否抛出异常</param>
            <returns>某个类型的集合</returns>
        </member>
        <member name="M:AIO.MergedCollection`1.Contains(`0)">
            <summary>
            是否包含某个元素
            </summary>
            <param name="item">元素</param>
            <returns>是否包含某个元素</returns>
        </member>
        <member name="M:AIO.MergedCollection`1.Add(`0)">
            <summary>
            添加一个元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:AIO.MergedCollection`1.Clear">
            <summary>
            清空集合
            </summary>
        </member>
        <member name="M:AIO.MergedCollection`1.Remove(`0)">
            <summary>
            移除某个元素
            </summary>
            <param name="item">元素</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:AIO.MergedCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            将集合中的元素复制到数组中
            </summary>
            <param name="array">数组</param>
            <param name="arrayIndex">数组下标</param>
        </member>
        <member name="T:AIO.MergedKeyedCollection`2">
            <summary>
            合并键控集合
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:AIO.MergedKeyedCollection`2.collections">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.MergedKeyedCollection`2.collectionsLookup">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIO.MergedKeyedCollection`2.Item(`0)">
            <summary>
            获取值
            </summary>
            <param name="key">键值</param>
            <exception cref="T:System.ArgumentNullException">key为Null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">值不存在</exception>
        </member>
        <member name="P:AIO.MergedKeyedCollection`2.Count">
            <inheritdoc />
        </member>
        <member name="P:AIO.MergedKeyedCollection`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.Includes``1">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.Includes(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.ForType``1">
            <summary>
            
            </summary>
            <typeparam name="TSubItem"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.Include``1(AIO.IKeyedCollection{`0,``0})">
            <summary>
            
            </summary>
            <param name="collection"></param>
            <typeparam name="TSubItem"></typeparam>
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.GetCollectionForItem(`1)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.GetCollectionForType(System.Type,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="throwOnFail"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.GetCollectionForKey(`0,System.Boolean)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="throwOnFail"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.TryGetValue(`0,`1@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.Add(`1)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.Contains(`1)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.Remove(`1)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.CopyTo(`1[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.Contains(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIO.MergedKeyedCollection`2.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.Enumerator.#ctor(AIO.MergedKeyedCollection{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedKeyedCollection`2.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="P:AIO.MergedKeyedCollection`2.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="T:AIO.VariantCollection`2">
            <summary>
            变种泛型 TImplementation必须是TBase的子类或本身
            </summary>
            <typeparam name="TBase"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:AIO.VariantCollection`2.#ctor(System.Collections.Generic.ICollection{`1}@)">
            <summary>
            初始化VariantCollection对象，
            </summary>
            <param name="implementation"></param>
        </member>
        <member name="P:AIO.VariantCollection`2.Implementation">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AIO.VariantCollection`2.Count">
            <summary>
            获取 Implementation 中包含的元素数。
            </summary>
        </member>
        <member name="P:AIO.VariantCollection`2.IsReadOnly">
            <summary>
            获取一个值，该值指示 Implementation 是否为只读。
            </summary>
        </member>
        <member name="M:AIO.VariantCollection`2.GetEnumerator">
            <summary>
            返回一个IEnumerator(TBase)类型的枚举器，用于遍历 implementatio n中的元素；
            </summary>
            <returns>支持在泛型集合上进行简单迭代</returns>
        </member>
        <member name="M:AIO.VariantCollection`2.Add(`0)">
            <summary>
            将某项添加到 implementatio 中。
            </summary>
            <param name="item">要添加到 ICollection(T) 的对象。</param>
            <exception cref="T:System.NotSupportedException">item不是TImplementation类型</exception>
        </member>
        <member name="M:AIO.VariantCollection`2.Clear">
            <summary>
            从implementation中移除所有元素；
            </summary>
        </member>
        <member name="M:AIO.VariantCollection`2.Contains(`0)">
            <summary>
            判断implementation是否包含某个TBase类型的item。
            如果item不是TImplementation类型，则抛出NotSupportedException异常；
            </summary>
            <param name="item">要在 ICollection(T) 中查找的对象。</param>
            <returns>如果在 ICollection(T) 中找到 item，则为 true；否则为 false。</returns>
            <exception cref="T:System.NotSupportedException">item不是TImplementation类型</exception>
        </member>
        <member name="M:AIO.VariantCollection`2.Remove(`0)">
            <summary>
            从implementation中移除指定的TBase类型的item。
            如果item不是TImplementation类型，则抛出NotSupportedException异常；
            </summary>
            <param name="item">要从 ICollection(T) 中移除的对象。</param>
            <returns>如果 item 成功从 ICollection(T) 中移除，则为 true；否则为 false。 如果在原始 ICollection(T) 中没有找到 item，该方法也会返回 false。</returns>
            <exception cref="T:System.NotSupportedException">item不是TImplementation类型</exception>
        </member>
        <member name="M:AIO.VariantCollection`2.CopyTo(`0[],System.Int32)">
            <summary>
            将implementation中的元素复制到一个TBase类型的数组中。
            如果array为null，则抛出ArgumentNullException异常；
            如果arrayIndex小于0，则抛出ArgumentOutOfRangeException异常；
            如果array的长度减去arrayIndex小于Count，则抛出ArgumentException异常。
            </summary>
            <param name="array">作为从 ICollection(T) 复制的元素的目标的一维数组。 数组必须具有从零开始的索引。</param>
            <param name="arrayIndex">array 中从零开始的索引，从此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">array 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex 小于 0。</exception>
            <exception cref="T:System.ArgumentException">源 ICollection(T) 中的元素数大于从 arrayIndex 到数组末尾之间的可用空间。</exception>
        </member>
        <member name="T:AIO.VariantKeyedCollection`3">
            <summary>
            
            </summary>
            <typeparam name="TBase"></typeparam>
            <typeparam name="TImplementation"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:AIO.VariantKeyedCollection`3.#ctor(AIO.IKeyedCollection{`2,`1}@)">
            <inheritdoc />
        </member>
        <member name="P:AIO.VariantKeyedCollection`3.Item(`2)">
            <inheritdoc />
        </member>
        <member name="P:AIO.VariantKeyedCollection`3.implementation">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.VariantKeyedCollection`3.TryGetValue(`2,`0@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.VariantKeyedCollection`3.Contains(`2)">
            <inheritdoc />
        </member>
        <member name="M:AIO.VariantKeyedCollection`3.Remove(`2)">
            <inheritdoc />
        </member>
        <member name="T:AIO.DebugDictionary`2">
            <summary>
            泛型类 DebugDictionary&lt;TKey, TValue&gt;，实现了 IDictionary&lt;TKey, TValue&gt; 接口。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="P:AIO.DebugDictionary`2.Item(System.Object)">
            <inheritdoc cref="P:System.Collections.IDictionary.Item(System.Object)" />
        </member>
        <member name="P:AIO.DebugDictionary`2.IsReadOnly">
            <inheritdoc cref="P:System.Collections.IDictionary.IsReadOnly" />
        </member>
        <member name="P:AIO.DebugDictionary`2.IsFixedSize">
            <inheritdoc cref="P:System.Collections.IDictionary.IsFixedSize" />
        </member>
        <member name="P:AIO.DebugDictionary`2.IsSynchronized">
            <inheritdoc cref="P:System.Collections.ICollection.IsSynchronized" />
        </member>
        <member name="M:AIO.DebugDictionary`2.Contains(System.Object)">
            <inheritdoc cref="M:System.Collections.IDictionary.Contains(System.Object)" />
        </member>
        <member name="P:AIO.DebugDictionary`2.SyncRoot">
            <inheritdoc cref="P:System.Collections.ICollection.SyncRoot" />
        </member>
        <member name="P:AIO.DebugDictionary`2.System#Collections#IDictionary#Values">
            <inheritdoc cref="P:System.Collections.IDictionary.Values" />
        </member>
        <member name="P:AIO.DebugDictionary`2.System#Collections#IDictionary#Keys">
            <inheritdoc cref="P:System.Collections.IDictionary.Keys" />
        </member>
        <member name="M:AIO.DebugDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IDictionary.GetEnumerator" />
        </member>
        <member name="M:AIO.DebugDictionary`2.Remove(System.Object)">
            <inheritdoc cref="M:System.Collections.IDictionary.Remove(System.Object)" />
        </member>
        <member name="M:AIO.DebugDictionary`2.Add(System.Object,System.Object)">
            <inheritdoc cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
        </member>
        <member name="M:AIO.DebugDictionary`2.CopyTo(System.Array,System.Int32)">
            <inheritdoc cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        </member>
        <member name="P:AIO.DebugDictionary`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:AIO.DebugDictionary`2.label">
            <summary>
            标题，用于在调试信息中区分不同的字典对象。
            </summary>
        </member>
        <member name="P:AIO.DebugDictionary`2.debug">
            <summary>
            是否输出调试信息的开关。
            </summary>
        </member>
        <member name="P:AIO.DebugDictionary`2.Count">
            <inheritdoc cref="T:System.Collections.IDictionary"/> />
        </member>
        <member name="P:AIO.DebugDictionary`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:AIO.DebugDictionary`2.Values">
            <inheritdoc />
        </member>
        <member name="M:AIO.DebugDictionary`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.DebugDictionary`2.Clear">
            <summary>
            从字典中移除所有的键值对。
            </summary>
        </member>
        <member name="M:AIO.DebugDictionary`2.Add(`0,`1)">
            <summary>
            向字典中添加一个键值对。
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:AIO.DebugDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.DebugDictionary`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.DebugDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.DebugDictionary`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:AIO.DebugDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:AIO.DebugDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.DebugDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.DebugDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.DebugDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.DebugDictionary`2.Debug(System.String)">
            <summary>
            输出调试信息的私有方法，根据 debug 和 label 属性判断是否输出。
            </summary>
            <param name="message">要输出的信息</param>
        </member>
        <member name="T:AIO.FlexibleDictionary`2">
            <summary>
            泛型类 FlexibleDictionary&lt;TKey, TValue&gt;，继承了 Dictionary&lt;TKey, TValue&gt; 类，并在索引器中实现了更灵活的赋值操作。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="P:AIO.FlexibleDictionary`2.Item(`0)">
            <inheritdoc cref="P:System.Collections.Generic.Dictionary`2.Item(`0)" />
        </member>
        <member name="T:AIO.ReferenceEqualityComparer">
            <summary>
            引用比较
            </summary>
        </member>
        <member name="F:AIO.ReferenceEqualityComparer.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:AIO.ReferenceEqualityComparer.GetHashCode(System.Object)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="T:AIO.ReferenceEqualityComparer`1">
            <summary>
            引用比较
            </summary>
        </member>
        <member name="F:AIO.ReferenceEqualityComparer`1.Instance">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="T:AIO.INotifiedCollectionItem">
            <summary>
            通知集合
            </summary>
        </member>
        <member name="M:AIO.INotifiedCollectionItem.BeforeAdd">
            <summary>
            广播之后添加
            </summary>
        </member>
        <member name="M:AIO.INotifiedCollectionItem.AfterAdd">
            <summary>
            广播之前添加
            </summary>
        </member>
        <member name="M:AIO.INotifiedCollectionItem.BeforeRemove">
            <summary>
            广播之后移除
            </summary>
        </member>
        <member name="M:AIO.INotifiedCollectionItem.AfterRemove">
            <summary>
            广播之前移除
            </summary>
        </member>
        <member name="T:AIO.INotifyCollectionChanged`1">
            <summary>
            通知集合 改变事件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:AIO.INotifyCollectionChanged`1.ItemAdded">
            <summary>
            添加事件
            </summary>
        </member>
        <member name="E:AIO.INotifyCollectionChanged`1.ItemRemoved">
            <summary>
            移除事件
            </summary>
        </member>
        <member name="E:AIO.INotifyCollectionChanged`1.CollectionChanged">
            <summary>
            修改事件
            </summary>
        </member>
        <member name="T:AIO.IPoolable">
            <summary>
            对象池
            </summary>
        </member>
        <member name="M:AIO.IPoolable.New">
            <summary>
            创建
            </summary>
        </member>
        <member name="M:AIO.IPoolable.Free">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:AIO.CRC32Algorithm">
            <summary>
            This is .NET safe implementation of Crc32 algorithm.
            Implementation of CRC-32.
            This class supports several convenient static methods returning the CRC as UInt32.
            </summary>
        </member>
        <member name="M:AIO.CRC32Algorithm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.CRC32Algorithm"/> class.
            </summary>
        </member>
        <member name="M:AIO.CRC32Algorithm.Initialize">
            <summary>
            Resets internal state of the algorithm. Used internally.
            </summary>
        </member>
        <member name="M:AIO.CRC32Algorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends CRC-32 from given buffer
            </summary>
        </member>
        <member name="M:AIO.CRC32Algorithm.HashFinal">
            <summary>
            Computes CRC-32 from <see cref="M:AIO.CRC32Algorithm.HashCore(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:AIO.CRC32Algorithm.Append(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes CRC-32 from multiple buffers.
            Call this method multiple times to chain multiple buffers.
            </summary>
            <param name="initial">
            Initial CRC value for the algorithm. It is zero for the first buffer.
            Subsequent buffers should have their initial value set to CRC value returned by previous call to this method.
            </param>
            <param name="input">Input buffer with data to be checksummed.</param>
            <param name="offset">Offset of the input data within the buffer.</param>
            <param name="length">Length of the input data in the buffer.</param>
            <returns>Accumulated CRC-32 of all buffers processed so far.</returns>
        </member>
        <member name="M:AIO.CRC32Algorithm.Append(System.UInt32,System.Byte[])">
            <summary>
            Computes CRC-32 from multiple buffers.
            Call this method multiple times to chain multiple buffers.
            </summary>
            <param name="initial">
            Initial CRC value for the algorithm. It is zero for the first buffer.
            Subsequent buffers should have their initial value set to CRC value returned by previous call to this method.
            </param>
            <param name="input">Input buffer containing data to be checksummed.</param>
            <returns>Accumulated CRC-32 of all buffers processed so far.</returns>
        </member>
        <member name="M:AIO.CRC32Algorithm.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes CRC-32 from input buffer.
            </summary>
            <param name="input">Input buffer with data to be checksummed.</param>
            <param name="offset">Offset of the input data within the buffer.</param>
            <param name="length">Length of the input data in the buffer.</param>
            <returns>CRC-32 of the data in the buffer.</returns>
        </member>
        <member name="M:AIO.CRC32Algorithm.Compute(System.Byte[])">
            <summary>
            Computes CRC-32 from input buffer.
            </summary>
            <param name="input">Input buffer containing data to be checksummed.</param>
            <returns>CRC-32 of the buffer.</returns>
        </member>
        <member name="M:AIO.CRC32Algorithm.ComputeAndWriteToEnd(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes CRC-32 from input buffer and writes it after end of data (buffer should have 4 bytes reserved space for it). Can be used in conjunction with <see cref="M:AIO.CRC32Algorithm.IsValidWithCrcAtEnd(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
            <param name="input">Input buffer with data to be checksummed.</param>
            <param name="offset">Offset of the input data within the buffer.</param>
            <param name="length">Length of the input data in the buffer.</param>
            <returns>CRC-32 of the data in the buffer.</returns>
        </member>
        <member name="M:AIO.CRC32Algorithm.ComputeAndWriteToEnd(System.Byte[])">
            <summary>
            Computes CRC-32 from input buffer - 4 bytes and writes it as last 4 bytes of buffer. Can be used in conjunction with <see cref="M:AIO.CRC32Algorithm.IsValidWithCrcAtEnd(System.Byte[])"/>
            </summary>
            <param name="input">Input buffer with data to be checksummed.</param>
            <returns>CRC-32 of the data in the buffer.</returns>
        </member>
        <member name="M:AIO.CRC32Algorithm.IsValidWithCrcAtEnd(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Validates correctness of CRC-32 data in source buffer with assumption that CRC-32 data located at end of buffer in reverse bytes order. Can be used in conjunction with <see cref="M:AIO.CRC32Algorithm.ComputeAndWriteToEnd(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
            <param name="input">Input buffer with data to be checksummed.</param>
            <param name="offset">Offset of the input data within the buffer.</param>
            <param name="lengthWithCrc">Length of the input data in the buffer with CRC-32 bytes.</param>
            <returns>Is checksum valid.</returns>
        </member>
        <member name="M:AIO.CRC32Algorithm.IsValidWithCrcAtEnd(System.Byte[])">
            <summary>
            Validates correctness of CRC-32 data in source buffer with assumption that CRC-32 data located at end of buffer in reverse bytes order. Can be used in conjunction with <see cref="M:AIO.CRC32Algorithm.ComputeAndWriteToEnd(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
            <param name="input">Input buffer with data to be checksummed.</param>
            <returns>Is checksum valid.</returns>
        </member>
        <member name="T:AIO.HttpDownload">
            <summary>
            Http下载
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.Urls">
            <summary>
            文件地址
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.SavePath">
            <summary>
            保存地址
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.Client">
            <summary>
            Http客户端
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.MD5Client">
            <summary>
            Http客户端
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.MaxDownloadNum">
            <summary>
            最大下载数量
            </summary>
        </member>
        <member name="F:AIO.HttpDownload.ProgressAction">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="F:AIO.HttpDownload.CompleteAction">
            <summary>
            完成回调
            </summary>
        </member>
        <member name="F:AIO.HttpDownload.ExceptionAction">
            <summary>
            完成回调
            </summary>
        </member>
        <member name="F:AIO.HttpDownload.ClientHandler">
            <summary>
            Http头信息
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.#ctor(System.Collections.Generic.IList{System.String}@,System.String@)">
            <summary>
            初始化
            </summary>
            <param name="downloadUrls">下载地址</param>
            <param name="downloadPath">保存地址</param>
        </member>
        <member name="M:AIO.HttpDownload.#ctor(System.Collections.Generic.IList{System.String}@,System.String@,System.Net.Http.HttpClientHandler@)">
            <summary>
            初始化
            </summary>
            <param name="downloadUrls">下载地址</param>
            <param name="downloadPath">保存地址</param>
            <param name="handler">表头参数</param>
        </member>
        <member name="M:AIO.HttpDownload.#ctor(System.String@,System.String@)">
            <summary>
            初始化
            </summary>
            <param name="downloadUrls">下载地址</param>
            <param name="downloadPath">保存地址</param>
        </member>
        <member name="M:AIO.HttpDownload.Async(System.Int32)">
            <summary>
            开启异步下载
            </summary>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:AIO.HttpDownload.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.SetDownloadNum(System.Int32@)">
            <summary>
            设置最大下载数量
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.OnComplete(System.Action{AIO.HttpDownloadInfo}@)">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.OnException(System.Action{AIO.HttpDownloadInfo}@)">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.OnProgress(System.Action{AIO.HttpDownloadInfo}@)">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.GetAwaiter">
            <summary>
            获取异步等待器
            </summary>
        </member>
        <member name="T:AIO.HttpDownloadInfo">
            <summary>
            文件下载信息
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.URL">
            <summary>
            下载地址
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.SavePath">
            <summary>
            保存路径
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.FullPath">
            <summary>
            保存路径
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Name">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.DownloadedSize">
            <summary>
            下载文件大小
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Exception">
            <summary>
            下载异常信息
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Time">
            <summary>
            下载总时间
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.IsResume">
            <summary>
            是否为断点续传
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.MD5">
            <summary>
            文件MD5
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Stopwatch">
            <summary>
            测量时间
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Response">
            <summary>
            请求体
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.CancelToken">
            <summary>
            取消
            </summary>
        </member>
        <member name="M:AIO.HttpDownloadInfo.#ctor(System.String@,System.String@,System.String@)">
            <summary>
            下载信息
            </summary>
            <param name="url">下载地址</param>
            <param name="savePath">保存文件夹</param>
            <param name="name">文件名</param>
        </member>
        <member name="M:AIO.HttpDownloadInfo.Cancel">
            <summary>
            取消下载
            </summary>
        </member>
        <member name="M:AIO.HttpDownloadInfo.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:AIO.StringBlock">
            <summary>
            字符串区块 字符单位
            </summary>
        </member>
        <member name="P:AIO.StringBlock.Top">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIO.StringBlock.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIO.StringBlock.IgnoreChinese">
            <summary>
            忽略中文
            </summary>
        </member>
        <member name="M:AIO.StringBlock.#ctor(System.Collections.Generic.IList{System.Char},System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="units"></param>
            <param name="width"></param>
            <param name="ignoreChinese"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AIO.StringBlock.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="units"></param>
            <param name="width"></param>
            <param name="ignoreChinese"></param>
        </member>
        <member name="M:AIO.StringBlock.Convert(System.String[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringBlock.Convert(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:AIO.Define">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_IDENTICARDID">
            <summary>
            maximum length of identicardid
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_NAME">
            <summary>
            maximum length of name
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_COUNTRY">
            <summary>
            maximum length of country
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_NATION">
            <summary>
            maximum length of nation
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_BIRTHDAY">
            <summary>
            maximum length of birthday
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_ADDRESS">
            <summary>
            maximum length of address
            </summary>
        </member>
        <member name="T:AssemblyInfo">
            <summary>
            程序集信息
            </summary>
        </member>
        <member name="F:AssemblyInfo.KEY">
            <summary>
            密钥信息
            </summary>
        </member>
        <member name="F:AssemblyInfo.PublicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="F:AssemblyInfo.Token">
            <summary>
            公钥Token
            </summary>
        </member>
        <member name="F:AssemblyInfo.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:AssemblyInfo.FileVersion">
            <summary>
            指示编译器使用 Win32 文件版本资源的特定版本号。 Win32 文件版本不需要与程序集的版本号相同。
            </summary>
        </member>
        <member name="F:AssemblyInfo.KeyFile">
            <summary>
            密钥位置
            </summary>
        </member>
        <member name="F:AssemblyInfo.KeyName">
            <summary>
            密钥位置
            </summary>
        </member>
        <member name="F:AssemblyInfo.Company">
            <summary>
            作者
            </summary>
        </member>
        <member name="F:AssemblyInfo.Copyright">
            <summary>
            程序集属性
            </summary>
        </member>
        <member name="F:AssemblyInfo.Culture">
            <summary>
            支持的区域性
            </summary>
        </member>
        <member name="T:AHandle">
            <summary>
            处理器帮助类
            </summary>
        </member>
        <member name="T:AHandle.FTP">
            <summary>
            FTP 处理器
            </summary>
        </member>
        <member name="M:AHandle.FTP.Create(System.String,System.String,System.String,System.String)">
            <summary>
            创建HTTP处理器
            </summary>
            <param name="serverIP">服务器IP</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <param name="remotePath">远端默认跟文件夹</param>
            <returns>处理器</returns>
        </member>
        <member name="T:AHandle.FTP.ListType">
            <summary>
            获取列表类型
            </summary>
        </member>
        <member name="F:AHandle.FTP.ListType.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="F:AHandle.FTP.ListType.Directory">
            <summary>
            文件夹
            </summary>
        </member>
        <member name="F:AHandle.FTP.ListType.ALL">
            <summary>
            文件和文件夹
            </summary>
        </member>
        <member name="P:AHandle.FTP.URI">
            <summary>
            指定FTP连接成功后的当前目录, 如果不指定即默认为根目录
            </summary>
        </member>
        <member name="P:AHandle.FTP.ServerIP">
            <summary>
            FTP服务器IP地址
            </summary>
        </member>
        <member name="P:AHandle.FTP.UserName">
            <summary>
            FTP用户名
            </summary>
        </member>
        <member name="P:AHandle.FTP.Password">
            <summary>
            FTP密码
            </summary>
        </member>
        <member name="P:AHandle.FTP.RemotePath">
            <summary>
            FTP服务器上的目录
            </summary>
        </member>
        <member name="P:AHandle.FTP.TimeOut">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:AHandle.FTP.BufferSize">
            <summary>
            缓存大小
            </summary>
        </member>
        <member name="M:AHandle.FTP.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="serverIP">服务器IP</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <param name="remotePath">远端默认跟文件夹</param>
        </member>
        <member name="M:AHandle.FTP.InitAsync">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AHandle.FTP.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AHandle.FTP.ToString">
            <inheritdoc />
        </member>
        <member name="M:AHandle.FTP.Move(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="currentRemotePath">当前远端路径</param>
            <param name="newRemoteName">新远端路径</param>
        </member>
        <member name="M:AHandle.FTP.MoveAsync(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="currentRemotePath">当前远端路径</param>
            <param name="newRemoteName">新远端路径</param>
        </member>
        <member name="M:AHandle.FTP.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="remotePath">远端文件路径</param>
        </member>
        <member name="M:AHandle.FTP.DeleteFileAsync(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="remotePath">远端文件路径</param>
        </member>
        <member name="M:AHandle.FTP.DeleteDir(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="remotePath">远端文件夹路径</param>
        </member>
        <member name="M:AHandle.FTP.DeleteDirAsync(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="remotePath">远端文件夹路径</param>
        </member>
        <member name="M:AHandle.FTP.CreateDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="remotePath">远端文件夹路径</param>
        </member>
        <member name="M:AHandle.FTP.CreateDirAsync(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="remotePath">远端文件夹路径</param>
        </member>
        <member name="M:AHandle.FTP.UploadFile(System.String,System.String,IProgressEvent)">
            <summary>
            上传文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="remotePath">远端路径</param>
            <param name="iEvent">回调</param>
        </member>
        <member name="M:AHandle.FTP.UploadFile(System.String,IProgressEvent)">
            <summary>
            上传文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="iEvent">回调</param>
        </member>
        <member name="M:AHandle.FTP.UploadFileAsync(System.String,System.String,IProgressEvent)">
            <summary>
            上传文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="remotePath">远端路径</param>
            <param name="iEvent">回调</param>
        </member>
        <member name="M:AHandle.FTP.UploadFileAsync(System.String,IProgressEvent)">
            <summary>
            上传文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="iEvent">回调</param>
        </member>
        <member name="M:AHandle.FTP.UploadDir(System.String,System.String,IProgressEvent,System.IO.SearchOption,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="remotePath">远端路径</param>
            <param name="iEvent">回调</param>
            <param name="searchPattern">搜索字段</param>
            <param name="searchOption">搜索模式</param>
        </member>
        <member name="M:AHandle.FTP.UploadDir(System.String,IProgressEvent,System.IO.SearchOption,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="iEvent">回调</param>
            <param name="searchPattern">搜索字段</param>
            <param name="searchOption">搜索模式</param>
        </member>
        <member name="M:AHandle.FTP.UploadDirAsync(System.String,System.String,IProgressEvent,System.IO.SearchOption,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="remotePath">远端路径</param>
            <param name="iEvent">回调</param>
            <param name="searchPattern">搜索字段</param>
            <param name="searchOption">搜索模式</param>
        </member>
        <member name="M:AHandle.FTP.UploadDirAsync(System.String,IProgressEvent,System.IO.SearchOption,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="iEvent">回调</param>
            <param name="searchPattern">搜索字段</param>
            <param name="searchOption">搜索模式</param>
        </member>
        <member name="M:AHandle.FTP.DownloadFile(System.String,System.String,IProgressEvent,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="remotePath">远端路径</param>
            <param name="iEvent">回调</param>
            <param name="isOverWrite">是否重写</param>
        </member>
        <member name="M:AHandle.FTP.DownloadFileAsync(System.String,System.String,IProgressEvent,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="remotePath">远端路径</param>
            <param name="iEvent">回调</param>
            <param name="isOverWrite">是否重写</param>
        </member>
        <member name="M:AHandle.FTP.DownloadDir(System.String,System.String,IProgressEvent,System.IO.SearchOption,System.String,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="remotePath">远端路径</param>
            <param name="iEvent">回调</param>
            <param name="searchPattern">搜索字段</param>
            <param name="searchOption">搜索模式</param>
            <param name="isOverWrite">是否重写</param>
        </member>
        <member name="M:AHandle.FTP.DownloadDirAsync(System.String,System.String,IProgressEvent,System.IO.SearchOption,System.String,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="remotePath">远端路径</param>
            <param name="iEvent">回调</param>
            <param name="searchPattern">搜索字段</param>
            <param name="searchOption">搜索模式</param>
            <param name="isOverWrite">是否重写</param>
        </member>
        <member name="M:AHandle.FTP.DownloadDir(System.String,IProgressEvent,System.IO.SearchOption,System.String,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="iEvent">回调</param>
            <param name="searchPattern">搜索字段</param>
            <param name="searchOption">搜索模式</param>
            <param name="isOverWrite">是否重写</param>
        </member>
        <member name="M:AHandle.FTP.DownloadDirAsync(System.String,IProgressEvent,System.IO.SearchOption,System.String,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="localPath">本地文件</param>
            <param name="iEvent">回调</param>
            <param name="searchPattern">搜索字段</param>
            <param name="searchOption">搜索模式</param>
            <param name="isOverWrite">是否重写</param>
        </member>
        <member name="M:AHandle.FTP.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="remotePath">远端路径</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:AHandle.FTP.GetFileSizeAsync(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="remotePath">远端路径</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:AHandle.FTP.GetList(System.String,System.String)">
            <summary>
            获取文件或文件夹列表
            </summary>
            <param name="remotePath">远端路径</param>
            <param name="keyword">获取指定文件夹 空时获取全部 当获取类型为全部时 则不生效</param>
            <returns>文件列表</returns>
        </member>
        <member name="M:AHandle.FTP.GetListAsync(System.String,System.String)">
            <summary>
            获取文件夹列表
            </summary>
            <param name="remotePath">远端路径</param>
            <param name="keyword">获取指定文件夹 空时获取全部 当获取类型为全部时 则不生效</param>
            <returns>文件列表</returns>
        </member>
        <member name="M:AHandle.FTP.GetListFile(System.String,System.String)">
            <summary>
            获取文件列表
            </summary>
            <param name="remotePath">远端路径</param>
            <param name="keyword">获取指定文件夹 空时获取全部 当获取类型为全部时 则不生效</param>
            <returns>文件列表</returns>
        </member>
        <member name="M:AHandle.FTP.GetListFileAsync(System.String,System.String)">
            <summary>
            获取目录列表
            </summary>
            <param name="remotePath">远端路径</param>
            <param name="keyword">获取指定文件夹 空时获取全部 当获取类型为全部时 则不生效</param>
            <returns>文件列表</returns>
        </member>
        <member name="M:AHandle.FTP.GetListDir(System.String,System.String)">
            <summary>
            获取文件列表
            </summary>
            <param name="remotePath">远端路径</param>
            <param name="keyword">获取指定文件夹 空时获取全部 当获取类型为全部时 则不生效</param>
            <returns>文件列表</returns>
        </member>
        <member name="M:AHandle.FTP.GetListDirAsync(System.String,System.String)">
            <summary>
            获取文件夹列表
            </summary>
            <param name="remotePath">远端路径</param>
            <param name="keyword">获取指定文件夹 空时获取全部 当获取类型为全部时 则不生效</param>
            <returns>文件列表</returns>
        </member>
        <member name="M:AHandle.FTP.Check(System.String)">
            <summary>
            检查FTP是否有效
            </summary>
            <returns>Ture:有效 False:无效</returns>
        </member>
        <member name="M:AHandle.FTP.CheckAsync(System.String)">
            <summary>
            检查FTP是否有效
            </summary>
            <returns>Ture:有效 False:无效</returns>
        </member>
        <member name="M:AHandle.FTP.CheckFile(System.String)">
            <summary>
            检查文件是否有效
            </summary>
            <returns>Ture:有效 False:无效</returns>
        </member>
        <member name="M:AHandle.FTP.CheckFileAsync(System.String)">
            <summary>
            检查文件是否有效
            </summary>
            <returns>Ture:有效 False:无效</returns>
        </member>
        <member name="M:AHandle.FTP.CheckDir(System.String)">
            <summary>
            检查文件夹是否有效
            </summary>
            <returns>Ture:有效 False:无效</returns>
        </member>
        <member name="M:AHandle.FTP.CheckDirAsync(System.String)">
            <summary>
            检查文件夹是否有效
            </summary>
            <returns>Ture:有效 False:无效</returns>
        </member>
        <member name="M:AHandle.FTP.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:AHandle.HTTP">
            <summary>
            HTTP 处理器
            </summary>
        </member>
        <member name="M:AHandle.HTTP.Create(System.String)">
            <summary>
            创建HTTP处理器
            </summary>
            <param name="remoteURL">远端路径</param>
            <returns>处理器</returns>
        </member>
        <member name="P:AHandle.HTTP.RemoteURL">
            <summary>
            远端路径
            </summary>
        </member>
        <member name="P:AHandle.HTTP.TimeOut">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:AHandle.HTTP.BufferSize">
            <summary>
            缓存大小
            </summary>
        </member>
        <member name="P:AHandle.HTTP.Cookie">
            <summary>
            Cookie
            </summary>
        </member>
        <member name="P:AHandle.HTTP.ContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:AHandle.HTTP.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="M:AHandle.HTTP.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="remoteURL">远端跟路径</param>
        </member>
        <member name="M:AHandle.HTTP.Delete(System.String)">
            <summary>
            请求删除指定的资源
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Delete(System.String,System.Byte[])">
            <summary>
            请求删除指定的资源
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Delete(System.String,System.String)">
            <summary>
            请求删除指定的资源
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.DeleteAsync(System.String)">
            <summary>
            请求删除指定的资源
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.DeleteAsync(System.String,System.Byte[])">
            <summary>
            请求删除指定的资源
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.DeleteAsync(System.String,System.String)">
            <summary>
            请求删除指定的资源
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Download(System.String,System.String,AProgress,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="savePath">保存文件夹路径</param>
            <param name="remotePath">远端需要下载文件路径</param>
            <param name="aProgress">进度回调</param>
            <param name="isOverWrite">是否覆盖</param>
        </member>
        <member name="M:AHandle.HTTP.Download(System.String,System.Collections.Generic.IEnumerable{System.String},AProgress,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="savePath">保存文件夹路径</param>
            <param name="remotePath">远端需要下载文件路径</param>
            <param name="aProgress">进度回调</param>
            <param name="isOverWrite">是否覆盖</param>
        </member>
        <member name="M:AHandle.HTTP.DownloadAsync(System.String,System.String,AProgress,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="savePath">保存文件夹路径</param>
            <param name="remotePath">远端需要下载文件路径</param>
            <param name="aProgress">进度回调</param>
            <param name="isOverWrite">是否覆盖</param>
        </member>
        <member name="M:AHandle.HTTP.DownloadAsync(System.String,System.Collections.Generic.IEnumerable{System.String},AProgress,System.Boolean)">
            <summary>
            下载文件
            </summary>
            <param name="savePath">保存文件夹路径</param>
            <param name="remotePath">远端需要下载文件路径</param>
            <param name="aProgress">进度回调</param>
            <param name="isOverWrite">是否覆盖</param>
        </member>
        <member name="M:AHandle.HTTP.Put(System.String,System.Byte[])">
            <summary>
            向指定资源位置上传其最新内容
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Put(System.String,System.String)">
            <summary>
            向指定资源位置上传其最新内容
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.PutAsync(System.String,System.Byte[])">
            <summary>
            向指定资源位置上传其最新内容
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.PutAsync(System.String,System.String)">
            <summary>
            向指定资源位置上传其最新内容
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Trace(System.String)">
            <summary>
            回显服务器收到的请求
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Trace(System.String,System.Byte[])">
            <summary>
            回显服务器收到的请求
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Trace(System.String,System.String)">
            <summary>
            回显服务器收到的请求
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.TraceAsync(System.String)">
            <summary>
            回显服务器收到的请求
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.TraceAsync(System.String,System.Byte[])">
            <summary>
            回显服务器收到的请求
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.TraceAsync(System.String,System.String)">
            <summary>
            回显服务器收到的请求
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Options(System.String)">
            <summary>
            返回服务器正对特定资源所支持的HTTP请求方法
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Options(System.String,System.Byte[])">
            <summary>
            返回服务器正对特定资源所支持的HTTP请求方法
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Options(System.String,System.String)">
            <summary>
            返回服务器正对特定资源所支持的HTTP请求方法
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.OptionsAsync(System.String)">
            <summary>
            返回服务器正对特定资源所支持的HTTP请求方法
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.OptionsAsync(System.String,System.Byte[])">
            <summary>
            返回服务器正对特定资源所支持的HTTP请求方法
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.OptionsAsync(System.String,System.String)">
            <summary>
            返回服务器正对特定资源所支持的HTTP请求方法
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Head(System.String)">
            <summary>
            请求获取特定的资源的响应消息报告
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Head(System.String,System.Byte[])">
            <summary>
            请求获取特定的资源的响应消息报告
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Head(System.String,System.String)">
            <summary>
            请求获取特定的资源的响应消息报告
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.HeadAsync(System.String)">
            <summary>
            请求获取特定的资源的响应消息报告
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.HeadAsync(System.String,System.Byte[])">
            <summary>
            请求获取特定的资源的响应消息报告
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.HeadAsync(System.String,System.String)">
            <summary>
            请求获取特定的资源的响应消息报告
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Connect(System.String)">
            <summary>
            预留给能够将连接改为管道方式的代理服务器
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Connect(System.String,System.Byte[])">
            <summary>
            预留给能够将连接改为管道方式的代理服务器
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Connect(System.String,System.String)">
            <summary>
            预留给能够将连接改为管道方式的代理服务器
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.ConnectAsync(System.String)">
            <summary>
            预留给能够将连接改为管道方式的代理服务器
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.ConnectAsync(System.String,System.Byte[])">
            <summary>
            预留给能够将连接改为管道方式的代理服务器
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.ConnectAsync(System.String,System.String)">
            <summary>
            预留给能够将连接改为管道方式的代理服务器
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Get">
            <summary>
            请求获取特定的内容
            </summary>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.GetStream">
            <summary>
            请求获取特定的内容
            </summary>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Get(System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.GetStream(System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.GetAsync">
            <summary>
            请求获取特定的内容
            </summary>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.GetStreamAsync">
            <summary>
            请求获取特定的内容
            </summary>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.GetAsync(System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.GetStreamAsync(System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Post(System.String)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Post(System.String,System.Byte[])">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Post(System.String,System.String)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.PostAsync(System.String)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.PostAsync(System.String,System.Byte[])">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.PostAsync(System.String,System.String)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.PostStream(System.String)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.PostStream(System.String,System.Byte[])">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.PostStream(System.String,System.String)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.PostStreamAsync(System.String)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.PostStreamAsync(System.String,System.Byte[])">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.PostStreamAsync(System.String,System.String)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteRelativePath">远端相对路径</param>
            <param name="data">数据</param>
            <returns>服务器返回内容</returns>
        </member>
        <member name="M:AHandle.HTTP.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IProgressEvent">
            <summary>
            进度回调参数
            </summary>
        </member>
        <member name="P:IProgressEvent.OnProgress">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="P:IProgressEvent.OnComplete">
            <summary>
            完成回调
            </summary>
        </member>
        <member name="P:IProgressEvent.OnError">
            <summary>
            错误回调
            </summary>
        </member>
        <member name="T:AProgressEvent">
            <summary>
            进度回调参数
            </summary>
        </member>
        <member name="P:AProgressEvent.OnProgress">
            <inheritdoc />
        </member>
        <member name="P:AProgressEvent.OnComplete">
            <inheritdoc />
        </member>
        <member name="P:AProgressEvent.OnError">
            <inheritdoc />
        </member>
        <member name="T:IProgressArg">
            <summary>
            进度参数
            </summary>
        </member>
        <member name="P:IProgressArg.Total">
            <summary>
            总值
            </summary>
        </member>
        <member name="P:IProgressArg.Current">
            <summary>
            当前值
            </summary>
        </member>
        <member name="P:IProgressArg.CurrentInfo">
            <summary>
            当前信息
            </summary>
        </member>
        <member name="T:IProgressHandle">
            <summary>
            进度参数
            </summary>
        </member>
        <member name="T:AProgress">
            <summary>
            进度参数
            </summary>
        </member>
        <member name="F:AProgress.IsCancel">
            <summary>
            是否取消
            </summary>
        </member>
        <member name="M:AProgress.#ctor(IProgressEvent)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:AProgress.CancellationToken">
            <summary>
            取消令牌
            </summary>
        </member>
        <member name="P:AProgress.Total">
            <summary>
            总值
            </summary>
        </member>
        <member name="P:AProgress.Current">
            <summary>
            当前值
            </summary>
        </member>
        <member name="P:AProgress.CurrentInfo">
            <summary>
            当前信息
            </summary>
        </member>
        <member name="P:AProgress.OnProgress">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="P:AProgress.OnComplete">
            <summary>
            完成回调
            </summary>
        </member>
        <member name="P:AProgress.OnError">
            <summary>
            错误回调
            </summary>
        </member>
        <member name="M:AProgress.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="M:AProgress.Dispose">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="T:IProgressInfo">
            <summary>
            进度信息
            </summary>
        </member>
        <member name="P:IProgressInfo.CurrentStr">
            <summary>
            当前大小
            </summary>
        </member>
        <member name="P:IProgressInfo.TotalStr">
            <summary>
            总大小
            </summary>
        </member>
        <member name="P:IProgressInfo.Total">
            <summary>
            总值
            </summary>
        </member>
        <member name="P:IProgressInfo.Current">
            <summary>
            当前值
            </summary>
        </member>
        <member name="P:IProgressInfo.Progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="P:IProgressInfo.CurrentInfo">
            <summary>
            当前名称
            </summary>
        </member>
        <member name="M:IProgressInfo.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:ProgressInfo">
            <summary>
            进度信息
            </summary>
        </member>
        <member name="P:ProgressInfo.CurrentStr">
            <inheritdoc />
        </member>
        <member name="P:ProgressInfo.TotalStr">
            <inheritdoc />
        </member>
        <member name="P:ProgressInfo.Total">
            <summary>
            总值
            </summary>
        </member>
        <member name="P:ProgressInfo.Current">
            <summary>
            当前值
            </summary>
        </member>
        <member name="P:ProgressInfo.Progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="P:ProgressInfo.CurrentInfo">
            <summary>
            当前名称
            </summary>
        </member>
        <member name="M:ProgressInfo.IProgressInfo#ToString">
            <inheritdoc />
        </member>
        <member name="M:ProgressInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:AHelper">
            <summary>
            Utils 工具库
            </summary>
        </member>
        <member name="T:AHelper.Encrypt">
            <summary>
            Encrypt 加密
            </summary>
        </member>
        <member name="M:AHelper.Encrypt.HmacSHA256ToBase64(System.String,System.String,System.Text.Encoding)">
            <summary>
            HmacSHA256 单向散列函数
            </summary>
            <param name="secret">签名</param>
            <param name="signKey">签名字符串</param>
            <param name="encoding">编码</param>
            <returns>签名</returns>
        </member>
        <member name="M:AHelper.Encrypt.HmacSHA256(System.String,System.String,System.Text.Encoding)">
            <summary>
            HmacSHA256 单向散列函数
            </summary>
            <param name="secret">签名</param>
            <param name="signKey">签名字符串</param>
            <param name="encoding">编码</param>
            <returns>签名</returns>
        </member>
        <member name="T:AHelper.FileID">
            <summary>
            Unity File ID MD4 算法
            </summary>
        </member>
        <member name="M:AHelper.FileID.Compute``1(``0)">
            <summary>
            计算类型的 FileID
            </summary>
            <param name="v">类型</param>
            <returns>fileid</returns>
        </member>
        <member name="M:AHelper.FileID.Compute(System.Type)">
            <summary>
            计算类型的 FileID
            </summary>
            <param name="type">类型</param>
            <returns>fileid</returns>
        </member>
        <member name="M:AHelper.FileID.Compute``1">
            <summary>
            计算类型的 FileID
            </summary>
            <returns>fileid</returns>
        </member>
        <member name="T:AHelper.Net">
            <summary>
            网络 工具类
            </summary>
            <summary>
            网络 工具类
            </summary>
            <summary>
            网络 工具类
            </summary>
        </member>
        <member name="T:AHelper.Net.FTP">
            <summary>
            FTP
            </summary>
        </member>
        <member name="M:AHelper.Net.FTP.Check(System.String,System.String,System.String,System.UInt16)">
            <summary>
            判断FTP连接
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
            <returns>Ture:有效 False:无效</returns>
        </member>
        <member name="M:AHelper.Net.FTP.CheckAsync(System.String,System.String,System.String,System.UInt16)">
            <summary>
            判断FTP连接
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
            <returns>Ture:有效 False:无效</returns>
        </member>
        <member name="M:AHelper.Net.FTP.CheckFile(System.String,System.String,System.String,System.UInt16)">
            <summary>
            判断FTP路径是否为文件
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
            <returns>Ture:是 False:不是</returns>
        </member>
        <member name="M:AHelper.Net.FTP.CheckFileAsync(System.String,System.String,System.String,System.UInt16)">
            <summary>
            判断FTP路径是否为文件
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
            <returns>Ture:是 False:不是</returns>
        </member>
        <member name="M:AHelper.Net.FTP.CheckDir(System.String,System.String,System.String,System.UInt16)">
            <summary>
            判断FTP路径是否为文件夹
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
            <returns>Ture:是 False:不是</returns>
        </member>
        <member name="M:AHelper.Net.FTP.CheckDirAsync(System.String,System.String,System.String,System.UInt16)">
            <summary>
            判断FTP路径是否为文件夹
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
            <returns>Ture:是 False:不是</returns>
        </member>
        <member name="M:AHelper.Net.FTP.CreateDir(System.String,System.String,System.String,System.UInt16)">
            <summary>
            创建文件夹
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
        </member>
        <member name="M:AHelper.Net.FTP.CreateDirAsync(System.String,System.String,System.String,System.UInt16)">
            <summary>
            创建文件夹
            </summary>
            <param name="remote">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
        </member>
        <member name="M:AHelper.Net.FTP.ReName(System.String,System.String,System.String,System.String,System.String,System.UInt16)">
            <summary>
            重命名文件夹
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="currentName">当前名称</param>
            <param name="newName">新名称</param>
            <param name="timeout">超时</param>
        </member>
        <member name="M:AHelper.Net.FTP.ReNameAsync(System.String,System.String,System.String,System.String,System.String,System.UInt16)">
            <summary>
            重命名文件夹
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="currentName">当前名称</param>
            <param name="newName">新名称</param>
            <param name="timeout">超时</param>
        </member>
        <member name="M:AHelper.Net.FTP.Move(System.String,System.String,System.String,System.String,System.String,System.UInt16)">
            <summary>
            移动文件
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="currentName">当前名称</param>
            <param name="newName">新名称</param>
            <param name="timeout">超时</param>
        </member>
        <member name="M:AHelper.Net.FTP.MoveAsync(System.String,System.String,System.String,System.String,System.String,System.UInt16)">
            <summary>
            移动文件
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="currentName">当前名称</param>
            <param name="newName">新名称</param>
            <param name="timeout">超时</param>
        </member>
        <member name="M:AHelper.Net.FTP.DeleteFile(System.String,System.String,System.String,System.UInt16)">
            <summary>
            FTP指定删除文件
            </summary>
            <param name="remote">网址</param>
            <param name="user">账号</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
            <exception cref="T:System.Net.WebException">异常信息</exception>
            <returns>删除返回信息</returns>
        </member>
        <member name="M:AHelper.Net.FTP.DeleteFileAsync(System.String,System.String,System.String,System.UInt16)">
            <summary>
            FTP指定删除文件
            </summary>
            <param name="remote">网址</param>
            <param name="user">账号</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
            <exception cref="T:System.Exception">异常信息</exception>
            <returns>删除返回信息</returns>
        </member>
        <member name="M:AHelper.Net.FTP.DeleteDir(System.String,System.String,System.String,System.UInt16)">
            <summary>
            FTP指定删除文件夹
            </summary>
            <param name="remote">网址</param>
            <param name="user">账号</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
            <exception cref="T:System.Net.WebException">异常信息</exception>
            <returns>删除状态</returns>
        </member>
        <member name="M:AHelper.Net.FTP.DeleteDirAsync(System.String,System.String,System.String,System.UInt16)">
            <summary>
            FTP指定删除文件夹
            </summary>
            <param name="remote">网址</param>
            <param name="user">账号</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
            <exception cref="T:System.Net.WebException">异常信息</exception>
            <returns>删除状态</returns>
        </member>
        <member name="M:AHelper.Net.FTP.DownloadFile(System.String,System.String,System.String,System.String,IProgressEvent,System.Boolean,System.UInt16,System.Int32)">
            <summary>
            FTP下载文件
            </summary>
            <param name="uri">路径</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="localPath">本地文件路径</param>
            <param name="iEvent">回调</param>
            <param name="overwrite">是否覆盖</param>
            <param name="timeout">超时</param>
            <param name="bufferSize">下载缓存大小</param>
        </member>
        <member name="M:AHelper.Net.FTP.DownloadFileAsync(System.String,System.String,System.String,System.String,IProgressEvent,System.Boolean,System.UInt16,System.Int32)">
            <summary>
            FTP下载文件
            </summary>
            <param name="uri">路径</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="localPath">本地文件路径</param>
            <param name="iEvent">回调</param>
            <param name="overwrite">是否覆盖</param>
            <param name="timeout">超时</param>
            <param name="bufferSize">下载缓存大小</param>
        </member>
        <member name="M:AHelper.Net.FTP.DownloadDir(System.String,System.String,System.String,System.String,IProgressEvent,System.IO.SearchOption,System.String,System.Boolean,System.UInt16,System.Int32)">
            <summary>
            FTP下载文件夹
            </summary>
            <param name="uri">路径</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="localPath">本地文件路径</param>
            <param name="iEvent">回调</param>
            <param name="pattern">搜索过滤</param>
            <param name="option">搜索模式</param>
            <param name="overwrite">是否覆盖</param>
            <param name="timeout">超时</param>
            <param name="bufferSize">下载缓存大小</param>
        </member>
        <member name="M:AHelper.Net.FTP.DownloadDirAsync(System.String,System.String,System.String,System.String,IProgressEvent,System.IO.SearchOption,System.String,System.Boolean,System.UInt16,System.Int32)">
            <summary>
            FTP下载文件夹
            </summary>
            <param name="uri">路径</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="localPath">本地文件路径</param>
            <param name="iEvent">回调</param>
            <param name="pattern">搜索过滤</param>
            <param name="option">搜索模式</param>
            <param name="overwrite">是否覆盖</param>
            <param name="timeout">超时</param>
            <param name="bufferSize">下载缓存大小</param>
        </member>
        <member name="M:AHelper.Net.FTP.GetDownloadList(System.String,System.String,System.String,System.IO.SearchOption,System.String,System.UInt16,System.String)">
            <summary>
            获取文件下载列表
            </summary>
        </member>
        <member name="M:AHelper.Net.FTP.GetDownloadListAsync(System.String,System.String,System.String,System.IO.SearchOption,System.String,System.UInt16,System.String)">
            <summary>
            获取文件下载列表
            </summary>
        </member>
        <member name="M:AHelper.Net.FTP.GetFileSize(System.String,System.String,System.String,System.UInt16)">
            <summary>
            获取FTP文件大小
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
            <returns>大小</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:AHelper.Net.FTP.GetFileSizeAsync(System.String,System.String,System.String,System.UInt16)">
            <summary>
            获取FTP文件大小
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="timeout">超时</param>
            <returns>大小</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:AHelper.Net.FTP.GetRemoteListFile(System.String,System.String,System.String,System.String,System.UInt16)">
            <summary>
            获取文件或文件夹列表
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="keyword">
            获取包含Keyword的文件或文件夹，若要list所有文件或文件夹，则该参数为空
            若listType=FileAndFolder，则该参数无效
            </param>
            <param name="timeout">超时</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:AHelper.Net.FTP.GetRemoteListDir(System.String,System.String,System.String,System.String,System.UInt16)">
            <summary>
            获取文件或文件夹列表
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="keyword">
            获取包含Keyword的文件或文件夹，若要list所有文件或文件夹，则该参数为空
            若listType=FileAndFolder，则该参数无效
            </param>
            <param name="timeout">超时</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:AHelper.Net.FTP.GetRemoteList(System.String,System.String,System.String,System.String,System.UInt16)">
            <summary>
            获取文件或文件夹列表
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="keyword">
            获取包含Keyword的文件或文件夹，若要list所有文件或文件夹，则该参数为空
            若listType=FileAndFolder，则该参数无效
            </param>
            <param name="timeout">超时</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:AHelper.Net.FTP.GetRemoteList(System.String,System.String,System.String,AHandle.FTP.ListType,System.String,System.UInt16)">
            <summary>
            获取文件或文件夹列表
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="type">
            1:获取文件列表
            2:获取文件夹列表
            3:获取文件和文件夹列表
            </param>
            <param name="keyword">
            获取包含Keyword的文件或文件夹，若要list所有文件或文件夹，则该参数为空
            若listType=FileAndFolder，则该参数无效
            </param>
            <param name="timeout">超时</param>
            <returns></returns>
            <exception cref="T:System.Net.WebException"></exception>
        </member>
        <member name="M:AHelper.Net.FTP.GetRemoteListFileAsync(System.String,System.String,System.String,System.String,System.UInt16)">
            <summary>
            获取文件或文件夹列表
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="keyword">
            获取包含Keyword的文件或文件夹，若要list所有文件或文件夹，则该参数为空
            若listType=FileAndFolder，则该参数无效
            </param>
            <param name="timeout">超时</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:AHelper.Net.FTP.GetRemoteListDirAsync(System.String,System.String,System.String,System.String,System.UInt16)">
            <summary>
            获取文件或文件夹列表
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="keyword">
            获取包含Keyword的文件或文件夹，若要list所有文件或文件夹，则该参数为空
            若listType=FileAndFolder，则该参数无效
            </param>
            <param name="timeout">超时</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:AHelper.Net.FTP.GetRemoteListAsync(System.String,System.String,System.String,System.String,System.UInt16)">
            <summary>
            获取文件或文件夹列表
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="keyword">
            获取包含Keyword的文件或文件夹，若要list所有文件或文件夹，则该参数为空
            若listType=FileAndFolder，则该参数无效
            </param>
            <param name="timeout">超时</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:AHelper.Net.FTP.GetRemoteListAsync(System.String,System.String,System.String,AHandle.FTP.ListType,System.String,System.UInt16)">
            <summary>
            获取文件或文件夹列表
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="type">
            1:获取文件列表
            2:获取文件夹列表
            3:获取文件和文件夹列表
            </param>
            <param name="keyword">
            获取包含Keyword的文件或文件夹，若要list所有文件或文件夹，则该参数为空
            若listType=FileAndFolder，则该参数无效
            </param>
            <param name="timeout">超时</param>
            <returns></returns>
            <exception cref="T:System.Net.WebException"></exception>
        </member>
        <member name="M:AHelper.Net.FTP.CreateRequestFile(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            创建一个FTP请求
            </summary>
            <param name="remote">远程地址，格式为ftp://xxx</param>
            <param name="user">FTP登录用户名</param>
            <param name="pass">FTP登录密码</param>
            <param name="method">请求的方法，可以是"GET"、"PUT"、"POST"等</param>
            <param name="timeout">请求的超时时间，单位为秒，默认超时时间为TIMEOUT</param>
            <returns>创建的FTP请求</returns>
        </member>
        <member name="M:AHelper.Net.FTP.CreateRequestDir(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            创建一个FTP请求
            </summary>
            <param name="remote">远程地址，格式为ftp://xxx</param>
            <param name="user">FTP登录用户名</param>
            <param name="pass">FTP登录密码</param>
            <param name="method">请求的方法，可以是"GET"、"PUT"、"POST"等</param>
            <param name="timeout">请求的超时时间，单位为秒，默认超时时间为TIMEOUT</param>
            <returns>创建的FTP请求</returns>
        </member>
        <member name="M:AHelper.Net.FTP.UploadFile(System.String,System.String,System.String,System.String,IProgressEvent,System.UInt16,System.Int32)">
            <summary>
            FTP上传文件
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="localPath">本地文件路径</param>
            <param name="iEvent">回调</param>
            <param name="timeout">超时</param>
            <param name="bufferSize">缓存大小</param>
        </member>
        <member name="M:AHelper.Net.FTP.UploadFileAsync(System.String,System.String,System.String,System.String,IProgressEvent,System.UInt16,System.Int32)">
            <summary>
            FTP上传文件
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="localPath">本地文件路径</param>
            <param name="iEvent">回调</param>
            <param name="timeout">超时</param>
            <param name="bufferSize">缓存大小</param>
        </member>
        <member name="M:AHelper.Net.FTP.UploadFolder(System.String,System.String,System.String,System.String,System.IO.SearchOption,System.String,IProgressEvent,System.UInt16,System.Int32)">
            <summary>
            FTP上传文件夹
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="localPath">本地文件路径</param>
            <param name="option">搜索模式</param>
            <param name="iEvent">回调</param>
            <param name="pattern">匹配模式</param>
            <param name="timeout">超时</param>
            <param name="bufferSize">缓存大小</param>
        </member>
        <member name="M:AHelper.Net.FTP.UploadFolderAsync(System.String,System.String,System.String,System.String,System.IO.SearchOption,System.String,IProgressEvent,System.UInt16,System.Int32)">
            <summary>
            FTP上传文件夹
            </summary>
            <param name="uri">路径</param>
            <param name="user">用户名</param>
            <param name="pass">密码</param>
            <param name="localPath">本地文件路径</param>
            <param name="option">搜索模式</param>
            <param name="iEvent">回调</param>
            <param name="pattern">匹配模式</param>
            <param name="timeout">超时</param>
            <param name="bufferSize">缓存大小</param>
        </member>
        <member name="T:AHelper.Net.HTTP">
            <summary>
            HTTP
            </summary>
        </member>
        <member name="M:AHelper.Net.HTTP.Connect(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            预留给能够将连接改为管道方式的代理服务器
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Connect(System.String,System.Byte[],System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            预留给能够将连接改为管道方式的代理服务器
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Connect(System.String,System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            预留给能够将连接改为管道方式的代理服务器
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.ConnectAsync(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            预留给能够将连接改为管道方式的代理服务器
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.ConnectAsync(System.String,System.Byte[],System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            预留给能够将连接改为管道方式的代理服务器
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.ConnectAsync(System.String,System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            预留给能够将连接改为管道方式的代理服务器
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Delete(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求删除指定的资源
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Delete(System.String,System.Byte[],System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求删除指定的资源
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Delete(System.String,System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求删除指定的资源
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.DeleteAsync(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求删除指定的资源
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.DeleteAsync(System.String,System.Byte[],System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求删除指定的资源
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.DeleteAsync(System.String,System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求删除指定的资源
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Download(System.String,System.String,IProgressEvent,System.Boolean,System.UInt16,System.Int32)">
            <summary>
            HTTP 下载文件
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="localPath">保存路径</param>
            <param name="iEvent">回调</param>
            <param name="isOverWrite">覆盖</param>
            <param name="timeout">超时</param>
            <param name="bufferSize">容量</param>
            <exception cref="T:System.Exception">异常</exception>
        </member>
        <member name="M:AHelper.Net.HTTP.DownloadAsync(System.String,System.String,IProgressEvent,System.Boolean,System.UInt16,System.Int32)">
            <summary>
            HTTP 下载文件
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="localPath">保存路径</param>
            <param name="iEvent">回调</param>
            <param name="isOverWrite">覆盖</param>
            <param name="timeout">超时</param>
            <param name="bufferSize">容量</param>
            <exception cref="T:System.Exception">异常</exception>
        </member>
        <member name="M:AHelper.Net.HTTP.DownloadAsync(System.Collections.Generic.IEnumerable{System.String},System.String,IProgressEvent,System.Boolean,System.UInt16,System.Int32)">
            <summary>
            HTTP 下载文件
            </summary>
            <param name="remoteUrls">远端路径</param>
            <param name="localPath">保存根路径</param>
            <param name="iEvent">回调</param>
            <param name="isOverWrite">覆盖</param>
            <param name="timeout">超时</param>
            <param name="bufferSize">容量</param>
            <exception cref="T:System.Exception">异常</exception>
        </member>
        <member name="M:AHelper.Net.HTTP.Download(System.Collections.Generic.IEnumerable{System.String},System.String,IProgressEvent,System.Boolean,System.UInt16,System.Int32)">
            <summary>
            HTTP 下载文件
            </summary>
            <param name="remoteUrls">远端路径</param>
            <param name="localPath">保存根路径</param>
            <param name="iEvent">回调</param>
            <param name="isOverWrite">覆盖</param>
            <param name="timeout">超时</param>
            <param name="bufferSize">容量</param>
            <exception cref="T:System.Exception">异常</exception>
        </member>
        <member name="T:AHelper.Net.HTTP.Option">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
        </member>
        <member name="F:AHelper.Net.HTTP.Option.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="F:AHelper.Net.HTTP.Option.Cookie">
            <summary>
            cookie
            </summary>
        </member>
        <member name="F:AHelper.Net.HTTP.Option.Encoding">
            <summary>
            编码:默认UTF-8
            </summary>
        </member>
        <member name="F:AHelper.Net.HTTP.Option.ContentType">
            <summary>
            默认:application/x-www-form-urlencoded
            </summary>
        </member>
        <member name="M:AHelper.Net.HTTP.Option.#ctor">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
        </member>
        <member name="M:AHelper.Net.HTTP.Option.#ctor(System.UInt16,System.String,System.Text.Encoding,System.String)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="encoding">编码:默认UTF-8</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <param name="contentType"></param>
        </member>
        <member name="M:AHelper.Net.HTTP.Get(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteUrl">路径</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:AHelper.Net.HTTP.GetAsync(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteUrl">路径</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:AHelper.Net.HTTP.GetStream(System.String,System.UInt16,System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteUrl">路径</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:AHelper.Net.HTTP.GetStreamAsync(System.String,System.UInt16,System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteUrl">路径</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:AHelper.Net.HTTP.GetMD5(System.String,System.UInt16)">
            <summary>
            HTTP 下载文件
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="timeout">超时</param>
            <exception cref="T:System.Exception">异常</exception>
        </member>
        <member name="M:AHelper.Net.HTTP.GetMD5Async(System.String,System.UInt16)">
            <summary>
            HTTP 下载文件
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="timeout">超时</param>
            <exception cref="T:System.Exception">异常</exception>
        </member>
        <member name="M:AHelper.Net.HTTP.GetJson``1(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteUrl">路径</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:AHelper.Net.HTTP.GetJsonAsync``1(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteUrl">路径</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:AHelper.Net.HTTP.GetXml``1(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteUrl">路径</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:AHelper.Net.HTTP.GetXmlAsync``1(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteUrl">路径</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:AHelper.Net.HTTP.GetYaml``1(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteUrl">路径</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:AHelper.Net.HTTP.GetYamlAsync``1(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的内容
            </summary>
            <param name="remoteUrl">路径</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:AHelper.Net.HTTP.Head(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的资源的响应消息报告
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Head(System.String,System.Byte[],System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的资源的响应消息报告
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Head(System.String,System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的资源的响应消息报告
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.HeadAsync(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的资源的响应消息报告
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.HeadAsync(System.String,System.Byte[],System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的资源的响应消息报告
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.HeadAsync(System.String,System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            请求获取特定的资源的响应消息报告
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Options(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            返回服务器正对特定资源所支持的HTTP请求方法
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Options(System.String,System.Byte[],System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            返回服务器正对特定资源所支持的HTTP请求方法
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Options(System.String,System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            返回服务器正对特定资源所支持的HTTP请求方法
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.OptionsAsync(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            返回服务器正对特定资源所支持的HTTP请求方法
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.OptionsAsync(System.String,System.Byte[],System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            返回服务器正对特定资源所支持的HTTP请求方法
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.OptionsAsync(System.String,System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            返回服务器正对特定资源所支持的HTTP请求方法
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Post(System.String,System.String,AHelper.Net.HTTP.Option)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体 
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="data">上传数据</param>
            <param name="options">选项参数</param>
        </member>
        <member name="M:AHelper.Net.HTTP.Post(System.String,AHelper.Net.HTTP.Option)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体 
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="options">选项参数</param>
        </member>
        <member name="M:AHelper.Net.HTTP.Post(System.String,System.Byte[],AHelper.Net.HTTP.Option)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="data">上传数据</param>
            <param name="options">选项参数</param>
        </member>
        <member name="M:AHelper.Net.HTTP.PostStream(System.String,System.String,AHelper.Net.HTTP.Option)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体 
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="data">上传数据</param>
            <param name="options">选项参数</param>
        </member>
        <member name="M:AHelper.Net.HTTP.PostStream(System.String,AHelper.Net.HTTP.Option)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体 
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="options">选项参数</param>
        </member>
        <member name="M:AHelper.Net.HTTP.PostStream(System.String,System.Byte[],AHelper.Net.HTTP.Option)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="data">上传数据</param>
            <param name="options">选项参数</param>
        </member>
        <member name="M:AHelper.Net.HTTP.PostAsync(System.String,System.String,AHelper.Net.HTTP.Option)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体 
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="data">上传数据</param>
            <param name="options">选项参数</param>
        </member>
        <member name="M:AHelper.Net.HTTP.PostAsync(System.String,AHelper.Net.HTTP.Option)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体 
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="options">选项参数</param>
        </member>
        <member name="M:AHelper.Net.HTTP.PostAsync(System.String,System.Byte[],AHelper.Net.HTTP.Option)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="data">上传数据</param>
            <param name="options">选项参数</param>
            <returns>返回内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.PostStreamAsync(System.String,System.String,AHelper.Net.HTTP.Option)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体 
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="data">上传数据</param>
            <param name="options">选项参数</param>
        </member>
        <member name="M:AHelper.Net.HTTP.PostStreamAsync(System.String,AHelper.Net.HTTP.Option)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体 
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="options">选项参数</param>
        </member>
        <member name="M:AHelper.Net.HTTP.PostStreamAsync(System.String,System.Byte[],AHelper.Net.HTTP.Option)">
            <summary>
            请求服务器接受所指定的文档作为对所标识的URI的新的从属实体
            </summary>
            <param name="remoteUrl">远端路径</param>
            <param name="data">上传数据</param>
            <param name="options">选项参数</param>
            <returns>返回内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Put(System.String,System.Byte[],System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            向指定资源位置上传其最新内容
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Put(System.String,System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            向指定资源位置上传其最新内容
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.PutAsync(System.String,System.Byte[],System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            向指定资源位置上传其最新内容
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.PutAsync(System.String,System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            向指定资源位置上传其最新内容
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Trace(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            回显服务器收到的请求
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Trace(System.String,System.Byte[],System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            回显服务器收到的请求
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.Trace(System.String,System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            回显服务器收到的请求
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.TraceAsync(System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            回显服务器收到的请求
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.TraceAsync(System.String,System.Byte[],System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            回显服务器收到的请求
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.HTTP.TraceAsync(System.String,System.String,System.Text.Encoding,System.UInt16,System.String)">
            <summary>
            回显服务器收到的请求
            </summary>
            <param name="remoteUrl">远端地址</param>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <param name="timeout">超时时间</param>
            <param name="cookie">cookie</param>
            <exception cref="T:AIO.NetGetResponseStream">异常</exception>
            <returns>内容</returns>
        </member>
        <member name="M:AHelper.Net.UriParamSerialize(System.Object@)">
            <summary>
            Model对象转换为uri网址参数形式
            </summary>
            <param name="obj">Model对象</param>
        </member>
        <member name="M:AHelper.Net.RemoveFileHeader(System.IO.Stream,System.Int32)">
            <summary>
            移除文件头
            </summary>
            <param name="stream">文件流</param>
            <param name="bufferSize">容量大小</param>
        </member>
        <member name="M:AHelper.Net.RemoveFileHeaderAsync(System.IO.Stream,System.Int32)">
            <summary>
            移除文件头
            </summary>
            <param name="stream">文件流</param>
            <param name="bufferSize">容量大小</param>
        </member>
        <member name="F:AHelper.BUFFER_SIZE">
            <summary>
            容量缓存 : 1M
            </summary>
        </member>
        <member name="T:AHelper.Reflect">
            <summary>
            反射工具库
            </summary>
        </member>
        <member name="M:AHelper.Reflect.GetEnumFilterOBS``1">
            <summary>
            过滤枚举过时字段
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>泛型列表</returns>
        </member>
        <member name="M:AHelper.Reflect.GetPropertyFilterOBS``1(System.Reflection.BindingFlags)">
            <summary>
            过滤过时属性
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>属性列表</returns>
        </member>
        <member name="M:AHelper.Reflect.GetFieldFilterOBS``1(System.Reflection.BindingFlags)">
            <summary>
            过滤过时字段
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>属性列表</returns>
        </member>
        <member name="M:AHelper.Reflect.GetMemberFilterOBS``1(System.Reflection.BindingFlags)">
            <summary>
            过滤成员字段
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>属性列表</returns>
        </member>
        <member name="M:AHelper.Reflect.GetMethodFilterOBS``1(System.Reflection.BindingFlags)">
            <summary>
            过滤函数字段
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>属性列表</returns>
        </member>
        <member name="T:AHelper.TimeStamp">
            <summary>
            TimeStamp 时间戳
            </summary>
        </member>
        <member name="P:AHelper.TimeStamp.NowMillisecond">
            <summary>
            Get current timestamp / 当前时间戳，单位是毫秒
            </summary>
        </member>
        <member name="P:AHelper.TimeStamp.NowSecond">
            <summary>
            Get current timestamp / 当前时间戳，单位是秒
            </summary>
        </member>
        <member name="M:AHelper.TimeStamp.MillisecondToDateTime(System.Int64)">
            <summary>
            毫秒级时间戳转为时间
            </summary>
            <param name="timestamp">毫秒级时间磋</param>
        </member>
        <member name="M:AHelper.TimeStamp.SecondToDateTime(System.Int64)">
            <summary>
            秒级时间戳转为时间
            </summary>
            <param name="timestamp">秒级时间磋</param>
        </member>
        <member name="M:AHelper.TimeStamp.ConvertDateTime(System.DateTime)">
            <summary>
             DateTime时间格式转换为Unix时间戳格式
            </summary>
        </member>
        <member name="T:AHelper.Base64">
            <summary>
            Base64 文件 解析
            </summary>
        </member>
        <member name="M:AHelper.Base64.SerializeData``1(``0)">
            <summary>
            序列化 未加密
            </summary>
        </member>
        <member name="M:AHelper.Base64.SerializeData``1(``0@)">
            <summary>
            序列化 未加密
            </summary>
        </member>
        <member name="M:AHelper.Base64.Serialize(System.Byte[],System.Base64FormattingOptions)">
            <summary>
            序列化 未加密
            </summary>
        </member>
        <member name="M:AHelper.Base64.Serialize(System.String,System.Text.Encoding)">
            <summary>
            序列化 未加密
            </summary>
        </member>
        <member name="M:AHelper.Base64.Deserialize``1(System.String)">
            <summary>
            反序列化 未加密
            </summary>
        </member>
        <member name="T:AHelper.Binary">
            <summary>
            Binary 文件 解析
            </summary>
        </member>
        <member name="M:AHelper.Binary.Serialize``1(``0@)">
            <summary>
            序列化 未加密
            </summary>
        </member>
        <member name="M:AHelper.Binary.Deserialize``1(System.Byte[]@)">
            <summary>
            反序列化 未加密
            </summary>
        </member>
        <member name="T:AHelper.DataEncrypt">
            <summary>
            数据加密解密
            </summary>
        </member>
        <member name="M:AHelper.DataEncrypt.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            加密
            </summary>
            <param name="data">数据源</param>
            <param name="rgbKey">对称算法的密钥</param>
            <param name="rgbIV">对称算法的初始化向量</param>
            <returns></returns>
        </member>
        <member name="M:AHelper.DataEncrypt.Encrypt(System.Byte[])">
            <summary>
            加密
            </summary>
        </member>
        <member name="M:AHelper.DataEncrypt.Encrypt(System.String)">
            <summary>
            加密
            </summary>
        </member>
        <member name="M:AHelper.DataEncrypt.EncryptToStr(System.String)">
            <summary>
            加密
            </summary>
        </member>
        <member name="M:AHelper.DataEncrypt.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            解码 
            </summary>
            <param name="data">数据源</param>
            <param name="rgbKey">对称算法的密钥</param>
            <param name="rgbIV">对称算法的初始化向量</param>
        </member>
        <member name="M:AHelper.DataEncrypt.Decrypt(System.Byte[])">
            <summary>
            解码 
            </summary>
        </member>
        <member name="M:AHelper.DataEncrypt.DecryptToStr(System.Byte[])">
            <summary>
            解码 
            </summary>
        </member>
        <member name="M:AHelper.DataEncrypt.Decrypt(System.String)">
            <summary>
            解码 
            </summary>
        </member>
        <member name="T:AHelper.HashTable">
            <summary>
            HashTabel 工具类
            </summary>
        </member>
        <member name="M:AHelper.HashTable.Create(System.Object[])">
            <summary>
            创建
            </summary>
        </member>
        <member name="M:AHelper.HashTable.Create(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            创建
            </summary>
        </member>
        <member name="T:AHelper.Json">
            <summary>
            Json 工具类
            </summary>
        </member>
        <member name="P:AHelper.Json.JSONNormalSettings">
            <summary>
            Json默认设置
            </summary>
        </member>
        <member name="M:AHelper.Json.Serialize(System.Object@)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AHelper.Json.Serialize(System.Object@,Newtonsoft.Json.JsonSerializerSettings@)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AHelper.Json.Serialize``1(``0@,Newtonsoft.Json.JsonSerializerSettings@)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AHelper.Json.Serialize``1(``0@)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AHelper.Json.ToHashTable(System.String@)">
            <summary>
            反序列化 HashTable
            </summary>
        </member>
        <member name="M:AHelper.Json.Deserialize(System.String@,Newtonsoft.Json.JsonSerializerSettings@)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AHelper.Json.Deserialize(System.String@)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AHelper.Json.Deserialize``1(System.String@,Newtonsoft.Json.JsonSerializerSettings@)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AHelper.Json.Deserialize``1(System.String@)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AHelper.Json.Deserialize(System.String@,System.Type@,Newtonsoft.Json.JsonSerializerSettings@)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AHelper.Json.Deserialize(System.String@,System.Type@)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AHelper.Json.PopulateObject``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings@)">
            <summary>
            反序列化 填充对象
            </summary>
        </member>
        <member name="M:AHelper.Json.PopulateObject``1(System.String,``0)">
            <summary>
            反序列化 填充对象
            </summary>
        </member>
        <member name="M:AHelper.Json.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings@)">
            <summary>
            反序列化 填充对象
            </summary>
        </member>
        <member name="M:AHelper.Json.PopulateObject(System.String,System.Object)">
            <summary>
            反序列化 填充对象
            </summary>
        </member>
        <member name="T:AHelper.Sort">
            <summary>
            排序工具
            默认排序方向 从小到大
            </summary>
        </member>
        <member name="M:AHelper.Sort.AutomaticArray``1(System.Array@,``0@)">
            <summary>
            自动扩容，并保存数据
            </summary>
        </member>
        <member name="M:AHelper.Sort.Counting(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            计数排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Counting(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            计数排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Radix(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Radix(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Radix(System.Collections.Generic.IList{System.Int16}@)">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Bucket(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Bucket(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Bucket(System.Collections.Generic.IList{System.Int16}@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Bucket(System.Collections.Generic.IList{System.Single}@,System.Int32@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Bucket(System.Collections.Generic.IList{System.Double}@,System.Int32@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Bucket(System.Collections.Generic.IList{System.Decimal}@,System.Int32@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.InsertIntoLinkList``1(System.Collections.Generic.LinkedList{``0},``0)">
            <summary>  
            按升序插入 linklist   
            </summary>  
            <param name="linkedList"> 要排序的链表 </param>  
            <param name="num"> 要插入排序的数字 </param>  
        </member>
        <member name="M:AHelper.Sort.Merge``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            归并排序
            数据量:1000以下适用
            </summary>
        </member>
        <member name="M:AHelper.Sort.Merge``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            归并排序
            数据量:1000以下适用
            </summary>
        </member>
        <member name="M:AHelper.Sort.Heap``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            堆排序
            数据量:1000以下适用
            </summary>
        </member>
        <member name="M:AHelper.Sort.HeapSort_MaxHeaping``1(System.Collections.Generic.IList{``0}@,System.Int32@,System.Int32@)">
            <summary>
            将指定的结点调整为堆。
            </summary>
        </member>
        <member name="M:AHelper.Sort.Heap``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            堆排序
            数据量:1000以下适用
            </summary>
        </member>
        <member name="M:AHelper.Sort.HeapSort_MaxHeaping``1(System.Collections.Generic.IList{``0}@,System.Int32@,System.Int32@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            将指定的结点调整为堆。
            </summary>
        </member>
        <member name="M:AHelper.Sort.Select``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            选择排序 数据量:100以下适用
            </summary>
        </member>
        <member name="M:AHelper.Sort.Select``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            选择排序 数据量:100以下适用
            </summary>
        </member>
        <member name="M:AHelper.Sort.Shell``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            希尔排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Shell``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            希尔排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Insert``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            插入排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Insert``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            插入排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Quick``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            快速排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Quick``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            快速排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Bubble``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            单向冒泡排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.Bubble``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            单向冒泡排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.BubbleTwoWay``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            双向冒泡排序
            </summary>
        </member>
        <member name="M:AHelper.Sort.BubbleTwoWay``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            双向冒泡排序
            </summary>
        </member>
        <member name="T:AHelper.Xml">
            <summary>
            XML 工具类
            </summary>
        </member>
        <member name="M:AHelper.Xml.Serialize``1(``0@,System.String@,System.Text.Encoding@)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AHelper.Xml.Deserialize``1(System.String@,System.Text.Encoding@)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="T:AHelper.Yaml">
            <summary>
            Yaml 解析
            </summary>
        </member>
        <member name="M:AHelper.Yaml.Serialize(System.Object@)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AHelper.Yaml.ToJson(System.String@)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AHelper.Yaml.Deserialize``1(System.String@)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="T:AHelper.Guid">
            <summary>
            生成一个新的 GUID 对象。
            </summary>
            <returns>新的 GUID 对象。</returns>
        </member>
        <member name="M:AHelper.Guid.New">
            <summary>
            生成一个新的 GUID 对象。
            </summary>
            <returns>新的 GUID 对象。</returns>
        </member>
        <member name="M:AHelper.Guid.New(System.String@)">
            <summary>
            生成一个新的 GUID 字符串。
            </summary>
            <param name="format">指定 GUID 字符串的格式，默认为 "N" 格式。</param>
            <returns>新的 GUID 字符串。</returns>
        </member>
        <member name="M:AHelper.Guid.NewBase64">
            <summary>
            生成一个新的 Base64 编码的 GUID 字符串。
            </summary>
            <returns>新的 Base64 编码的 GUID 字符串。</returns>
        </member>
        <member name="T:AHelper.IO">
            <summary>
            IO工具类
            </summary>
        </member>
        <member name="M:AHelper.IO.ClearFolder(System.String@)">
            <summary>
            清空当前文件夹
            </summary>
        </member>
        <member name="M:AHelper.IO.ClearFolder(System.IO.DirectoryInfo@)">
            <summary>
            清空当前文件夹
            </summary>
        </member>
        <member name="M:AHelper.IO.CopyChildNode(System.String@,System.String@,System.Boolean@)">
            <summary>
            拷贝子节点
            </summary>
        </member>
        <member name="M:AHelper.IO.CopyFolderPart(System.String@,System.String@,System.Boolean@)">
            <summary>
            复制文件夹及文件 部分 根文件名不会复制 适合重命名
            </summary>
            <param name="sourceFilePath">原文件路径</param>
            <param name="destinationFilePath">目标文件路径</param>
            <param name="overwrite"></param>
        </member>
        <member name="M:AHelper.IO.CopyFolderAll(System.String@,System.String@,System.Boolean@)">
            <summary>
            复制文件夹及文件 全部
            </summary> 根文件名一起复制
            <param name="sourceFilePath">原文件路径</param>
            <param name="destinationFilePath">目标文件路径</param>
            <param name="overwrite"></param>
        </member>
        <member name="M:AHelper.IO.CopyFile(System.String@,System.String@,System.Boolean@)">
            <summary>
            复制文件
            </summary>
        </member>
        <member name="M:AHelper.IO.CopyFile(System.String@,System.String@,System.Int32@)">
            <summary>
            复制文件
            </summary>
            <param name="sourceFilePath">源文件的路径</param>
            <param name="destinationFilePath">目标文件的路径</param>
            <param name="bufferSize">缓冲区大小，用于每次读取和写入的字节数</param>
            <returns>是否成功复制文件</returns>
        </member>
        <member name="M:AHelper.IO.CreateFolder(System.String@,System.Boolean@)">
            <summary>
            创建文件夹
            </summary>
            <param name="folder">文件夹路径</param>
            <param name="clear">清除</param>
        </member>
        <member name="M:AHelper.IO.DeleteFileAsync(System.String,System.String,System.IO.SearchOption)">
            <summary>
            删除文件
            </summary>
            <param name="folder">文件夹路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">查询模式</param>
        </member>
        <member name="M:AHelper.IO.DeleteFileAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除文件
            </summary>
            <param name="list">文件列表</param>
        </member>
        <member name="M:AHelper.IO.DeleteFileAsync(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
            删除文件
            </summary>
            <param name="list">文件列表</param>
        </member>
        <member name="M:AHelper.IO.DeleteFolderAsync(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AHelper.IO.DeleteFolderAsync(System.IO.DirectoryInfo,System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AHelper.IO.DeleteFolderAsync(System.Collections.Generic.IEnumerable{System.String},System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AHelper.IO.DeleteFolderAsync(System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo},System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AHelper.IO.DeleteFile(System.String@)">
            <summary>
            删除文件
            </summary>
            <param name="path">文件相对路径</param>
        </member>
        <member name="M:AHelper.IO.DeleteFile(System.IO.FileInfo@)">
            <summary>
            删除文件
            </summary>
            <param name="path">文件相对路径</param>
        </member>
        <member name="M:AHelper.IO.DeleteFile(System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            删除文件
            </summary>
            <param name="list">文件相对路径</param>
        </member>
        <member name="M:AHelper.IO.DeleteFile(System.Collections.Generic.IEnumerable{System.IO.FileInfo}@)">
            <summary>
            删除文件
            </summary>
            <param name="list">文件相对路径</param>
        </member>
        <member name="M:AHelper.IO.DeleteFile(System.IO.FileInfo[])">
            <summary>
            删除文件
            </summary>
            <param name="list">文件相对路径</param>
        </member>
        <member name="M:AHelper.IO.DeleteFile(System.String[])">
            <summary>
            删除文件
            </summary>
            <param name="list">文件相对路径</param>
        </member>
        <member name="M:AHelper.IO.DeleteFile(System.String@,System.String@,System.IO.SearchOption@)">
            <summary>
            删除指定文件夹下 指定类型文件
            </summary>
            <param name="folder">文件夹路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">查询模式</param>
        </member>
        <member name="M:AHelper.IO.DeleteFolder(System.IO.DirectoryInfo@,System.IO.SearchOption@,System.Boolean@)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AHelper.IO.DeleteFolder(System.String@,System.IO.SearchOption@,System.Boolean@)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AHelper.IO.DeleteFolder(System.Collections.Generic.IEnumerable{System.String}@,System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AHelper.IO.DeleteFolder(System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}@,System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AHelper.IO.EncodingBitByte(System.Byte@)">
            <summary>
            字节位运算加密
            </summary>
        </member>
        <member name="M:AHelper.IO.Exists(System.String)">
            <summary>
            判断当前路径是否存在 不管是以文件夹 还是 文件的形式存在
            </summary>
            <returns>True:存在 False:不存在</returns>
        </member>
        <member name="M:AHelper.IO.ExistsFile(System.String@)">
            <summary>
            判断文件是否存在
            </summary>
            <returns>True:存在 False:不存在</returns>
        </member>
        <member name="M:AHelper.IO.ExistsFolder(System.String@)">
            <summary>
            判断目录是否存在
            </summary>
            <returns>True:存在 False:不存在</returns>
        </member>
        <member name="M:AHelper.IO.FindPaths(System.String@,System.IO.SearchOption@,System.String[])">
            <summary>
            查询匹配 返回符合条件的路径
            </summary>
            <param name="dir">文件夹路径</param>
            <param name="op">匹配模式</param>
            <param name="searchPatterns">条件 "*value*"</param>
            <returns></returns>
        </member>
        <member name="M:AHelper.IO.FindPaths(System.String@,System.IO.SearchOption@,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            查询匹配 返回符合条件的路径
            </summary>
            <param name="dir">文件夹路径</param>
            <param name="op">匹配模式</param>
            <param name="searchPatterns">条件 "*value*"</param>
            <returns></returns>
        </member>
        <member name="M:AHelper.IO.GetLastWriteTimeUtc(System.Collections.Generic.ICollection{System.IO.DirectoryInfo})">
            <summary>
            获取最新的文件夹
            </summary>
            <param name="directoryInfos">文件夹列表</param>
            <returns><see cref="T:System.IO.DirectoryInfo"/>文件夹信息</returns>
        </member>
        <member name="M:AHelper.IO.GetLastWriteTimeUtc(System.Collections.Generic.ICollection{System.IO.FileInfo})">
            <summary>
            获取最新的文件
            </summary>
            <param name="directoryInfos">文件夹列表</param>
            <returns><see cref="T:System.IO.FileInfo"/>文件夹信息</returns>
        </member>
        <member name="M:AHelper.IO.TryPathsForFile(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            在给定的文件夹路径列表中查找指定文件名的文件，并返回第一个存在的文件完整路径。
            </summary>
            <param name="fileName">要查找的文件名。</param>
            <param name="directories">包含所有可能包含该文件的文件夹路径的 IEnumerable 类型实例。</param>
            <returns>如果找到该文件，则返回完整路径，否则返回 null。</returns>
        </member>
        <member name="M:AHelper.IO.TryPathsForFile(System.String@,System.String[])">
            <summary>
            在给定的文件夹路径列表中查找指定文件名的文件，并返回第一个存在的文件完整路径。
            </summary>
            <param name="fileName">要查找的文件名。</param>
            <param name="directories">包含所有可能包含该文件的文件夹路径的可变参数数组。</param>
            <returns>如果找到该文件，则返回完整路径，否则返回 null。</returns>
        </member>
        <member name="M:AHelper.IO.GetRelativePath(System.String,System.String)">
            <summary>
            获取指定路径相对于给定目录的相对路径。
            </summary>
            <param name="path">要获取其相对路径的文件或文件夹的路径。</param>
            <param name="directory">相对路径将基于此目录计算的目标目录。</param>
            <returns>相对路径字符串。</returns>
            <exception cref="T:System.ArgumentNullException">当 path 或 directory 为 null 时，抛出此异常。</exception>
            <exception cref="T:System.UriFormatException">使用 URI 库时，如果 path 或 directory 不是有效的 URI 字符串，则抛出此异常。</exception>
        </member>
        <member name="M:AHelper.IO.GetFilesInfo(System.String@,System.Func{System.IO.FileInfo,System.Boolean}@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取当前所有文件夹中所有文件信息
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜查模式</param>
            <returns>所有文件信息数组</returns>
        </member>
        <member name="M:AHelper.IO.GetFilesInfo(System.String@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取当前所有文件夹中所有文件信息
            </summary>
        </member>
        <member name="M:AHelper.IO.GetFilesInfo(System.IO.DirectoryInfo@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取当前所有文件夹中所有文件信息
            </summary>
        </member>
        <member name="M:AHelper.IO.GetFiles(System.String@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取该文件夹下所有文件 绝对路径
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹 绝对路径</returns>
        </member>
        <member name="M:AHelper.IO.GetFiles(System.String@,System.Func{System.IO.FileInfo,System.Boolean}@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取该文件夹下所有文件 绝对路径
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹 绝对路径</returns>
        </member>
        <member name="M:AHelper.IO.GetFilesRelative(System.String@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取该文件夹下所有文件 相对路径
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹 相对路径</returns>
        </member>
        <member name="M:AHelper.IO.GetFilesRelative(System.String@,System.Func{System.IO.FileInfo,System.Boolean}@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取该文件夹下所有文件 相对路径
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹 相对路径</returns>
        </member>
        <member name="M:AHelper.IO.GetFilesName(System.String@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取该文件夹下所有文件名称
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件名称</returns>
        </member>
        <member name="M:AHelper.IO.GetFilesName(System.String@,System.Func{System.IO.FileInfo,System.Boolean}@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取该文件夹下所有文件名称
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件名称</returns>
        </member>
        <member name="M:AHelper.IO.GetFoldersInfo(System.String@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取文件夹数组
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹名称</returns>
        </member>
        <member name="M:AHelper.IO.GetFoldersInfo(System.String@,System.Func{System.IO.DirectoryInfo,System.Boolean}@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取文件夹数组
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹名称</returns>
        </member>
        <member name="M:AHelper.IO.GetFolders(System.String@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取文件夹数组
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹名称</returns>
        </member>
        <member name="M:AHelper.IO.GetFolders(System.String@,System.Func{System.IO.DirectoryInfo,System.Boolean}@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取文件夹数组
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹名称</returns>
        </member>
        <member name="M:AHelper.IO.GetFoldersName(System.String@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取该文件夹下所有文件夹名 不含子文件夹 不包含自己
            </summary>
        </member>
        <member name="M:AHelper.IO.GetFoldersName(System.String@,System.Func{System.IO.DirectoryInfo,System.Boolean}@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取该文件夹下所有文件夹名 不含子文件夹 不包含自己
            </summary>
        </member>
        <member name="M:AHelper.IO.GetFileSize(System.String@,System.Single@)">
            <summary>
            返回文件大小 默认单位KB
            </summary>
        </member>
        <member name="M:AHelper.IO.GetFileLength(System.String@)">
            <summary>
            返回文件字节长度
            </summary>
            <param name="Path">文件相对路径</param>
        </member>
        <member name="M:AHelper.IO.GetFileName(System.String,System.Boolean)">
            <summary>
            返回文件名，不含路径 默认带文件名后缀
            </summary>
            <param name="file">文件路径</param>
            <param name="extension">是否有后缀</param>
            <returns>文件名</returns>
        </member>
        <member name="M:AHelper.IO.GetFileExtension(System.String)">
            <summary>
            返回文件名，不含路径 默认带文件名后缀
            </summary>
            <param name="file">文件路径</param>
            <returns>文件名</returns>
        </member>
        <member name="M:AHelper.IO.GetFileInfo(System.String)">
            <summary>
            获取当前所有文件夹中所有文件信息
            </summary>
            <param name="value">文件夹路径</param>
        </member>
        <member name="M:AHelper.IO.GetFileHash(System.String)">
            <summary>
            获取文件的哈希值
            </summary>
        </member>
        <member name="M:AHelper.IO.GetFileMD5(System.String,System.Int64)">
            <summary>
            获取文件的MD5值
            </summary>
        </member>
        <member name="M:AHelper.IO.GetMD5ByHashAlgorithm(System.IO.Stream,System.Int64)">
            <summary>
            通过HashAlgorithm的TransformBlock方法对流进行叠加运算获得MD5
            实现稍微复杂，但可使用与传输文件或接收文件时同步计算MD5值
            可自定义缓冲区大小，计算速度较快
            </summary>
        </member>
        <member name="M:AHelper.IO.GetFileLastWriteTimeUtc(System.String)">
            <summary>
            获取最后写入时间
            </summary>
        </member>
        <member name="M:AHelper.IO.GetFileCreationTimeUtc(System.String)">
            <summary>
            获取创建文件时间
            </summary>
        </member>
        <member name="M:AHelper.IO.GetFileAttributes(System.String)">
            <summary>
            获取文件属性
            </summary>
        </member>
        <member name="M:AHelper.IO.MoveFile(System.String@,System.String@,System.Boolean@)">
            <summary>
            移动文件
            </summary>
            <param name="source">源路径</param>
            <param name="target">目标路径</param>
            <param name="overlay">Ture:覆盖 False:不覆盖</param>
        </member>
        <member name="M:AHelper.IO.MoveFolder(System.String@,System.String@,System.Boolean@)">
            <summary>
            移动文件
            </summary>
            <param name="source">源路径</param>
            <param name="target">目标路径</param>
            <param name="overlay">Ture:覆盖 False:不覆盖</param>
        </member>
        <member name="M:AHelper.IO.ReadByteArrayAsync(System.String)">
            <summary>
            异步 加载 Byte Array
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:AHelper.IO.WriteByteArrayAsync(System.String,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            异步 写入数据
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            异步写入 将指定数据从offset开始写入length长度到文件中,是否追加到文件尾
            </summary>
            <param name="path">路径</param>
            <param name="bytes">内容</param>
            <param name="offset">写入内容位置</param>
            <param name="length">长度</param>
            <param name="concat">true:拼接 | false:覆盖</param>
            <param name="bufferSize">缓冲区大小</param>
        </member>
        <member name="M:AHelper.IO.ReadAsync(System.String,System.Int32)">
            <summary>
            异步读取
            </summary>
            <param name="path">路径</param>
            <param name="bufferSize">缓冲区大小</param>
        </member>
        <member name="M:AHelper.IO.ReadByteArray(System.String@)">
            <summary>
            加载 Byte Array
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:AHelper.IO.WriteByteArray(System.String@,System.Byte[]@,System.Boolean@,System.Boolean@)">
            <summary>
            写入数据
            </summary>
        </member>
        <member name="M:AHelper.IO.Write(System.String@,System.Byte[]@,System.Int32@,System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            将指定数据从offset开始写入length长度到文件中,是否追加到文件尾
            </summary>
            <param name="path">路径</param>
            <param name="bytes">内容</param>
            <param name="offset">写入内容位置</param>
            <param name="length">长度</param>
            <param name="concat">true:拼接 | false:覆盖</param>
            <param name="bufferSize">缓冲区大小</param>
        </member>
        <member name="M:AHelper.IO.Read(System.String@,System.Int32@)">
            <summary>
            异步读取
            </summary>
            <param name="path">路径</param>
            <param name="bufferSize">缓冲区大小</param>
        </member>
        <member name="M:AHelper.IO.ReadFileAsync(System.String)">
            <summary>
            使用异步 从文件中读取数据
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteFileAsync(System.String,System.Byte[],System.Boolean)">
            <summary>
            将数据写入文件,是否追加到文件尾 默认覆盖文件
            </summary>
            <param name="Path">路径</param>
            <param name="Bytes">内容</param>
            <param name="Concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AHelper.IO.ReadFile(System.String@)">
            <summary>
            从文件中读取数据
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteFile(System.String@,System.Byte[]@,System.Boolean@)">
            <summary>
            将数据写入文件,是否追加到文件尾 默认覆盖文件
            </summary>
            <param name="Path">路径</param>
            <param name="Bytes">内容</param>
            <param name="Concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AHelper.IO.CompressedZip(System.String@,System.String@,System.Action{System.Single}@,System.String@,System.IO.SearchOption@)">
            <summary>
            压缩为ZIP包
            </summary>
            <param name="sourcePath">源文件夹</param>
            <param name="savePath">保存路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <param name="progressAction">进度回调</param>
        </member>
        <member name="M:AHelper.IO.CompressedZip(System.String@,System.String@,System.String@,System.IO.SearchOption@)">
            <summary>
            压缩为ZIP包
            </summary>
            <param name="sourcePath">源文件夹</param>
            <param name="savePath">保存路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
        </member>
        <member name="M:AHelper.IO.CompressedZip(System.String@,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}}@)">
            <summary>
            压缩为ZIP包
            </summary>
            <param name="savePath">保存路径</param>
            <param name="files">1:文件路径 2:ZIP内部路径</param>
        </member>
        <member name="M:AHelper.IO.CompressedZip(System.String@,System.Collections.Generic.ICollection{System.ValueTuple{System.String,System.String}}@,System.Action{System.Single}@)">
            <summary>
            压缩为ZIP包
            </summary>
            <param name="savePath">保存路径</param>
            <param name="files">文件信息 1:外部路径 2:ZIP内部路径</param>
            <param name="progressAction">进度回调</param>
        </member>
        <member name="M:AHelper.IO.CompressedZip(System.String@,System.Collections.Generic.IEnumerable{System.ValueTuple{System.IO.FileInfo,System.String}}@)">
            <summary>
            压缩为ZIP包
            </summary>
            <param name="savePath">保存路径</param>
            <param name="files">1:文件路径 2:ZIP内部路径</param>
        </member>
        <member name="M:AHelper.IO.CompressedZip(System.String@,System.Collections.Generic.ICollection{System.ValueTuple{System.IO.FileInfo,System.String}}@,System.Action{System.Single}@)">
            <summary>
            压缩为ZIP包
            </summary>
            <param name="savePath">保存路径</param>
            <param name="files">文件信息 1:外部路径 2:ZIP内部路径</param>
            <param name="progressAction">进度回调</param>
        </member>
        <member name="M:AHelper.IO.UncompressedZip(System.String@,System.String,System.Action{System.Single},System.Action{System.String},System.Boolean@)">
            <summary>
            解压
            </summary>
            <param name="path">解压包路径</param>
            <param name="targetDirectory">保存路径</param>
            <param name="progressAction">进度回调</param>
            <param name="entryAction">文件实体回调</param>
            <param name="restoreDateTime">是否恢复提取文件的日期和时间的标志</param>
        </member>
        <member name="M:AHelper.IO.UncompressedZip(System.String@,System.String,System.Action{System.Single},System.Action{System.String},System.String@,System.Boolean@)">
            <summary>
            解压
            </summary>
            <param name="path">解压包路径</param>
            <param name="targetDirectory">保存路径</param>
            <param name="progressAction">进度回调</param>
            <param name="entryAction">文件实体回调</param>
            <param name="fileFilter">文件过滤器</param>
            <param name="restoreDateTime">是否恢复提取文件的日期和时间的标志</param>
        </member>
        <member name="M:AHelper.IO.UncompressedZip(System.String@,System.String,System.Action{System.Single},System.Action{System.String},System.String@,System.String@,System.Boolean@)">
            <summary>
            解压
            </summary>
            <param name="path">解压包路径</param>
            <param name="targetDirectory">保存路径</param>
            <param name="progressAction">进度回调</param>
            <param name="entryAction">文件实体回调</param>
            <param name="fileFilter">文件过滤器</param>
            <param name="directoryFilter">文件夹过滤器</param>
            <param name="restoreDateTime">是否恢复提取文件的日期和时间的标志</param>
        </member>
        <member name="M:AHelper.IO.UncompressedZip(System.String@,System.String,System.Action{System.Single},System.String@,System.Boolean@)">
            <summary>
            解压
            </summary>
            <param name="path">解压包路径</param>
            <param name="targetDirectory">保存路径</param>
            <param name="progressAction">进度回调</param>
            <param name="fileFilter">文件过滤器</param>
            <param name="restoreDateTime">是否恢复提取文件的日期和时间的标志</param>
        </member>
        <member name="M:AHelper.IO.UncompressedZip(System.String@,System.String,System.Action{System.Single},System.Boolean@)">
            <summary>
            解压
            </summary>
            <param name="path">解压包路径</param>
            <param name="targetDirectory">保存路径</param>
            <param name="progressAction">进度回调</param>
            <param name="restoreDateTime">是否恢复提取文件的日期和时间的标志</param>
        </member>
        <member name="M:AHelper.IO.UncompressedZip(System.String@,System.String,System.Action{System.Single},System.String@,System.String@,System.Boolean@)">
            <summary>
            解压
            </summary>
            <param name="path">解压包路径</param>
            <param name="targetDirectory">保存路径</param>
            <param name="progressAction">进度回调</param>
            <param name="fileFilter">文件过滤器</param>
            <param name="directoryFilter">文件夹过滤器</param>
            <param name="restoreDateTime">是否恢复提取文件的日期和时间的标志</param>
        </member>
        <member name="M:AHelper.IO.UncompressedZip(System.String@,System.String,System.Boolean@)">
            <summary>
            解压
            </summary>
            <param name="path">解压包路径</param>
            <param name="targetDirectory">保存路径</param>
            <param name="restoreDateTime">是否恢复提取文件的日期和时间的标志</param>
        </member>
        <member name="M:AHelper.IO.UncompressedZip(System.String@,System.String,System.String@,System.Boolean@)">
            <summary>
            解压
            </summary>
            <param name="path">解压包路径</param>
            <param name="targetDirectory">保存路径</param>
            <param name="fileFilter">文件过滤器</param>
            <param name="restoreDateTime">是否恢复提取文件的日期和时间的标志</param>
        </member>
        <member name="M:AHelper.IO.UncompressedZip(System.String@,System.String,System.String@,System.String@,System.Boolean@)">
            <summary>
            解压
            </summary>
            <param name="path">解压包路径</param>
            <param name="targetDirectory">保存路径</param>
            <param name="fileFilter">文件过滤器</param>
            <param name="directoryFilter">文件夹过滤器</param>
            <param name="restoreDateTime">是否恢复提取文件的日期和时间的标志</param>
        </member>
        <member name="M:AHelper.IO.ReadBase64Async``1(System.String,System.String)">
            <summary>
            读取 Base64 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadBase64UTF8Async``1(System.String)">
            <summary>
            读取 Base64 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteBase64Async``1(System.String,``0,System.String)">
            <summary>
            写入 Base64 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteBase64UTF8Async``1(System.String,``0)">
            <summary>
            写入 Base64 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadBase64``1(System.String@,System.Text.Encoding)">
            <summary>
            读取 Base64 文件 根据编码
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadBase64UTF8``1(System.String@)">
            <summary>
            读取 Base64 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteBase64``1(System.String@,``0@,System.Text.Encoding)">
            <summary>
            写入 Base64 文件 根据编码
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteBase64UTF8``1(System.String@,``0@)">
            <summary>
            写入 Base64 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteBase64UTF8``1(System.String@,``0)">
            <summary>
            写入 Base64 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadJsonAsync``1(System.String,System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadJsonUTF8Async``1(System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteJsonAsync``1(System.String,``0,System.Boolean,System.String)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteJsonUTF8Async``1(System.String,``0,System.Boolean)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadJson``1(System.String@,System.Text.Encoding)">
            <summary>
            读取Json文件 根据编码
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadJsonUTF8``1(System.String@)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteJson``1(System.String@,``0@,System.Boolean@,System.Text.Encoding)">
            <summary>
            写入Json文件 根据编码
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteJsonUTF8``1(System.String@,``0@,System.Boolean@)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WritePListBinaryAsync(System.String,AIO.PList.PListRoot)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AHelper.IO.WritePListBinaryAsync(System.String,AIO.PList.PListDict)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AHelper.IO.WritePListAsync(System.String,AIO.PList.PListRoot)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AHelper.IO.WritePListAsync(System.String,AIO.PList.PListDict)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadPList(System.String@)">
            <summary>
            读取 Plist
            </summary>
        </member>
        <member name="M:AHelper.IO.WritePList(System.String@,AIO.PList.PListRoot)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AHelper.IO.WritePList(System.String@,AIO.PList.PListDict)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AHelper.IO.WritePListBinary(System.String@,AIO.PList.PListRoot)">
            <summary>
            写入 Plist 二进制
            </summary>
        </member>
        <member name="M:AHelper.IO.WritePListBinary(System.String@,AIO.PList.PListDict)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteTextAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            异步 将字符串按照指定编码写入文件,是否追加到文件尾
            </summary>
            <param name="path">路径</param>
            <param name="text">内容</param>
            <param name="charset">保存文本格式</param>
            <param name="concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AHelper.IO.ReadTextAsync(System.String,System.String)">
            <summary>
            异步 按照指定编码读取文本文件
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadText(System.String@,System.Text.Encoding)">
            <summary>
            按照指定编码读取文本文件
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteText(System.String,System.Text.StringBuilder,System.Text.Encoding,System.Boolean@)">
            <summary>
            将字符串按照指定编码写入文件,是否追加到文件尾
            </summary>
            <param name="path">路径</param>
            <param name="text">内容</param>
            <param name="charset">保存文本格式</param>
            <param name="concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AHelper.IO.WriteText(System.String@,System.String@,System.Text.Encoding,System.Boolean@)">
            <summary>
            将字符串按照指定编码写入文件,是否追加到文件尾
            </summary>
            <param name="path">路径</param>
            <param name="text">内容</param>
            <param name="charset">保存文本格式</param>
            <param name="concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AHelper.IO.ReadUnicodeAsync(System.String)">
            <summary>
            异步 按照UTF-8读取文本文件
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteUnicodeAsync(System.String,System.String,System.Boolean)">
            <summary>
            异步 将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="path">路径</param>
            <param name="text">内容</param>
            <param name="concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AHelper.IO.ReadUnicode(System.String@)">
            <summary>
            按照UTF-8读取文本文件
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteUnicode(System.String@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="path">路径</param>
            <param name="text">内容</param>
            <param name="concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AHelper.IO.WriteUnicode(System.String@,System.String@,System.Boolean@)">
            <summary>
            将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="path">路径</param>
            <param name="text">内容</param>
            <param name="concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AHelper.IO.ReadUTF8Async(System.String)">
            <summary>
            异步 按照UTF-8读取文本文件
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteUTF8Async(System.String,System.String,System.Boolean)">
            <summary>
            异步 将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="path">路径</param>
            <param name="text">内容</param>
            <param name="concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AHelper.IO.WriteUTF8Async(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            异步 将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="path">路径</param>
            <param name="text">内容</param>
            <param name="concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AHelper.IO.WriteUTF8(System.String@,System.String@,System.Boolean@)">
            <summary>
            将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="path">路径</param>
            <param name="text">内容</param>
            <param name="concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AHelper.IO.WriteUTF8(System.String@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="path">路径</param>
            <param name="text">内容</param>
            <param name="concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AHelper.IO.ReadUTF8(System.String@)">
            <summary>
            按照UTF-8读取文本文件
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadXmlAsync``1(System.String,System.String)">
            <summary>
            读取 XML 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadXmlUTF8Async``1(System.String)">
            <summary>
            读取 XML 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteXmlAsync``1(System.String,``0,System.String)">
            <summary>
            写入 XML 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteXmlUTF8Async``1(System.String,``0)">
            <summary>
            写入 XML 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadXml``1(System.String@,System.Text.Encoding)">
            <summary>
            读取 XML 文件 根据编码
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadXmlUTF8``1(System.String@)">
            <summary>
            读取 XML 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteXml``1(System.String@,``0@,System.Text.Encoding)">
            <summary>
            写入 XML 文件 根据编码
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteXmlUTF8``1(System.String@,``0@)">
            <summary>
            写入 XML 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadYamlAsync``1(System.String,System.String)">
            <summary>
            读取 Yaml 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadYamlUTF8Async``1(System.String)">
            <summary>
            读取 Yaml 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteYamlAsync``1(System.String,``0,System.String)">
            <summary>
            写入 Yaml 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteYamlUTF8Async``1(System.String,``0)">
            <summary>
            写入 Yaml 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadYaml``1(System.String@,System.Text.Encoding)">
            <summary>
            读取 Yaml 文件 根据编码
            </summary>
        </member>
        <member name="M:AHelper.IO.ReadYamlUTF8``1(System.String@)">
            <summary>
            读取 Yaml 文件 编码utf-8
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteYaml``1(System.String@,``0@,System.Text.Encoding)">
            <summary>
            写入 Yaml 文件 根据编码
            </summary>
        </member>
        <member name="M:AHelper.IO.WriteYamlUTF8``1(System.String@,``0@)">
            <summary>
            写入 Yaml 文件 编码utf-8
            </summary>
        </member>
        <member name="T:AHelper.Hash">
            <summary>
            hash工具
            </summary>
            <summary>
            hash工具
            </summary>
        </member>
        <member name="M:AHelper.Hash.StringSHA1(System.String@)">
            <summary>
            获取字符串的Hash值
            </summary>
        </member>
        <member name="M:AHelper.Hash.FileSHA1(System.String@)">
            <summary>
            获取文件的Hash值
            </summary>
        </member>
        <member name="M:AHelper.Hash.StreamSHA1(System.IO.Stream)">
            <summary>
            获取数据流的Hash值
            </summary>
        </member>
        <member name="M:AHelper.Hash.BytesSHA1(System.Byte[])">
            <summary>
            获取字节数组的Hash值
            </summary>
        </member>
        <member name="M:AHelper.Hash.StringMD5(System.String@)">
            <summary>
            获取字符串的MD5
            </summary>
        </member>
        <member name="M:AHelper.Hash.FileMD5(System.String@)">
            <summary>
            获取文件的MD5
            </summary>
        </member>
        <member name="M:AHelper.Hash.StreamMD5(System.IO.Stream)">
            <summary>
            获取数据流的MD5
            </summary>
        </member>
        <member name="M:AHelper.Hash.BytesMD5(System.Byte[])">
            <summary>
            获取字节数组的MD5
            </summary>
        </member>
        <member name="M:AHelper.Hash.StringCRC32(System.String)">
            <summary>
            获取字符串的CRC32
            </summary>
        </member>
        <member name="M:AHelper.Hash.FileCRC32(System.String)">
            <summary>
            获取文件的CRC32
            </summary>
        </member>
        <member name="M:AHelper.Hash.StreamCRC32(System.IO.Stream)">
            <summary>
            获取数据流的CRC32
            </summary>
        </member>
        <member name="M:AHelper.Hash.BytesCRC32(System.Byte[])">
            <summary>
            获取字节数组的CRC32
            </summary>
        </member>
        <member name="M:AHelper.Hash.GetHashCode``1(``0@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AHelper.Hash.GetHashCode``2(``0@,``1@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AHelper.Hash.GetHashCode``3(``0@,``1@,``2@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AHelper.Hash.GetHashCode``4(``0@,``1@,``2@,``3@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AHelper.Hash.GetHashCode``5(``0@,``1@,``2@,``3@,``4@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AHelper.Hash.GetHashCodeAlloc(System.Object[])">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="T:AHelper.Hex">
            <summary>
            16进制操作类
            </summary>
        </member>
        <member name="F:AHelper.Hex.HEX_BIT">
            <summary>
            16进制位控制符
            </summary>
        </member>
        <member name="F:AHelper.Hex.EMPTY_BYTE_ARRAY">
            <summary>
            空字节数组
            </summary>
        </member>
        <member name="F:AHelper.Hex.HEX_DIGIT">
            <summary>
            大写16进制数字字符
            </summary>
        </member>
        <member name="F:AHelper.Hex.HEX_DIGIT_LOWER">
            <summary>
            小写写16进制数字字符
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToDigit(System.Char@)">
            <summary>
            将16进制字符转换为数字
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHexChar(System.Int32@,System.Boolean@)">
            <summary>
            将数字转换为16进制字符
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHex(System.Char@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            将一个char转换为16进制并添加到字节缓存
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHex(System.Byte@,System.Boolean@)">
            <summary>
            将一个字节转换为16进制
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHex(System.Byte@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            将一个字节转换为16进制 ，并添加到字节缓存
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHex(System.Int16,System.Boolean)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHex(System.Int16,System.Text.StringBuilder,System.Boolean)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHex(System.Int32,System.Boolean)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHex(System.Int32,System.Text.StringBuilder,System.Boolean)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHex(System.Int64@,System.Boolean@)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHex(System.Collections.Generic.IList{System.Byte}@)">
            <summary>
            转换为16进制数据
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHex(System.Collections.Generic.IList{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            转换为16进制数据
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHex(System.Collections.Generic.IList{System.Byte}@,System.Boolean@)">
            <summary>
            转换为16进制数据
            </summary>
        </member>
        <member name="M:AHelper.Hex.ToHex(System.Collections.Generic.IList{System.Byte}@,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            转换为16进制数据
            </summary>
        </member>
        <member name="M:AHelper.Hex.ParseByte(System.String@)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AHelper.Hex.ParseShort(System.String)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AHelper.Hex.ParseInt(System.String)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AHelper.Hex.ParseLong(System.String@)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AHelper.Hex.ParseLong(System.String@,System.Int32,System.Int32)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AHelper.Hex.ParseLong(System.Collections.Generic.IList{System.Char}@,System.Int32,System.Int32)">
            <summary>
            将指定16进制字符数组转换为10进制数字
            </summary>
        </member>
        <member name="T:AHelper.Math">
            <summary>
            数学库
            </summary>
        </member>
        <member name="M:AHelper.Math.Log(System.Int32)">
            <summary>
            判断当前值是2的几次幂
            </summary>
        </member>
        <member name="M:AHelper.Math.Log(System.Int64)">
            <summary>
            判断当前值是2的几次幂
            </summary>
        </member>
        <member name="M:AHelper.Math.Clamp(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            该方法将给定的整数值限制在指定的范围内，并返回新的整数值。
            </summary>
            <param name = "value" > 要限制的整数值。</param>
            <param name = "min" > 范围的最小值。</param>
            <param name = "max" > 范围的最大值。</param>
            <returns>被限制的整数值，如果输入值在指定范围内则返回它本身。</returns>
            <remarks>
            如果输入值小于最小值，则返回最小值；如果输入值大于最大值，则返回最大值。
            该方法使用 C# 中的 "in" 关键字，表示输入参数是只读引用类型。
            </remarks> 
        </member>
        <member name="M:AHelper.Math.Clamp(System.Single@,System.Single@,System.Single@)">
            <summary>
            该方法将给定的整数值限制在指定的范围内，并返回新的整数值。
            </summary>
            <param name = "value" > 要限制的整数值。</param>
            <param name = "min" > 范围的最小值。</param>
            <param name = "max" > 范围的最大值。</param>
            <returns>被限制的整数值，如果输入值在指定范围内则返回它本身。</returns>
            <remarks>
            如果输入值小于最小值，则返回最小值；如果输入值大于最大值，则返回最大值。
            该方法使用 C# 中的 "in" 关键字，表示输入参数是只读引用类型。
            </remarks> 
        </member>
        <member name="M:AHelper.Math.InMask(System.Int32@,System.Int32@)">
            <summary>
            判断给定的层级是否在掩码中。
            </summary>
            <param name="layer">要判断的层级</param>
            <param name="mask">掩码，用二进制表示哪些层级被包括</param>
            <returns>如果层级在掩码中，返回 true；否则返回 false。</returns>
        </member>
        <member name="M:AHelper.Math.InMask(System.Int64@,System.Int64@)">
            <summary>
            判断给定的层级是否在掩码中。
            </summary>
            <param name="layer">要判断的层级</param>
            <param name="mask">掩码，用二进制表示哪些层级被包括</param>
            <returns>如果层级在掩码中，返回 true；否则返回 false。</returns>
        </member>
        <member name="M:AHelper.Math.OutMask(System.Int32@,System.Int32@)">
            <summary>
            判断给定的层级是否在掩码中。
            </summary>
            <param name="layer">要判断的层级</param>
            <param name="mask">掩码，用二进制表示哪些层级被包括</param>
            <returns>如果层级不在掩码中，返回 true；否则返回 false。</returns>
        </member>
        <member name="M:AHelper.Math.OutMask(System.Int64@,System.Int64@)">
            <summary>
            判断给定的层级是否在掩码中。
            </summary>
            <param name="layer">要判断的层级</param>
            <param name="mask">掩码，用二进制表示哪些层级被包括</param>
            <returns>如果层级不在掩码中，返回 true；否则返回 false。</returns>
        </member>
        <member name="M:AHelper.Math.ArrayPerCent(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            数组百分比计算
            </summary>
        </member>
        <member name="M:AHelper.Math.ArrayPerCent(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            数组百分比计算
            </summary>
        </member>
        <member name="M:AHelper.Math.ArrayPerCent(System.Collections.Generic.IList{System.Single}@)">
            <summary>
            数组百分比计算
            </summary>
        </member>
        <member name="F:AHelper.Math.EARTH_RADIUS">
            <summary>
            单位
            </summary>
        </member>
        <member name="F:AHelper.Math.Deg2Rad">
            <summary>
            单位
            </summary>
        </member>
        <member name="F:AHelper.Math.Rad2Deg">
            <summary>
            单位
            </summary>
        </member>
        <member name="M:AHelper.Math.Distance(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            计算两个点之间的直线距离。
            </summary>
            <param name="x1">第一个点的 x 坐标</param>
            <param name="y1">第一个点的 y 坐标</param>
            <param name="x2">第二个点的 x 坐标</param>
            <param name="y2">第二个点的 y 坐标</param>
            <returns>两个点之间的距离</returns>
        </member>
        <member name="M:AHelper.Math.Sin(System.Double@)">
            <summary>
            返回给定角度的正弦值。
            </summary>
            <param name="f">给定角度，单位为弧度</param>
            <returns>角度的正弦值</returns>
        </member>
        <member name="M:AHelper.Math.Asin(System.Double@)">
            <summary>
            返回给定角度的反正弦值。
            </summary>
            <param name="f">要计算反正弦值的角度，范围为 -1 到 1 之间</param>
            <returns>指定角度的反正弦值，返回值的单位为弧度</returns>
        </member>
        <member name="M:AHelper.Math.Cos(System.Double@)">
            <summary>
            返回给定角度的余弦值。
            </summary>
            <param name="f">要计算余弦值的角度，单位为弧度</param>
            <returns>指定角度的余弦值</returns>
        </member>
        <member name="M:AHelper.Math.Acos(System.Double@)">
            <summary>
            返回给定角度的反余弦值。
            </summary>
            <param name="f">要计算反余弦值的角度，范围为 -1 到 1 之间</param>
            <returns>指定角度的反余弦值，返回值的单位为弧度</returns>
        </member>
        <member name="M:AHelper.Math.Abs(System.Double@)">
            <summary>
            返回给定值的绝对值。
            </summary>
            <param name="value">要计算绝对值的值</param>
            <returns>指定值的绝对值</returns>
        </member>
        <member name="M:AHelper.Math.Abs(System.Single@)">
            <summary>
            返回给定值的绝对值。
            </summary>
            <param name="value">要计算绝对值的值</param>
            <returns>指定值的绝对值</returns>
        </member>
        <member name="M:AHelper.Math.Abs(System.Int64@)">
            <summary>
            返回给定值的绝对值。
            </summary>
            <param name="value">要计算绝对值的值</param>
            <returns>指定值的绝对值</returns>
        </member>
        <member name="M:AHelper.Math.Round(System.Double@)">
            <summary>
            对传入的 double 类型数值进行四舍五入操作。
            </summary>
            <param name="value">需要进行四舍五入的 double 类型数值。</param>
            <returns>返回四舍五入后的 double 类型数值。</returns>
        </member>
        <member name="M:AHelper.Math.Ceil(System.Double@)">
            <summary>
            对传入的 double 类型数值进行向上取整操作。
            </summary>
            <param name="value">需要进行向上取整的 double 类型数值。</param>
            <returns>返回向上取整后的 double 类型数值。</returns>
        </member>
        <member name="M:AHelper.Math.Floor(System.Double@)">
            <summary>
            对传入的 double 类型数值进行向下取整操作。
            </summary>
            <param name="value">需要进行向下取整的 double 类型数值。</param>
            <returns>返回向下取整后的 double 类型数值。</returns>
        </member>
        <member name="M:AHelper.Math.Mod(System.Int32,System.Int32@)">
            <summary>
            对传入的 int 类型数值进行模运算操作，返回非负结果。
            </summary>
            <param name="value">需要进行模运算的 int 类型数值。</param>
            <param name="space">模数，即取模时的除数，必须为正整数。</param>
            <returns>返回非负的模运算结果。</returns>
        </member>
        <member name="M:AHelper.Math.GetGPSDistance(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            计算两个 GPS 坐标点之间的距离（单位：米）。
            </summary>
            <param name="lat1">第一个坐标点的纬度。</param>
            <param name="lng1">第一个坐标点的经度。</param>
            <param name="lat2">第二个坐标点的纬度。</param>
            <param name="lng2">第二个坐标点的经度。</param>
            <returns>返回两个 GPS 坐标点之间的距离（单位：米）。</returns>
        </member>
        <member name="M:AHelper.Math.Rad(System.Double@)">
            <summary>
            将角度转换为弧度。
            </summary>
            <param name="d">需要转换的角度。</param>
            <returns>返回对应的弧度值。</returns>
        </member>
        <member name="M:AHelper.Math.GetDistance(System.Double)">
            <summary>
            将距离值转换为字符串，单位为米或千米。
            </summary>
            <param name="value">需要转换的距离值。</param>
            <returns>返回对应的字符串，包含单位。</returns>
        </member>
        <member name="T:AHelper.MD5">
            <summary>
            计算MD5
            </summary>
        </member>
        <member name="M:AHelper.MD5.GetMD5(System.IO.Stream,System.Int64@)">
            <summary>
            通过HashAlgorithm的TransformBlock方法对流进行叠加运算获得MD5
            实现稍微复杂，但可使用与传输文件或接收文件时同步计算MD5值
            可自定义缓冲区大小，计算速度较快
            </summary>
            <param name="stream">数据流</param>
            <param name="bufferSize">自定义缓冲区大小16K</param>
            <returns>MD5Hash</returns>
        </member>
        <member name="M:AHelper.MD5.GetMD5ByHashAlgorithm(System.IO.Stream,System.Int64@)">
            <summary>
            通过HashAlgorithm的TransformBlock方法对流进行叠加运算获得MD5
            实现稍微复杂，但可使用与传输文件或接收文件时同步计算MD5值
            可自定义缓冲区大小，计算速度较快
            </summary>
            <param name="stream"></param>
            <param name="bufferSize">自定义缓冲区大小16K</param>
        </member>
        <member name="T:AHelper.Random">
            <summary>
            随机数工具类
            </summary>
        </member>
        <member name="M:AHelper.Random.Refresh">
            <summary>
            刷新随机种子
            </summary>
        </member>
        <member name="M:AHelper.Random.Refresh(System.Random@)">
            <summary>
            刷新随机种子
            </summary>
        </member>
        <member name="M:AHelper.Random.Refresh(System.Int32@)">
            <summary>
            刷新随机种子
            </summary>
        </member>
        <member name="M:AHelper.Random.RandArray``1(System.Int32,System.Collections.Generic.ICollection{``0}@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandArray``1(System.Int32@,System.Collections.Generic.IList{``0}@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandArray``1(System.Int32,System.Collections.Generic.IList{``0},System.Int32@,System.Int32)">
            <param name="array"></param>
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
            <param name="count"></param>
        </member>
        <member name="M:AHelper.Random.RandArray``2(System.Int32@,System.Collections.Generic.IDictionary{``0,``1}@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="array"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandArrayValue``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandArrayValue``1(System.Collections.Generic.ICollection{``0}@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:AHelper.Random.RandArrayValue``2(System.Collections.Generic.IDictionary{``0,``1}@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:AHelper.Random.RandArrayValue``1(System.Collections.Generic.IList{``0}@,System.Int32@,System.Int32@)">
            <param name="array"></param>
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AHelper.Random.RandArrayValue``1(System.Collections.Generic.ICollection{``0}@,System.Int32@,System.Int32)">
            <param name="array"></param>
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AHelper.Random.RandArrayValue``2(System.Collections.Generic.IDictionary{``0,``1}@,System.Int32@,System.Int32)">
            <param name="array"></param>
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AHelper.Random.RandArrayWeight(System.Collections.Generic.IList{System.Single}@)">
            <summary>
            随机权重 
            </summary>
            <param name="weights">传入数组的总和 应为1</param>
        </member>
        <member name="M:AHelper.Random.RandArrayWeight``1(System.Collections.Generic.IList{System.Single}@,System.Collections.Generic.IList{``0}@)">
            <summary>
            随机权重
            </summary>
            <param name="weights">传入数组的总和 应为1</param>
            <param name="values"></param>
        </member>
        <member name="M:AHelper.Random.RandBool">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandBoolArray(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandBytes(System.Byte@,System.Int32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AHelper.Random.RandByteArray(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandByteArray(System.Int32@,System.Int32@,System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:AHelper.Random.RandSByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandSByteArray(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandSByteArray(System.Int32@,System.SByte@,System.SByte@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandUInt16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandUInt16(System.UInt16@,System.Int32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AHelper.Random.RandUInt16Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandUInt32(System.UInt32@,System.UInt32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AHelper.Random.RandUInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandUInt32Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandUInt64(System.UInt64@,System.UInt64@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AHelper.Random.RandUInt64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandUInt64Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandInt16(System.Int16@,System.Int32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AHelper.Random.RandInt16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandInt16Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandInt32(System.Int32@,System.Int32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AHelper.Random.RandInt32Array(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="count"></param>
            <param name="minValue">下限-包含</param>
            <param name="maxValue">上限-不包含</param>
            <param name="hasRepeat">是否包含重复 Ture:包含 False:不包含</param>
        </member>
        <member name="M:AHelper.Random.RandInt32ArrayWeight(System.Collections.Generic.IList{System.Int32})">
            <summary>
            
            </summary>
            <param name="weights"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandInt32ArrayWeight(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            
            </summary>
            <param name="weights"></param>
            <param name="weightRandomMinVal"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandInt64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandInt64(System.Int64@,System.Int64@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AHelper.Random.RandInt64Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandFloat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandFloat(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="hasNan"></param>
            <param name="hasInfinity"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.RandDouble">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AHelper.Random.BreakArray``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AHelper.Random.BreakArray``1(System.Collections.Generic.IList{``0},System.Int32@,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:AHelper.Random.NextLong(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:AHelper.Status">
            <summary>
            状态值比较
            </summary>
            <summary>
            状态值比较类
            </summary>
            <summary>
            状态值比较类
            </summary>
            <summary>
            状态值比较类
            </summary>
            <summary>
            状态值比较类
            </summary>
            <summary>
            状态比较 推荐使用Int值 并且 不推荐使用枚举 装箱拆箱性能消耗与int值相比 差距是两倍
            实例 10000000次
            耗时 枚举转换 4
            耗时 Int转换  2
            耗时 long转换  4
            耗时 Convert转换  1504
            </summary>
        </member>
        <member name="M:AHelper.Status.Square(System.Int32,System.Int32)">
            <summary>
            2次幂运算 判断是否相等
            </summary>
            <param name="index">次幂值 T:1,2,3..</param>
            <param name="mask">对比值 T:4,8,16,32..</param>
            <returns>Ture:相等 Flase:不相等</returns>
            <!--
            1 << 2 = 4 相等
            1 << 3 = 8 不相等
            -->
        </member>
        <member name="M:AHelper.Status.Square(System.Int64,System.Int64)">
            <summary>
            2次幂运算 判断是否相等
            </summary>
            <param name="index">次幂值 T:1,2,3..</param>
            <param name="mask">对比值 T:4,8,16,32..</param>
            <returns>Ture:相等 Flase:不相等</returns>
        </member>
        <member name="M:AHelper.Status.Mix(System.Enum,System.Enum)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AHelper.Status.Mix(System.Byte@,System.Byte@)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AHelper.Status.Mix(System.Int16@,System.Int16@)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AHelper.Status.Mix(System.Int32@,System.Int32@)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AHelper.Status.Mix(System.Int64@,System.Int64@)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AHelper.Status.Set``1(``0,``0,System.Boolean@)">
            <summary>
            设置状态 要求枚举结构顺序为 幂次序
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <param name="b">Ture 状态添加 false 状态移除</param>
        </member>
        <member name="M:AHelper.Status.Set(System.Int16@,System.Int16@,System.Boolean@)">
            <summary>
            设置状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <param name="b">Ture 状态添加 false 状态移除</param>
        </member>
        <member name="M:AHelper.Status.Set(System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            设置状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <param name="b">Ture 状态添加 false 状态移除</param>
        </member>
        <member name="M:AHelper.Status.Set(System.Int64@,System.Int64@,System.Boolean@)">
            <summary>
            设置状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <param name="b">Ture 状态添加 false 状态移除</param>
        </member>
        <member name="M:AHelper.Status.Has(System.Enum@,System.Enum@)">
            <summary>
            是否有指定状态（包含指定状态，但不限于指定状态）
            </summary>
        </member>
        <member name="M:AHelper.Status.Has(System.Int16@,System.Int16@)">
            <summary>
            是否有指定状态（包含指定状态，但不限于指定状态）
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AHelper.Status.Has(System.Int32@,System.Int32@)">
            <summary>
            是否有指定状态（包含指定状态，但不限于指定状态）
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AHelper.Status.Has(System.Int64@,System.Int64@)">
            <summary>
            是否有指定状态（包含指定状态，但不限于指定状态）
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AHelper.Status.Only``1(``0@,``0@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AHelper.Status.Only(System.Int32@,System.Int32@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AHelper.Status.Only(System.Int64@,System.UInt32@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AHelper.Status.Only(System.Int64@,System.Int64@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AHelper.Status.Only(System.UInt64@,System.UInt64)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AHelper.Status.Only(System.Int16@,System.Int16@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AHelper.Status.Only(System.UInt16@,System.UInt16@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AHelper.Status.Only(System.Byte@,System.Byte@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AHelper.Status.Only(System.Single@,System.Single@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AHelper.Status.Del``1(``0@,``0@)">
            <summary>
            删除状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="M:AHelper.Status.Del(System.Byte@,System.Byte@)">
            <summary>
            删除状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="M:AHelper.Status.Del(System.Int16@,System.Int16@)">
            <summary>
            删除状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="M:AHelper.Status.Del(System.Int32@,System.Int32@)">
            <summary>
            删除状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="M:AHelper.Status.Del(System.Int64@,System.Int64@)">
            <summary>
            删除状态 2次幂序
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="T:AHelper.Time">
            <summary>
            时间方法库
            </summary>
        </member>
        <member name="P:AHelper.Time.BeforeYesterday">
            <summary>
            前天开始时间 单位毫秒
            </summary>
        </member>
        <member name="P:AHelper.Time.Yesterday">
            <summary>
            昨天开始时间 单位毫秒
            </summary>
        </member>
        <member name="P:AHelper.Time.Today">
            <summary>
            当天开始时间 单位毫秒
            </summary>
        </member>
        <member name="P:AHelper.Time.TomorrowDay">
            <summary>
            明天开始时间 单位毫秒
            </summary>
        </member>
        <member name="P:AHelper.Time.AfterDay">
            <summary>
            后天开始时间 单位毫秒
            </summary>
        </member>
        <member name="M:AHelper.Time.GetCurrTimeStr(System.String@)">
            <summary>
            获取当前时间 文字格式
            </summary>
        </member>
        <member name="M:AHelper.Time.GetCurrTime(AIO.Unit.Time.SencondUnit@)">
            <summary>
            获取当前时间搓
            </summary>
        </member>
        <member name="M:AHelper.Time.GetDateTime(System.String@,AIO.Unit.Time.SencondUnit@)">
            <summary>
            获取时间搓
            </summary>
        </member>
        <member name="M:AHelper.Time.Format(System.Int64@,System.String@,AIO.Unit.Time.SencondUnit)">
            <summary>
            格式化时间，参数：格林威治时间，格式化格式（具体见文件末尾）
            </summary>
        </member>
        <member name="M:AHelper.Time.GetDateTime(System.Int64@,AIO.Unit.Time.SencondUnit@)">
            <summary>
            © 获取DateTime 时间磋单位支持 纳秒 微秒 毫秒 秒
            </summary>
        </member>
        <member name="M:AHelper.Time.GetTimeSpan(System.Int64@,AIO.Unit.Time.SencondUnit@)">
            <summary>
            © 获取TimeSpan 时间磋单位支持 纳秒 微秒 毫秒 秒
            </summary>
        </member>
        <member name="M:AHelper.Time.Normalize(System.DateTime@,AIO.Unit.Time.SencondUnit@)">
            <summary>
            获取指定单位的时间搓
            </summary>
        </member>
        <member name="M:AHelper.Time.GetCurrDateToDay(System.Int32@,AIO.Unit.Time.SencondUnit@)">
            <summary>
            获取当天差距 时间信息
            </summary>
        </member>
        <member name="M:AHelper.Time.GetTimeStartByType(System.Int64@,AIO.Unit.Time.DateTimeUnit@,AIO.Unit.Time.SencondUnit@)">
            <summary>
            获取开始时间
            </summary>
            <param name="time">时间搓</param>
            <param name="DateType">获取类型 年 季 月 周 日</param>
            <param name="unit">时间搓 单位 纳秒 微秒 毫秒 秒</param>
        </member>
        <member name="M:AHelper.Time.GetTimeEndByType(System.Int64@,AIO.Unit.Time.DateTimeUnit@,AIO.Unit.Time.SencondUnit@)">
            <summary>
            获取结束时间
            </summary>
            <param name="time">时间搓</param>
            <param name="DateType">获取类型 年 季 月 周 日</param>
            <param name="unit">时间搓 单位 纳秒 微秒 毫秒 秒</param>
        </member>
        <member name="M:AHelper.Time.GetCountDown(System.Int64@,AIO.Unit.Time.SencondUnit@)">
            <summary>
            获取时间倒计时字符串表示(ms) 01:59:08
            </summary>
        </member>
        <member name="M:AHelper.Time.GetPreHumanityTime(System.Int64,AIO.Unit.Time.SencondUnit@)">
            <summary>
            获取传入时间距离当前时间的文字描述
            </summary>
        </member>
        <member name="M:AHelper.Time.CompareNowTime(System.DateTime@)">
            <summary>
            与当前时间比较 如果小于当前时间为Ture
            </summary>
        </member>
        <member name="M:AHelper.Time.CompareNowTime(System.Int64@,AIO.Unit.Time.SencondUnit@)">
            <summary>
            与当前时间比较 如果小于当前时间为Ture
            </summary>
        </member>
        <member name="M:AHelper.Time.DateStringFromNow(System.DateTime@)">
            <summary>
            求离最近发表时间的函数
            </summary>
            <returns> 返回时间描述 </returns>
        </member>
        <member name="M:AHelper.Time.CompareDateDay(System.String@,System.String@,System.Int32@)">
            <summary>
            日期比较
            </summary>
            <param name="today">当前日期</param>
            <param name="writeDate">输入日期</param>
            <param name="n">比较天数</param>
            <returns>大于天数返回true，小于返回false</returns>
        </member>
        <member name="M:AHelper.Time.GetDisTime(System.DateTime@,System.DateTime@,System.String@)">
            <summary>
            获取两时间相差
            </summary>
        </member>
        <member name="M:AHelper.Time.GetDisTime(System.Int64@,System.Int64@,System.String@)">
            <summary>
            获取两时间相差
            </summary>
        </member>
        <member name="M:AHelper.Time.IsToday(System.Int64@,System.Int64@,AIO.Unit.Time.SencondUnit@)">
            <summary>
            判断是否同日
            </summary>
        </member>
        <member name="T:AHelper.IDNo">
            <summary>
            身份证判断方法
            </summary>
        </member>
        <member name="F:AHelper.IDNo.REGEX_ID_NO_18">
            <summary>
            18位二代身份证号码的正则表达式
            </summary>
        </member>
        <member name="F:AHelper.IDNo.W">
            <summary>
            加权因子
            </summary>
        </member>
        <member name="F:AHelper.IDNo.CheckNumberArray">
            <summary>
             
            </summary>
        </member>
        <member name="M:AHelper.IDNo.CheckIDNo(System.String)">
            <summary>
            判断当前字符是否符合中国身份证
            </summary>
        </member>
        <member name="M:AHelper.IDNo.CheckIDNo18(System.String)">
            <summary>
            判断当前字符是否符合中国18位身份证
            </summary>
        </member>
        <member name="M:AHelper.IDNo.UpdateIDNo15to18(System.String)">
            <summary>
            15位省份证升级至18位
            </summary>
        </member>
        <member name="M:AHelper.IDNo.ComputeCheckNumber(System.String)">
            <summary>
            计算校验码 适用于18位的二代身份证号码
            </summary>
            <param name="masterNumber">本体码</param>
            <returns>校验码</returns>
        </member>
        <member name="M:AHelper.IDNo.ValidateCheckNumber(System.String)">
            <summary>
            校验身份证号码的验证码
            </summary>
        </member>
        <member name="T:AHelper.MaskWord">
            <summary> 
            屏蔽字
            </summary>
        </member>
        <member name="M:AHelper.MaskWord.Replace(System.String)">
            <summary>
            替换屏蔽字为*
            </summary>
        </member>
        <member name="M:AHelper.MaskWord.LoadMaskWord(System.String)">
            <summary>
            加载屏蔽文本
            </summary>
        </member>
        <member name="T:AHelper.String">
            <summary>
            字符串工具库
            </summary>
        </member>
        <member name="M:AHelper.String.Format(System.String,System.Object)">
            <summary>
            字符串格式化
            </summary>
            <param name="format">格式化</param>
            <param name="arg0">参数</param>
            <returns>字符串</returns>
            <exception cref="T:System.ArgumentNullException">参数异常</exception>
        </member>
        <member name="M:AHelper.String.Format(System.String,System.Object,System.Object)">
            <summary>
            字符串格式化
            </summary>
            <param name="format">格式化</param>
            <param name="arg0">参数</param>
            <param name="arg1">参数</param>
            <returns>字符串</returns>
            <exception cref="T:System.ArgumentNullException">参数异常</exception>
        </member>
        <member name="M:AHelper.String.Format(System.String,System.Object,System.Object,System.Object)">
            <summary>
            字符串格式化
            </summary>
            <param name="format">格式化</param>
            <param name="arg0">参数</param>
            <param name="arg1">参数</param>
            <param name="arg2">参数</param>
            <returns>字符串</returns>
            <exception cref="T:System.ArgumentNullException">参数异常</exception>
        </member>
        <member name="M:AHelper.String.Format(System.String,System.Object[])">
            <summary>
            字符串格式化
            </summary>
            <param name="format">格式化</param>
            <param name="args">参数</param>
            <returns>字符串</returns>
            <exception cref="T:System.ArgumentNullException">参数异常</exception>
        </member>
        <member name="M:AHelper.String.RemoveFirstChar(System.String)">
            <summary>
            移除第一个字符
            </summary>
            <param name="str">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AHelper.String.RemoveLastChar(System.String)">
            <summary>
            移除最后一个字符
            </summary>
            <param name="str">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AHelper.String.RemoveExtension(System.String)">
            <summary>
            移除扩展名
            </summary>
            <param name="str">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AHelper.String.ToConvertBlock(System.String[])">
            <summary>
            转化为区块
            </summary>
        </member>
        <member name="M:AHelper.String.ToConvertSpace(System.String[])">
            <summary>
            转化为区块
            </summary>
        </member>
        <member name="M:AHelper.String.ToConvert(AIO.StringBlock@,System.String[])">
            <summary>
            转化为区块
            </summary>
        </member>
        <member name="M:AHelper.String.ToConvertUnitsCNS(System.String,System.Int32@)">
            <summary>
            阿拉伯数字全部转化为中文数字 有单位 传入需全部为数字字符 简体中文
            </summary>
            <param name="num"></param>
            <param name="unitNum">单位截止下标,默认0,1:万后,2:亿后,3:万亿</param>
        </member>
        <member name="M:AHelper.String.ToConvertNoUnitsCNS(System.String)">
            <summary>
            阿拉伯数字全部转化为中文数字 无单位 传入需全部为数字字符 简体中文
            </summary>
        </member>
        <member name="M:AHelper.String.StringToHexView(System.Byte[]@,System.Int32)">
            <summary>
            二进制转字符串
            </summary>
            <param name="buff"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.String.StringToHex(System.Byte[]@,System.Int32)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.String.HexStringToBytes(System.String@)">
            <summary>
            
            </summary>
            <param name="hexStr"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.String.BtsToBase64(System.Byte[]@)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.String.Base64ToBts(System.String@)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.String.GetMD5(System.String@,System.Text.Encoding@)">
            <summary>
            
            </summary>
            <param name="sDataIn"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.String.GetMD5(System.Collections.Generic.ICollection{System.String}@,System.Text.Encoding@)">
            <summary>
            
            </summary>
            <param name="sDataIn"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.String.IsNullOrWhiteSpace(System.String@)">
            <summary>
            是空还是空白
            </summary>
        </member>
        <member name="M:AHelper.String.FallbackEmpty(System.String,System.String@)">
            <summary>
            如果指示指定的字符串是 null 还是 System.String.Empty 字符串。
            则回退
            </summary>
        </member>
        <member name="M:AHelper.String.FallbackWhitespace(System.String,System.String@)">
            <summary>
            如果所有字符串为空白则回退
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateMonth(System.String@)">
            <summary>
            验证一年的12个月
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateChinese(System.String@)">
            <summary>
            验证输入汉字
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateLength(System.String@,System.Int32)">
            <summary>
            验证输入字符串 是否满足指定个数
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateMinMaxLength(System.String@,System.Int32,System.Int32)">
            <summary>
            验证当前字符串是否在指定长度范围内
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateDay(System.String@)">
            <summary>
            验证一个月的31天
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidate2Decimal(System.String@)">
            <summary>
            验证两位小数
            </summary>
        </member>
        <member name="M:AHelper.String.IsNullOrEmpty(System.String@)">
            <summary> 
            判断字符是否为空 
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateNumeric(System.String@)">
            <summary>
            是否为Numeric
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateInt(System.String@)">
            <summary>
            是否为Int
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateBool(System.String@)">
            <summary>
            是否为Bool
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateNum(System.String)">
            <summary>
            是否为整数
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateUnsign(System.String)">
            <summary>
            是否为Unsign
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateDate(System.String@)">
            <summary>
            验证是否为 YYYY MM DD 格式 包含闰年 平年
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateDateString(System.String@)">
            <summary>
            判断字符串是否是yy-mm-dd字符串
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidatePhone(System.String@)">
            <summary>
            验证手机号码
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateIPSect(System.String@)">
            <summary>
            是否为IP分段
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateEmail(System.String@)">
            <summary>
            是否电子邮件
            </summary>
        </member>
        <member name="M:AHelper.String.IsPostalcode(System.String@)">
            <summary>
            验证邮编
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateIDcard(System.String@)">
            <summary>
            验证身份证号
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateIDcard18(System.String@)">
            <summary>
            验证中国身份证号18
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateIDcard15(System.String@)">
            <summary>
            验证身份证号15
            </summary>
        </member>
        <member name="M:AHelper.String.IDcard15To18(System.String@)">
            <summary>
            15位省份证号码升18位
            </summary>
        </member>
        <member name="M:AHelper.String.GetHttpHost(System.String@)">
            <summary>
            获取Http主机名 如果有端口 包含端口
            </summary>
        </member>
        <member name="M:AHelper.String.GetRegexMatches(System.String@,System.String)">
            <summary>
            根据正则表达式 获取对应内容
            </summary>
        </member>
        <member name="M:AHelper.String.IsValidateUrl(System.String,System.String)">
            <summary>
            验证URL是否有效
            </summary>
        </member>
        <member name="T:AHelper.Marshal">
            <summary>
            SMarshal 类
            </summary>
            <see>
                <cref>https://msdn.microsoft.com/zh-cn/library/system.runtime.interopservices.marshal(VS.80).aspx</cref>
            </see>
            <!--提供了一个方法集，这些方法用于分配非托管内存、复制非托管内存块、将托管类型转换为非托管类型 此外还提供了在与非托管代码交互时使用的其他杂项方法-->
            <!--备注 SMarshal 类中定义的 static 方法对于处理非托管代码至关重要。此类中定义的大多数方法通常由需要-->
            <!--此类型的任何公共静态（Visual Basic 中的 Shared）成员都是线程安全的，但不保证所有实例成员都 是线程安全的-->
        </member>
        <member name="P:AHelper.Marshal.SystemDefaultCharSize">
            <summary>
            表示系统上的默认字符大小；Unicode 系统上默认值为 2，ANSI 系统上默认值为 1。 此字段为只读。
            </summary>
        </member>
        <member name="P:AHelper.Marshal.SystemMaxDBCSCharSize">
            <summary>
            表示用于当前操作系统的双字节字符集 (DBCS) 的最大大小（以字节为单位）。 此字段为只读。
            </summary>
        </member>
        <member name="M:AHelper.Marshal.SizeOf``1(``0)">
            <summary>
            获取 结构体实例 空间大小
            </summary>
            <param name="obj">返回对象的非托管大小 以字节为单位</param>
        </member>
        <member name="M:AHelper.Marshal.SizeOf``1">
            <summary>
            获取 结构体实例 空间大小
            </summary>
        </member>
        <member name="M:AHelper.Marshal.AllocHGlobal(System.Int32)">
            <summary>
            使用指定的字节数从进程的非托管内存中分配内存。
            </summary>
            <param name="size">内存中所需的字节数</param>
            <returns>一个指向新分配内存的指针 这个内存必须使用Marshal.FreeHGlobal 来释放 </returns>
        </member>
        <member name="M:AHelper.Marshal.AddRef(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.AllocCoTaskMem(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.AreComObjectsAvailableForCleanup">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.BindToMoniker(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.CleanupUnusedObjectsInCurrentContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.AllocHGlobal(System.IntPtr)">
            <summary>
            使用指定的字节数从进程的非托管内存中分配内存。
            </summary>
            <param name="ptr">内存中所需的字节数</param>
            <returns>一个指向新分配内存的指针 这个内存必须使用Marshal.FreeHGlobal 来释放 </returns>
        </member>
        <member name="M:AHelper.Marshal.FreeHGlobal(System.IntPtr)">
            <summary>
            释放内存中指针
            </summary>
            <param name="hglobal">内存中的指针</param>
        </member>
        <member name="M:AHelper.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
            <summary>
            创建聚合对象
            </summary>
            <param name="ptr">指针</param>
            <param name="obj">数据</param>
        </member>
        <member name="M:AHelper.Marshal.CreateWrapperOfType``1(System.Object)">
            <summary>
            创建类型的包装器
            </summary>
            <typeparam name="T">结构类型</typeparam>
            <param name="obj">数据</param>
            <returns>包装数据</returns>
        </member>
        <member name="M:AHelper.Marshal.CreateWrapperOfType``2(``0)">
            <summary>
            创建类型的包装器
            </summary>
            <typeparam name="T">结构类型</typeparam>
            <typeparam name="TWrapper">包装器</typeparam>
            <param name="obj">数据</param>
            <returns>包装器</returns>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadByte(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadByte(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadByte(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadInt16(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadInt16(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadInt16(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadInt32(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadInt32(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadInt32(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadInt64(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadInt64(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadInt64(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadIntPtr(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReadIntPtr(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteByte(System.IntPtr,System.Byte)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteInt16(System.IntPtr,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteInt16(System.IntPtr,System.Int16)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteInt32(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteInt64(System.IntPtr,System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ZeroFreeBSTR(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.DestroyStructure(System.IntPtr,System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.DestroyStructure``1(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.FinalReleaseComObject(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.FreeBSTR(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.FreeCoTaskMem(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
            <summary>
            将数据从托管对象封送到非托管内存块
            </summary>
            <typeparam name="T">保存要封送的数据的托管对象 此对象必须是格式化类的结构或实例</typeparam>
            <param name="obj">实例</param>
            <param name="ptr">指向非托管内存块的指针，在调用此方法之前必须分配该内存块</param>
            <param name="fDeleteOld">在ptr参数上使用DestroyStructure方法复制数据</param>
        </member>
        <member name="M:AHelper.Marshal.ThrowExceptionForHR(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.IsComObject(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.OffsetOf(System.Type,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.OffsetOf``1(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Prelink(System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.PrelinkAll(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.StringToBSTR(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.StringToCoTaskMemAnsi(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.StringToCoTaskMemAuto(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.StringToCoTaskMemUni(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.StringToHGlobalAnsi(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.StringToHGlobalAuto(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.StringToHGlobalUni(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.SecureStringToBSTR(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.Release(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.ReleaseComObject(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.PtrToStringAnsi(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.PtrToStringAuto(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.PtrToStringBSTR(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.PtrToStringUni(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.PtrToStructure(System.IntPtr,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.PtrToStructure(System.IntPtr,System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.PtrToStructure``1(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.PtrToStructure``1(System.IntPtr,``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetComInterfaceForObject``2(``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetExceptionCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetExceptionForHR(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetFunctionPointerForDelegate``1(``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetHRForException(System.Exception)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetHRForLastWin32Error">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetIUnknownForObject(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetLastWin32Error">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetObjectForIUnknown(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetObjectForNativeVariant(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="aSrcNativeVariant"></param>
            <param name="cVars"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AHelper.Marshal.GetStartComSlot(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Marshal.GetTypeFromCLSID(System.Guid)">
            <summary>
            
            </summary>
            <param name="clsid"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AHelper.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="T:AHelper.Assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="M:AHelper.Assembly.GetAllType">
            <summary>
            获取所有的类
            </summary>
        </member>
        <member name="M:AHelper.Assembly.GetAllType``1">
            <summary>
            获取所有的类
            </summary>
        </member>
        <member name="M:AHelper.Assembly.GetReferenceAssemblies(System.AppDomain)">
            <summary>
            获取所有程序集
            </summary>
        </member>
        <member name="M:AHelper.Assembly.GetAllAssembliesHasAttributeType``1">
            <summary>
            获取全部程序集中 包含指定特性的类 输出 key=命名空间加类名 value=类
            </summary>
        </member>
        <member name="M:AHelper.Assembly.GetMethodInfo(System.String,System.String,System.String)">
            <summary>
            获取方法
            </summary>
        </member>
        <member name="M:AHelper.Assembly.GetMethodInfo(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            获取方法
            </summary>
        </member>
        <member name="M:AHelper.Assembly.GetMethodInfo``1(``0,System.String)">
            <summary>
            获取方法
            </summary>
        </member>
        <member name="T:AHelper.Class">
            <summary>
            类工具
            </summary>
        </member>
        <member name="M:AHelper.Class.RemoveAllEvent``1(``0,System.String)">
            <summary>
            清除事件
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
        </member>
        <member name="M:AHelper.Class.GetMembers(System.Object,System.Reflection.BindingFlags)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Class.GetMethods(System.Object,System.Reflection.BindingFlags)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:AHelper.Class.GetType(System.String)">
            <summary>
            C# Type类获取类型方法(通过字符串型的类名)
            </summary>
        </member>
        <member name="T:AHelper.GC">
            <see>
                <cref>https://docs.microsoft.com/zh-cn/dotnet/api/system.gc?view=net-5.0</cref>
            </see>
            <!--公共语言运行时中的垃圾回收器支持使用代的对象老化。 代是内存中对象的相对生存期的单位。
            对象的代数或 age 指示对象所属的代。 最近创建的对象是较新的生成的一部分，其生成号比之前在应用程序生命周期中创建的对象的生成号要低。
            最近一代中的对象位于第0代中。 垃圾回收器的这种实现支持三代对象，第0代、第1代和第2代。
            可以检索属性的值 MaxGeneration ，以确定系统支持的最大代数。-->
        </member>
        <member name="P:AHelper.GC.MaxGeneration">
            <summary>
            获取系统当前支持的最大代数
            </summary>
        </member>
        <member name="M:AHelper.GC.SuppressFinalize(System.Object)">
            <summary>
            阻止GC调用Finalize方法
            </summary>
            <!--因为Finalize方法的调用会牺牲部分性能。如果你的Dispose方法已经对委托管资源作了清理，就没必要让GC再调用对象的Finalize方法-->
        </member>
        <member name="M:AHelper.GC.Collect">
            <summary>
            强制对所有代进行即时垃圾回收
            </summary>
        </member>
        <member name="M:AHelper.GC.Collect(System.Int32)">
            <summary>
            强制对 0 代到指定代进行即时垃圾回收。
            </summary>
            <param name="generation">代</param>
        </member>
        <member name="M:AHelper.GC.Collect(System.Int32,System.GCCollectionMode)">
            <summary>
            强制在 GCCollectionMode 值所指定的时间对 0 代到指定代进行垃圾回收。
            </summary>
            <param name="generation">代</param>
            <param name="gCCollectionMode">GC模式集合</param>
        </member>
        <member name="M:AHelper.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)">
            <summary>
            在由 GCCollectionMode 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收是否应该为阻碍性。
            </summary>
            <param name="generation">代</param>
            <param name="gCCollectionMode">GC模式集合</param>
            <param name="blocking">阻塞</param>
        </member>
        <member name="M:AHelper.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)">
            <summary>
            在由 GCCollectionMode 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收应该为阻碍性还是压缩性。
            </summary>
            <param name="generation">代</param>
            <param name="gCCollectionMode">GC模式集合</param>
            <param name="blocking">阻塞</param>
            <param name="compacting">压缩</param>
        </member>
        <member name="M:AHelper.GC.CollectionCount(System.Int32)">
            <summary>
            返回已经对对象的指定代进行的垃圾回收次数。
            </summary>
            <param name="generation">代</param>
        </member>
        <member name="M:AHelper.GC.CancelFullGCNotification">
            <summary>
            取消注册垃圾回收通知。
            </summary>
        </member>
        <member name="M:AHelper.GC.AddMemoryPressure(System.Int64)">
            <summary>
            通知运行时在安排垃圾回收时应考虑分配大量的非托管内存
            </summary>
            <param name="bytesAllocated">分配的字节数</param>
        </member>
        <member name="M:AHelper.GC.RemoveMemoryPressure(System.Int64)">
            <summary>
            通知运行时已释放非托管内存，在安排垃圾回收时不需要再考虑它。
            </summary>
            <param name="bytesAllocated">分配的字节数</param>
        </member>
        <member name="M:AHelper.GC.TryStartNoGCRegion(System.Int64)">
            <summary>
            如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收。
            </summary>
            <param name="totalSize">总空间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AHelper.GC.TryStartNoGCRegion(System.Int64,System.Boolean)">
            <summary>
            如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收；
            并在初始没有足够内存可用的情况下，
            控制垃圾回收器是否进行完整的阻碍性垃圾回收。
            </summary>
            <param name="totalSize">总空间</param>
            <param name="disallowFullBlockingGC">禁止完全阻塞GC</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AHelper.GC.TryStartNoGCRegion(System.Int64,System.Int64)">
            <summary>
            如果指定数量的内存可用于大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收。
            </summary>
            <param name="totalSize">总空间</param>
            <param name="lohSize">大对象堆</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AHelper.GC.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)">
            <summary>
            如果指定数量的内存可用大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收；
            并在初始没有足够内存可用的情况下，控制垃圾回收器是否进行完整的阻碍性垃圾回收。
            </summary>
            <param name="totalSize">总空间</param>
            <param name="lohSize">大对象堆</param>
            <param name="disallowFullBlockingGC">禁止完全阻塞GC</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AHelper.GC.EndNoGCRegion">
            <summary>
            结束无 SGC 区域延迟模式
            </summary>
        </member>
        <member name="M:AHelper.GC.GetGeneration(System.Object)">
            <summary>
            返回指定对象的当前代数。
            </summary>
            <param name="obj">数据</param>
            <returns>代</returns>
        </member>
        <member name="M:AHelper.GC.GetGeneration(System.WeakReference)">
            <summary>
            返回指定弱引用的目标的当前代数。
            </summary>
            <param name="obj">数据</param>
            <returns>代</returns>
        </member>
        <member name="M:AHelper.GC.GetTotalMemory(System.Boolean)">
            <summary>
            检索当前认为要分配的字节数
            </summary>
            <param name="forceFullCollection">是否可以等待较短间隔再返回，以便系统回收垃圾和终结对象。</param>
            <returns>全部内存大小</returns>
        </member>
        <member name="M:AHelper.GC.KeepAlive(System.Object)">
            <summary>
            引用指定对象，使其从当前例程开始到调用此方法的那一刻为止均不符合进行垃圾回收的条件。
            </summary>
            <param name="obj">指定对象</param>
        </member>
        <member name="M:AHelper.GC.RegisterForFullGCNotification(System.Int32,System.Int32)">
            <summary>
            注册完整GC通知
            </summary>
            <param name="maxGenerationThreshold">马克斯代阈值</param>
            <param name="largeObjectHeapThreshold">大对象堆阈值</param>
        </member>
        <member name="M:AHelper.GC.ReRegisterForFinalize(System.Object)">
            <summary>
            请求系统调用指定对象的终结器，此前已为该对象调用 SuppressFinalize(Object)。
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:AHelper.GC.WaitForFullGCApproach">
            <summary>
            返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。
            </summary>
            <returns>GC通知状态</returns>
        </member>
        <member name="M:AHelper.GC.WaitForFullGCApproach(System.Int32)">
            <summary>
            在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。
            </summary>
            <param name="millisecondsTimeout">毫秒超时时间</param>
            <returns>GC通知状态</returns>
        </member>
        <member name="M:AHelper.GC.WaitForFullGCComplete">
            <summary>
            返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。
            </summary>
            <returns>GC通知状态</returns>
        </member>
        <member name="M:AHelper.GC.WaitForFullGCComplete(System.Int32)">
            <summary>
            在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。
            </summary>
            <param name="millisecondsTimeout">毫秒超时时间</param>
            <returns>GC通知状态</returns>
        </member>
        <member name="M:AHelper.GC.WaitForPendingFinalizers">
            <summary>
            挂起当前线程，直到处理终结器队列的线程清空该队列为止。
            </summary>
        </member>
        <member name="T:AHelper.SystemInfo">
            <summary>
            设备信息 .NET API
            </summary>
        </member>
        <member name="M:AHelper.SystemInfo.GetEquipmentName">
            <summary>
            获取用户设备名
            </summary>
        </member>
        <member name="M:AHelper.SystemInfo.GetPlatform">
            <summary>
            获取平台名称
            </summary>
        </member>
        <member name="M:AHelper.SystemInfo.GetNowVersion">
            <summary>
            获取平台版本号
            </summary>
        </member>
        <member name="M:AHelper.SystemInfo.GetUserDomainName">
            <summary>
            获取当前设备 连接网络名称
            </summary>
        </member>
        <member name="M:AHelper.SystemInfo.GetSystemDirectory">
            <summary>
            获取系统跟目录
            </summary>
        </member>
        <member name="M:AHelper.SystemInfo.GetNowTime">
            <summary>
            获取系统当前时间
            </summary>
        </member>
        <member name="M:AHelper.SystemInfo.GetStartSystemTickCount">
            <summary>
            获取系统启动后 经过的毫秒数
            </summary>
        </member>
        <member name="T:Pool">
            <summary>
            对象池
            </summary>
        </member>
        <member name="M:Pool.List``1">
            <summary>
            缓存 => 创建 <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
            <typeparam name="T">Generic</typeparam>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:Pool.Free``1(System.Collections.Generic.List{``0})">
            <summary>
            缓存 => 释放 <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
            <typeparam name="T">Generic</typeparam>
        </member>
        <member name="M:Pool.HashSet``1">
            <summary>
            缓存 => 创建 <see cref="T:System.Collections.Generic.HashSet`1"/>
            </summary>
            <typeparam name="T">Generic</typeparam>
            <returns><see cref="T:System.Collections.Generic.HashSet`1"/></returns>
        </member>
        <member name="M:Pool.Free``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            缓存 => 释放 <see cref="T:System.Collections.Generic.HashSet`1"/>
            </summary>
            <typeparam name="T">Generic</typeparam>
        </member>
        <member name="M:Pool.LinkedList``1">
            <summary>
            缓存 => 创建 <see cref="T:System.Collections.Generic.LinkedList`1"/>
            </summary>
            <typeparam name="T">Generic</typeparam>
            <returns><see cref="T:System.Collections.Generic.LinkedList`1"/></returns>
        </member>
        <member name="M:Pool.Free``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            缓存 => 释放 <see cref="T:System.Collections.Generic.LinkedList`1"/>
            </summary>
            <typeparam name="T">Generic</typeparam>
        </member>
        <member name="M:Pool.Stack``1">
            <summary>
            缓存 => 创建 <see cref="T:System.Collections.Generic.Stack`1"/>
            </summary>
            <typeparam name="T">Generic</typeparam>
            <returns><see cref="T:System.Collections.Generic.Stack`1"/></returns>
        </member>
        <member name="M:Pool.Free``1(System.Collections.Generic.Stack{``0})">
            <summary>
            缓存 => 释放 <see cref="T:System.Collections.Generic.Stack`1"/>
            </summary>
            <typeparam name="T">Generic</typeparam>
        </member>
        <member name="M:Pool.Queue``1">
            <summary>
            缓存 => 创建 <see cref="T:System.Collections.Generic.Queue`1"/>
            </summary>
            <typeparam name="T">Generic</typeparam>
            <returns><see cref="T:System.Collections.Generic.Queue`1"/></returns>
        </member>
        <member name="M:Pool.Free``1(System.Collections.Generic.Queue{``0})">
            <summary>
            缓存 => 释放 <see cref="T:System.Collections.Generic.Queue`1"/>
            </summary>
            <typeparam name="T">Generic</typeparam>
        </member>
        <member name="M:Pool.SortedList``2">
            <summary>
            缓存 => 创建 <see cref="T:System.Collections.Generic.SortedList`2"/>
            </summary>
            <typeparam name="K">Generic</typeparam>
            <typeparam name="V">Generic</typeparam>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
        </member>
        <member name="M:Pool.Free``2(System.Collections.Generic.SortedList{``0,``1})">
            <summary>
            缓存 => 释放 <see cref="T:System.Collections.Generic.SortedList`2"/>
            </summary>
            <typeparam name="K">Generic</typeparam>
            <typeparam name="V">Generic</typeparam>
        </member>
        <member name="M:Pool.Dictionary``2">
            <summary>
            缓存 => 创建 <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
            <typeparam name="K">Generic</typeparam>
            <typeparam name="V">Generic</typeparam>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
        </member>
        <member name="M:Pool.Free``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            缓存 => 释放 <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
            <typeparam name="K">Generic</typeparam>
            <typeparam name="V">Generic</typeparam>
        </member>
        <member name="T:Pool.ADictionary`2">
            <summary>
            Dictionary 对象池
            </summary>
        </member>
        <member name="M:Pool.ADictionary`2.New">
            <summary>
            创建
            </summary>
        </member>
        <member name="M:Pool.ADictionary`2.Free(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:Pool.Disposable`1">
            <summary>
            An <see cref="T:System.IDisposable"/> to allow pooled objects to be acquired and released within <c>using</c>
            statements instead of needing to manually release everything.
            </summary>
        </member>
        <member name="F:Pool.Disposable`1.Item">
            <summary>
            The object acquired from the <see cref="T:Pool.Disposable`1"/>.
            </summary>
        </member>
        <member name="F:Pool.Disposable`1.OnRelease">
            <summary>
            Called by IDisposable.Dispose.
            </summary>
        </member>
        <member name="M:Pool.Disposable`1.#ctor(`0,System.Action{`0})">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:Pool.Generic`1">
            <summary>
            通用
            </summary>
        </member>
        <member name="M:Pool.Generic`1.New(System.Func{`0})">
            <summary>
            创建
            </summary>
        </member>
        <member name="M:Pool.Generic`1.New">
            <summary>
            创建
            </summary>
        </member>
        <member name="M:Pool.Generic`1.Free(`0)">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:Pool.AHashSet`1">
            <summary>
            HashSet对象池
            </summary>
        </member>
        <member name="M:Pool.AHashSet`1.New">
            <summary>
            创建新的
            </summary>
        </member>
        <member name="M:Pool.AHashSet`1.Free(System.Collections.Generic.HashSet{`0})">
            <summary>
            释放HashSet
            </summary>
        </member>
        <member name="T:Pool.ALinkedList`1">
            <summary>
            List对象池
            </summary>
        </member>
        <member name="M:Pool.ALinkedList`1.New">
            <summary>
            创建新的
            </summary>
        </member>
        <member name="M:Pool.ALinkedList`1.Free(System.Collections.Generic.LinkedList{`0})">
            <summary>
            释放List
            </summary>
        </member>
        <member name="T:Pool.AList`1">
            <summary>
            List对象池
            </summary>
        </member>
        <member name="M:Pool.AList`1.New">
            <summary>
            创建新的
            </summary>
        </member>
        <member name="M:Pool.AList`1.Free(System.Collections.Generic.List{`0})">
            <summary>
            释放List
            </summary>
        </member>
        <member name="T:Pool.AQueue`1">
            <summary>
            Queue对象池
            </summary>
        </member>
        <member name="M:Pool.AQueue`1.New">
            <summary>
            创建新的
            </summary>
        </member>
        <member name="M:Pool.AQueue`1.Free(System.Collections.Generic.Queue{`0})">
            <summary>
            释放Queue
            </summary>
        </member>
        <member name="T:Pool.ASortedList`2">
            <summary>
            Dictionary 对象池
            </summary>
        </member>
        <member name="M:Pool.ASortedList`2.New">
            <summary>
            创建
            </summary>
        </member>
        <member name="M:Pool.ASortedList`2.Free(System.Collections.Generic.SortedList{`0,`1})">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:Pool.AStack`1">
            <summary>
            Stack对象池
            </summary>
        </member>
        <member name="M:Pool.AStack`1.New">
            <summary>
            创建新的
            </summary>
        </member>
        <member name="M:Pool.AStack`1.Free(System.Collections.Generic.Stack{`0})">
            <summary>
            释放Stack
            </summary>
        </member>
        <member name="M:Pool.Using``1(``0@)">
            <summary>
            引用释放
            </summary>
        </member>
        <member name="M:Pool.Using``1(``0@,System.Action{``0})">
            <summary>
            引用释放
            </summary>
        </member>
        <member name="M:Pool.Using``1(``0,System.Action{``0})">
            <summary>
            引用释放
            </summary>
        </member>
        <member name="M:Pool.Using``1(System.Collections.Generic.List{``0}@)">
            <summary>
            引用释放
            </summary>
        </member>
        <member name="M:Pool.Using``1(System.Collections.Generic.HashSet{``0}@)">
            <summary>
            引用释放
            </summary>
        </member>
        <member name="M:Pool.Using``1(System.Collections.Generic.Stack{``0}@)">
            <summary>
            引用释放
            </summary>
        </member>
        <member name="M:Pool.Using``1(System.Collections.Generic.Queue{``0}@)">
            <summary>
            引用释放
            </summary>
        </member>
        <member name="M:Pool.Using``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            引用释放
            </summary>
        </member>
        <member name="T:PoolExtend">
            <summary>
            扩展
            </summary>
        </member>
        <member name="M:PoolExtend.ToDictionaryPooled``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转化为 Dictionary 并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.Free``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            释放 Dictionary
            </summary>
        </member>
        <member name="M:PoolExtend.ToHashSetPooled``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转化为HashSet并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.ToHashSetPooledKey``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            转化为HashSet并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.ToHashSetPooledValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            转化为HashSet并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.Free``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            释放HashSet
            </summary>
        </member>
        <member name="M:PoolExtend.ToLinkedListPooled``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转化为List并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.ToLinkedListPooledKey``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            转化为List并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.ToLinkedListPooledValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            转化为List并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.Free``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            释放List
            </summary>
        </member>
        <member name="M:PoolExtend.ToListPooled``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转化为List并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.ToListPooledKey``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            转化为List并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.ToListPooledValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            转化为List并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.Free``1(System.Collections.Generic.List{``0})">
            <summary>
            释放List
            </summary>
        </member>
        <member name="M:PoolExtend.ToQueuePooled``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转化为Queue并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.ToQueuePooledKey``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            转化为Queue并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.ToQueuePooledValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            转化为Queue并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.Free``1(System.Collections.Generic.Queue{``0})">
            <summary>
            释放Queue
            </summary>
        </member>
        <member name="M:PoolExtend.ToSortedListPooled``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转化为 Dictionary 并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.Free``2(System.Collections.Generic.SortedList{``0,``1})">
            <summary>
            释放 Dictionary
            </summary>
        </member>
        <member name="M:PoolExtend.ToStackPooled``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转化为Stack并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.ToStackPooledKey``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            转化为Stack并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.ToStackPooledValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            转化为Stack并存入对象池
            </summary>
        </member>
        <member name="M:PoolExtend.Free``1(System.Collections.Generic.Stack{``0})">
            <summary>
            释放Stack
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AIO.Extension</name>
    </assembly>
    <members>
        <member name="T:AssemblyInfo">
            <summary>
            程序集信息
            </summary>
        </member>
        <member name="F:AssemblyInfo.KEY">
            <summary>
            密钥信息
            </summary>
        </member>
        <member name="F:AssemblyInfo.PublicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="F:AssemblyInfo.Token">
            <summary>
            公钥Token
            </summary>
        </member>
        <member name="F:AssemblyInfo.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:AssemblyInfo.FileVersion">
            <summary>
            指示编译器使用 Win32 文件版本资源的特定版本号。 Win32 文件版本不需要与程序集的版本号相同。
            </summary>
        </member>
        <member name="F:AssemblyInfo.KeyFile">
            <summary>
            密钥位置
            </summary>
        </member>
        <member name="F:AssemblyInfo.KeyName">
            <summary>
            密钥位置
            </summary>
        </member>
        <member name="F:AssemblyInfo.Company">
            <summary>
            作者
            </summary>
        </member>
        <member name="F:AssemblyInfo.Copyright">
            <summary>
            程序集属性
            </summary>
        </member>
        <member name="F:AssemblyInfo.Culture">
            <summary>
            支持的区域性
            </summary>
        </member>
        <member name="T:AIO.ActionExtend">
            <summary>
            函数扩展
            </summary>
        </member>
        <member name="M:AIO.ActionExtend.GetTotalTime(System.Action)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ActionExtend.GetTotalTime``1(System.Action{``0},``0@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ActionExtend.GetTotalTime``1(System.Action{``0,``0},``0@,``0@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ActionExtend.GetTotalTime``1(System.Action{``0,``0,``0},``0@,``0@,``0@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ActionExtend.GetTotalTime``1(System.Action{``0,``0,``0,``0},``0@,``0@,``0@,``0@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ActionExtend.GetTotalTime``2(System.Action{``0,``1},``0@,``1@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ActionExtend.GetTotalTime``3(System.Action{``0,``1,``2},``0@,``1@,``2@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ActionExtend.GetTotalTime``4(System.Action{``0,``1,``2,``3},``0@,``1@,``2@,``3@)">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="M:AIO.ActionExtend.GetTotalTime``1(System.Action{``0[]},``0[])">
            <summary>
            获取当前函数执行总时间
            </summary>
        </member>
        <member name="T:AIO.StringBuilderExtend">
            <summary>
            可变字符串扩展
            </summary>
        </member>
        <member name="M:AIO.StringBuilderExtend.AppendLineFormat(System.Text.StringBuilder,System.String@,System.Object[])">
            <summary>
            添加
            </summary>
            <param name="sb">可变字符串</param>
            <param name="format">格式化</param>
            <param name="args">可变参数</param>
        </member>
        <member name="T:AIO.StringExtend">
            <summary>
            字符工具类
            </summary>
        </member>
        <member name="M:AIO.StringExtend.PathGetFileName(System.String,System.Boolean@)">
            <summary>
            获取文件名 HasExtension = false 没有扩展名
            </summary>
        </member>
        <member name="M:AIO.StringExtend.PathCombine(System.String,System.String@)">
            <summary>
            获取路径
            </summary>
        </member>
        <member name="M:AIO.StringExtend.PathCombine(System.String,System.String[])">
            <summary>
            获取路径
            </summary>
        </member>
        <member name="M:AIO.StringExtend.PathGetExtension(System.String)">
            <summary>
            获取文件扩展名
            </summary>
        </member>
        <member name="M:AIO.StringExtend.PathChangeExtension(System.String,System.String@)">
            <summary>
            修改文件扩展名
            </summary>
        </member>
        <member name="M:AIO.StringExtend.PathNormalize(System.String)">
            <summary>
            一个新的规范化字符串，其文本值与此字符串相同，但其二进制表示形式符合范式
            </summary>
        </member>
        <member name="M:AIO.StringExtend.PathGetRoot(System.String)">
            <summary>
            获取根目录 I:\
            </summary>
        </member>
        <member name="M:AIO.StringExtend.PathGetLastFloder(System.String)">
            <summary>
            获取上一级目录
            </summary>
        </member>
        <member name="M:AIO.StringExtend.AppendToFrontChar(System.String,System.Char@,System.Int32@)">
            <summary>
            在最前添加指定字符到指定长度
            </summary>
        </member>
        <member name="M:AIO.StringExtend.AppendToFront(System.String,System.String[])">
            <summary>
            合并字符 前面
            </summary>
        </member>
        <member name="M:AIO.StringExtend.AppendToFront(System.String,System.Char[])">
            <summary>
            在最前添加指定字符
            </summary>
        </member>
        <member name="M:AIO.StringExtend.AppendToLastChar(System.String,System.Char@,System.Int32@)">
            <summary>
            在最后添加指定字符到指定字节长度
            </summary>
        </member>
        <member name="M:AIO.StringExtend.AppendToLast(System.String,System.String[])">
            <summary>
            合并字符 后面
            </summary>
        </member>
        <member name="M:AIO.StringExtend.AppendToLast(System.String,System.Char[])">
            <summary>
            在最后添加指定字符到指定长度
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ContainsOrdinalIgnoreCase(System.String,System.String@)">
            <summary>
            检查字符串是否包含指定的子字符串，忽略大小写
            </summary>
            <param name="str">要搜索的字符串</param>
            <param name="needle">要在 haystack 中搜索的子字符串</param>
            <returns>如果 haystack 包含 needle，则为 true；否则为 false</returns>
        </member>
        <member name="M:AIO.StringExtend.Contains(System.String,System.String@,System.StringComparison)">
            <summary>
            检查字符串是否包含指定的子字符串，忽略大小写
            </summary>
            <param name="str">要搜索的字符串</param>
            <param name="needle">要在 haystack 中搜索的子字符串</param>
            <param name="comparison">搜索模式</param>
            <returns>如果 haystack 包含 needle，则为 true；否则为 false</returns>
        </member>
        <member name="M:AIO.StringExtend.Contains(System.String,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            判断路径是是否包含指定字符
            </summary>
            <returns>Ture:符合 False:不符合</returns>
        </member>
        <member name="M:AIO.StringExtend.Contains(System.String,System.Int32,System.Int32)">
            <summary>
            是否包含指定字符
            </summary>
            <returns>Ture:符合 False:不符合</returns>
        </member>
        <member name="M:AIO.StringExtend.XToLower(System.String)">
            <summary>
            转化为小写
            </summary>
        </member>
        <member name="M:AIO.StringExtend.XToUpper(System.String)">
            <summary>
            转化为大写
            </summary>
        </member>
        <member name="M:AIO.StringExtend.XToLower(System.String,System.Int32@)">
            <summary>
            转化为小写
            </summary>
        </member>
        <member name="M:AIO.StringExtend.XToUpper(System.String,System.Int32@)">
            <summary>
            转化为大写
            </summary>
        </member>
        <member name="M:AIO.StringExtend.Repeat(System.String,System.Int32@)">
            <summary>
            重复
            </summary>
        </member>
        <member name="M:AIO.StringExtend.EqualsNull(System.String)">
            <summary>
            比较Null值
            </summary>
        </member>
        <member name="M:AIO.StringExtend.Reverse(System.String)">
            <summary>
            字符串反转
            </summary>
        </member>
        <member name="M:AIO.StringExtend.Clone(System.String,System.UInt32@)">
            <summary>
            重复N此 复制传入数据
            </summary>
        </member>
        <member name="M:AIO.StringExtend.Clone(System.Char,System.UInt32@)">
            <summary>
            重复N此 复制传入数据
            </summary>
        </member>
        <member name="M:AIO.StringExtend.Filter(System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            从字符串中过滤出指定类型的字符，并返回过滤后的字符串
            </summary>
            <param name="s">要过滤的字符串</param>
            <param name="letters">是否保留字母</param>
            <param name="numbers">是否保留数字</param>
            <param name="whitespace">是否保留空格</param>
            <param name="symbols">是否保留符号</param>
            <param name="punctuation">是否保留标点符号</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:AIO.StringExtend.FilterReplace(System.String,System.Char@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            从字符串中过滤出指定类型的字符，并用指定字符替换被过滤的字符
            </summary>
            <param name="s">要过滤的字符串</param>
            <param name="replacement">用于替换被过滤字符的字符</param>
            <param name="merge">是否将连续被过滤的字符合并为单个替换字符</param>
            <param name="letters">是否保留字母</param>
            <param name="numbers">是否保留数字</param>
            <param name="whitespace">是否保留空格</param>
            <param name="symbols">是否保留符号</param>
            <param name="punctuation">是否保留标点符号</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:AIO.StringExtend.Prettify(System.String)">
            <summary>
            美化
            </summary>
        </member>
        <member name="M:AIO.StringExtend.FirstCharacterToUpper(System.String)">
            <summary>
            首字母转为大写
            </summary>
        </member>
        <member name="M:AIO.StringExtend.GetBytesLength(System.String)">
            <summary>
            获取字节长度
            </summary>
        </member>
        <member name="M:AIO.StringExtend.GetOcclusion(System.String,System.String,System.Char,System.Char)">
            <summary>
            获取闭合字符段
            </summary>
        </member>
        <member name="M:AIO.StringExtend.SetOcclusion(System.String,System.String,System.Char,System.Char)">
            <summary>
            获取闭合字符段
            </summary>
        </member>
        <member name="M:AIO.StringExtend.IndexesOf(System.String,System.String)">
            <summary>
            在字符串中查找所有出现指定子字符串的位置，忽略大小写
            </summary>
            <param name="haystack">要搜索的字符串</param>
            <param name="needle">要在 haystack 中搜索的子字符串</param>
            <returns>包含 needle 的所有索引的 IEnumerable(int) 对象</returns>
        </member>
        <member name="M:AIO.StringExtend.InsertFixed``1(System.String,System.Int32@,``0@)">
            <summary>
            将指定内容循环插入到字符串中
            </summary>
            <typeparam name="T">指定内容的类型</typeparam>
            <param name="str">原始字符串</param>
            <param name="space">间隔长度</param>
            <param name="info">指定内容</param>
            <returns>插入指定内容后的字符串</returns>
        </member>
        <member name="M:AIO.StringExtend.IsWordBeginning(System.String,System.Int32@)">
            <summary>
            是否为单词开始
            </summary>
        </member>
        <member name="M:AIO.StringExtend.IsNullOrEmpty(System.String)">
            <summary>
            判断是否为Null
            </summary>
        </member>
        <member name="M:AIO.StringExtend.RichS(System.String,System.Int32@)">
            <summary>
            富文本 字号
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
        </member>
        <member name="M:AIO.StringExtend.RichC(System.String,System.String@)">
            <summary>
            富文本 颜色
            </summary>
            <param name="content"></param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.StringExtend.RichI(System.String)">
            <summary>
            富文本 斜体
            </summary>
        </member>
        <member name="M:AIO.StringExtend.RichB(System.String)">
            <summary>
            富文本 加粗
            </summary>
        </member>
        <member name="M:AIO.StringExtend.RichBI(System.String)">
            <summary>
            富文本 加粗 斜体
            </summary>
        </member>
        <member name="M:AIO.StringExtend.RichSB(System.String,System.String@)">
            <summary>
            富文本 字号 加粗
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
        </member>
        <member name="M:AIO.StringExtend.RichSI(System.String,System.Int32@)">
            <summary>
            富文本 字号 斜体
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
        </member>
        <member name="M:AIO.StringExtend.RichCS(System.String,System.Int32@,System.String@)">
            <summary>
            富文本 字号 颜色
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.StringExtend.RichCB(System.String,System.String@)">
            <summary>
            富文本 颜色 加粗
            </summary>
            <param name="content"></param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.StringExtend.RichCI(System.String,System.String@)">
            <summary>
            富文本 颜色 斜体
            </summary>
            <param name="content"></param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.StringExtend.RichSBI(System.String,System.String@)">
            <summary>
            富文本 字号 加粗 斜体
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
        </member>
        <member name="M:AIO.StringExtend.RichCSB(System.String,System.Int32@,System.String@)">
            <summary>
            富文本 颜色 字号 加粗
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.StringExtend.RichCSI(System.String,System.Int32@,System.String@)">
            <summary>
            富文本 颜色 字号 斜体
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.StringExtend.RichCBI(System.String,System.String@)">
            <summary>
            富文本 颜色 加粗 斜体
            </summary>
            <param name="content"></param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.StringExtend.RichAll(System.String,System.Int32@,System.String@)">
            <summary>
            富文本 颜色 字号 加粗 斜体
            </summary>
            <param name="content"></param>
            <param name="s">字号大小</param>
            <param name="c">颜色值</param>
        </member>
        <member name="M:AIO.StringExtend.XSplit(System.String,System.Char@)">
            <summary>
            分组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.SplitOnce(System.String,System.Char@)">
            <summary>
            分组一次
            </summary>
        </member>
        <member name="M:AIO.StringExtend.SplitLine(System.String)">
            <summary>
            将字符串以行拆分为数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.SplitWords(System.String,System.Char@)">
            <summary>
            单词分割
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverULong(System.String)">
            <summary>
            解析字符串为 ulong
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverUInt(System.String)">
            <summary>
            解析字符串为 UInt
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverUshort(System.String)">
            <summary>
            解析字符串为 UShort
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverDouble(System.String)">
            <summary>
            解析字符串为 Double
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverDecimal(System.String)">
            <summary>
            解析字符串为 Decimal
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverDateTime(System.String)">
            <summary>
            解析字符串为 DateTime
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverChar(System.String)">
            <summary>
            解析字符串为 Char
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverBytes(System.String)">
            <summary>
            解析字符串为 Byte
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverBoolean(System.String)">
            <summary>
            解析字符串为 Boolean
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverSByte(System.String)">
            <summary>
            解析字符串为 SByte
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverShort(System.String)">
            <summary>
            解析字符串为 Short
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverInt(System.String)">
            <summary>
            解析字符串为 Int
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverLong(System.String)">
            <summary>
            解析字符串为 Long
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverFloat(System.String)">
            <summary>
            解析字符串为 Float
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverInts(System.String)">
            <summary>
            解析字符串(以,分割)为一维数字数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverInts(System.String,System.Char)">
            <summary>
            解析字符串(以,分割)为一维数字数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverIntss(System.String)">
            <summary>
            解析字符串(以,|分割)为二维数字数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverIntsss(System.String)">
            <summary>
            解析字符串(以,|,:分割)为三维数字数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverInts(System.Collections.Generic.IList{System.String})">
            <summary>
            转化为Int数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverInts(System.String[][])">
            <summary>
            转化为Int数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverInts(System.String[][][])">
            <summary>
            转化为Int数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverLongs(System.String)">
            <summary>
            解析字符串(以,分割)为一维数字数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverLongss(System.String)">
            <summary>
            解析字符串(以,|分割)为二维数字数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverLongs(System.Collections.Generic.IList{System.String})">
            <summary>
            解析字符串(以,|分割)为一维数字数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverLongss(System.String[][])">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringExtend.ToConverLongsss(System.String[][][])">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringExtend.ToConverStrings(System.String)">
            <summary>
            解析字符串(以,分割)为一维数字数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverStrings(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="split"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringExtend.ToConverStringss(System.String)">
            <summary>
            解析字符串(以,|分割)为二维数字数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverStringsss(System.String)">
            <summary>
            解析字符串(以,|分割)为三维数字数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverBools(System.String[])">
            <summary>
            转换为Bool 一维数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverBoolss(System.String[][])">
            <summary>
            转换为Bool 二维数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverBoolsss(System.String[][][])">
            <summary>
            转换为Bool 三维数组
            </summary>
        </member>
        <member name="M:AIO.StringExtend.ToConverBase64(System.String)">
            <summary>
            转换Base64
            </summary>
        </member>
        <member name="M:AIO.StringExtend.FromBase64ToStr(System.String)">
            <summary>
            Base64转化为Str
            </summary>
        </member>
        <member name="M:AIO.StringExtend.Format(System.String,System.Object[])">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:AIO.StringExtend.Format(System.String,System.String[])">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:AIO.IDictionaryExtend">
            <summary>
            字典扩展
            </summary>
        </member>
        <member name="M:AIO.IDictionaryExtend.AddUnion``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}@)">
            <summary>
            添加相同元素
            </summary>
        </member>
        <member name="M:AIO.IDictionaryExtend.Remove``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}@)">
            <summary>
            移除存在的元素
            </summary>
        </member>
        <member name="M:AIO.IDictionaryExtend.Remove``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            移除存在的元素
            </summary>
        </member>
        <member name="M:AIO.IDictionaryExtend.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
            移除存在的元素
            </summary>
        </member>
        <member name="M:AIO.IDictionaryExtend.Swap``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``0@)">
            <summary>
            交换数组元素位置
            </summary>
        </member>
        <member name="M:AIO.IDictionaryExtend.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
        </member>
        <member name="M:AIO.IDictionaryExtend.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``1@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:AIO.IDictionaryExtend.GetOrDefault(System.Collections.IDictionary,System.Object@,System.Object@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:AIO.IDictionaryExtend.Get``1(System.Collections.IDictionary,System.String@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <typeparam name="T">任意泛型</typeparam>
        </member>
        <member name="M:AIO.IDictionaryExtend.GetOrDefault(System.Collections.IDictionary,System.String@,System.Object@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:AIO.IDictionaryExtend.Get(System.Collections.IDictionary,System.Object@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
        </member>
        <member name="M:AIO.IDictionaryExtend.Get``1(System.Collections.IDictionary,System.Object@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <typeparam name="T">任意泛型</typeparam>
        </member>
        <member name="M:AIO.IDictionaryExtend.GetOrDefault``1(System.Collections.IDictionary,System.Object@,``0@)">
            <summary>
            获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:AIO.IDictionaryExtend.TryGet``1(System.Collections.IDictionary,System.String@,``0@)">
            <summary>
            尝试获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
            <typeparam name="T">任意泛型</typeparam>
        </member>
        <member name="M:AIO.IDictionaryExtend.TryGet``1(System.Collections.IDictionary,System.Object@,``0@)">
            <summary>
            尝试获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
            <typeparam name="T">任意泛型</typeparam>
        </member>
        <member name="M:AIO.IDictionaryExtend.TryGet``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``1@)">
            <summary>
            尝试获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
            <typeparam name="K">任意泛型</typeparam>
            <typeparam name="V">任意泛型</typeparam>
        </member>
        <member name="M:AIO.IDictionaryExtend.Set(System.Collections.IDictionary,System.Object@,System.Object@)">
            <summary>
            设置
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
        </member>
        <member name="M:AIO.IDictionaryExtend.Set``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``1@)">
            <summary>
            设置
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
        </member>
        <member name="M:AIO.IDictionaryExtend.TrySet``2(System.Collections.Generic.IDictionary{``0,``1},``0@,``1@)">
            <summary>
            尝试获取
            </summary>
            <param name="dic">字典</param>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
            <typeparam name="K">任意泛型</typeparam>
            <typeparam name="V">任意泛型</typeparam>
        </member>
        <member name="T:AIO.IEnumerableExtend">
            <summary>
            迭代器扩展
            </summary>
        </member>
        <member name="M:AIO.IEnumerableExtend.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            判断集合中 是否有重复
            </summary>
            <param name="chars">集合</param>
            <param name="targetChars">匹配集合</param>
            <returns>Ture:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.IEnumerableExtend.ToSeparatedString(System.Collections.IEnumerable,System.String@)">
            <summary>
            将 IEnumerable 中的元素转换为以指定分隔符分隔的字符串
            </summary>
            <param name="enumerable">IEnumerable 对象，包含要转换的元素</param>
            <param name="separator">用于间隔每个元素的字符串</param>
            <returns>以分隔符分隔的字符串</returns>
        </member>
        <member name="M:AIO.IEnumerableExtend.ToCommaSeparatedString(System.Collections.IEnumerable)">
            <summary>
            将 IEnumerable 中的元素转换为逗号分隔的字符串
            </summary>
            <param name="enumerable">IEnumerable 对象，包含要转换的元素</param>
            <returns>逗号分隔的字符串</returns>
        </member>
        <member name="M:AIO.IEnumerableExtend.ToLineSeparatedString(System.Collections.IEnumerable)">
            <summary>
            将 IEnumerable 中的元素转换为以行结束符分隔的字符串
            </summary>
            <param name="enumerable">IEnumerable 对象，包含要转换的元素</param>
            <returns>以行结束符分隔的字符串</returns>
        </member>
        <member name="M:AIO.IEnumerableExtend.ToConverStringUTF8(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            转化为字符串 UTF8格式
            </summary>
        </member>
        <member name="M:AIO.IEnumerableExtend.ToConverStringUTF8(System.Collections.Generic.IEnumerable{System.Byte},System.Int32@,System.Int32@)">
            <summary>
            获取指定字节数组转化为字符串 UTF8格式
            </summary>
        </member>
        <member name="M:AIO.IEnumerableExtend.ToConverHex16x(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            字节数组 转小写16进制字符
            </summary>
        </member>
        <member name="M:AIO.IEnumerableExtend.ToConverHex16X(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            字节数组 转大写16进制字符
            </summary>
        </member>
        <member name="M:AIO.IEnumerableExtend.Contains(System.Collections.Generic.IEnumerable{System.Char},System.Char)">
            <summary>
            判断集合中 是否有重复
            </summary>
            <param name="chars">集合</param>
            <param name="targetChars">匹配集合</param>
            <returns>Ture:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.IEnumerableExtend.Find``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            查找 -1:未找到
            </summary>
        </member>
        <member name="M:AIO.IEnumerableExtend.Find``1(System.Collections.Generic.IEnumerable{``0},``0@,System.Int32)">
            <summary>
            查找 -1:未找到
            </summary>
        </member>
        <member name="T:AIO.IListExtend">
            <summary>
            IList扩展
            </summary>
        </member>
        <member name="M:AIO.IListExtend.ExistRepeat``1(System.Collections.Generic.IList{``0})">
            <summary>
            是否存在重复的
            </summary>
        </member>
        <member name="M:AIO.IListExtend.ExistRepeat``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Boolean}@)">
            <summary>
            是否存在重复的
            </summary>
        </member>
        <member name="M:AIO.IListExtend.ExistRepeat``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0}@)">
            <summary>
            是否存在重复的
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Swap``1(System.Collections.Generic.IList{``0},System.Int32@,System.Int32@)">
            <summary>
            交换数组元素位置
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Swap``1(System.Collections.Generic.IList{``0},System.Int16@,System.Int16@)">
            <summary>
            交换数组元素位置
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Swap``1(System.Collections.Generic.IList{``0},System.UInt16@,System.UInt16@)">
            <summary>
            交换数组元素位置
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Swap``1(System.Collections.Generic.IList{``0},System.Byte@,System.Byte@)">
            <summary>
            交换数组元素位置
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Swap``1(System.Collections.Generic.IList{``0},System.SByte@,System.SByte@)">
            <summary>
            交换数组元素位置
            </summary>
        </member>
        <member name="M:AIO.IListExtend.PadLeft(System.Collections.Generic.IList{System.String},System.Int32@)">
            <summary>
            字符串通过在此实例中的字符左侧填充空格来达到指定的总长度，从而实现右对齐。
            </summary>
        </member>
        <member name="M:AIO.IListExtend.PadRight(System.Collections.Generic.IList{System.String},System.Int32@)">
            <summary>
            字符右侧填充空格来达到指定的总长度，从而使这些字符左对齐
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Normalize(System.Collections.Generic.IList{System.String})">
            <summary>
            字符右侧填充空格来达到指定的总长度，从而使这些字符左对齐
            </summary>
        </member>
        <member name="M:AIO.IListExtend.ToLower(System.Collections.Generic.IList{System.String})">
            <summary>
            转换为小写形式的副本。
            </summary>
        </member>
        <member name="M:AIO.IListExtend.ToUpper(System.Collections.Generic.IList{System.String})">
            <summary>
            对象的转换为大写形式的副本。
            </summary>
        </member>
        <member name="M:AIO.IListExtend.ToLowerInvariant(System.Collections.Generic.IList{System.String})">
            <summary>
            转换为小写形式的副本。
            </summary>
        </member>
        <member name="M:AIO.IListExtend.ToUpperInvariant(System.Collections.Generic.IList{System.String})">
            <summary>
            对象的转换为大写形式的副本。
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Trim(System.Collections.Generic.IList{System.String})">
            <summary>
            移除所有前导空白字符和尾部空白字符。
            </summary>
        </member>
        <member name="M:AIO.IListExtend.TrimEnd(System.Collections.Generic.IList{System.String},System.Char[])">
            <summary>
            移除数组中指定的一组字符的所有尾部匹配项。
            </summary>
        </member>
        <member name="M:AIO.IListExtend.TrimStart(System.Collections.Generic.IList{System.String},System.Char[])">
            <summary>
            移除数组中指定的一组字符的所有前导匹配项。
            </summary>
        </member>
        <member name="M:AIO.IListExtend.IndexOf``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            查询存在相同元素的下标
            </summary>
        </member>
        <member name="M:AIO.IListExtend.IndexOf``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0}@)">
            <summary>
            查询存在相同元素的下标
            </summary>
        </member>
        <member name="M:AIO.IListExtend.IndexOfParallel``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            查询存在相同元素的下标
            </summary>
        </member>
        <member name="M:AIO.IListExtend.ToConverHex16X(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <summary>
            从指定字节数组中 获取多个字节转化为大写16进制字符串
            </summary>
            <param name="bytes"></param>
            <param name="offset">开始位置</param>
            <param name="count">获取长度</param>
        </member>
        <member name="M:AIO.IListExtend.ToConverHex16x(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <summary>
            从指定字节数组中 获取多个字节转化为大写16进制字符串
            </summary>
            <param name="bytes"></param>
            <param name="offset">开始位置</param>
            <param name="count">获取长度</param>
        </member>
        <member name="M:AIO.IListExtend.GetCharArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetBoolArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetSByteArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetByteArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetInt16Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetUInt16Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetUInt32Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetInt32Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetUInt64Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetInt64Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetFloatArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="all"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetDoubleArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="all"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetDecimalArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetLenArray(System.Collections.Generic.IList{System.Byte},System.Int32@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetStringArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Text.Encoding,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="encoding"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetEnumArray``1(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetBool(System.Collections.Generic.IList{System.Byte},System.Int32@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetEnum``1(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetChar(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetLen(System.Collections.Generic.IList{System.Byte},System.Int32@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetByte(System.Collections.Generic.IList{System.Byte},System.Int32@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetSByte(System.Collections.Generic.IList{System.Byte},System.Int32@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetInt16(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetUInt16(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetInt32(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetUInt32(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetInt64(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetUInt64(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetFloat(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="all"></param>
            <param name="reverse"></param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:AIO.IListExtend.GetDouble(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="all"></param>
            <param name="reverse"></param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:AIO.IListExtend.GetDecimal(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetString(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Text.Encoding,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="encoding"></param>
            <param name="reverse"></param>
            <returns></returns>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:AIO.IListExtend.GetStringUTF8(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetStringASCII(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.GetStringUnicode(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IListExtend.Insert``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Insert``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0}@)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.IListExtend.AddUnion``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            添加相同元素
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Add``1(System.Collections.Generic.IList{``0},``0@,``0@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Add``1(System.Collections.Generic.IList{``0},``0@,``0@,``0@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Add``1(System.Collections.Generic.IList{``0},``0@,``0@,``0@,``0@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Add``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.IListExtend.AddDicValue``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IDictionary{System.Object,``0}@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.IListExtend.AddDicKey``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IDictionary{``0,System.Object}@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.IListExtend.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0}@,System.Int32,System.Int32)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Get``1(System.Collections.Generic.IList{``0},System.Int32@)">
            <summary>
            获取 集合 指定下标
            </summary>
        </member>
        <member name="M:AIO.IListExtend.GetLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取 集合 最后一个
            </summary>
        </member>
        <member name="M:AIO.IListExtend.GetFirst``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取 集合 第一个
            </summary>
        </member>
        <member name="M:AIO.IListExtend.GetMinValue``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.SByte}@)">
            <summary>
            获取 集合 最小值
            </summary>
        </member>
        <member name="M:AIO.IListExtend.GetMinValue``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0}@)">
            <summary>
            获取 集合 最小值
            </summary>
        </member>
        <member name="M:AIO.IListExtend.GetMinValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取 集合 最小值
            </summary>
        </member>
        <member name="M:AIO.IListExtend.GetMaxValue``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.SByte}@)">
            <summary>
            获取 集合极值 最大值
            </summary>
            <param name="array">数组</param>
            <param name="compare">
            对比函数 返回值 0:相等
            a大余b情况返回  1:获取最大值
            a大余b情况返回 -1:获取最小值
            </param>
            <typeparam name="T">泛型</typeparam>
            <returns>极值</returns>
        </member>
        <member name="M:AIO.IListExtend.GetMaxValue``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0}@)">
            <summary>
            获取 集合极值 最大值
            </summary>
            <param name="array">数组</param>
            <param name="compare">
            对比函数 返回值 0:相等
            a大余b情况返回  1:获取最大值
            a大余b情况返回 -1:获取最小值
            </param>
            <typeparam name="T">泛型</typeparam>
            <returns>极值</returns>
        </member>
        <member name="M:AIO.IListExtend.GetMaxValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取 集合极值 最大值
            </summary>
            <param name="array">数组</param>
            <typeparam name="T">泛型</typeparam>
            <returns>极值</returns>
        </member>
        <member name="M:AIO.IListExtend.GetMaxMinValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取 集合最大最小值 第一个Max 第二个Min
            </summary>
        </member>
        <member name="M:AIO.IListExtend.GetMaxMinValue``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0}@)">
            <summary>
            获取 集合最大最小值 第一个Max 第二个Min
            </summary>
        </member>
        <member name="M:AIO.IListExtend.GetMaxMinValue``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.SByte}@)">
            <summary>
            获取 集合最大最小值 第一个Max 第二个Min
            </summary>
        </member>
        <member name="M:AIO.IListExtend.RemoveFirst``1(System.Collections.Generic.IList{``0})">
            <summary>
            移除第一个元素
            </summary>
        </member>
        <member name="M:AIO.IListExtend.Remove``1(System.Collections.Generic.IList{``0},System.Predicate{``0}@)">
            <summary>
            移除元素
            </summary>
        </member>
        <member name="M:AIO.IListExtend.RemoveRepeat``1(System.Collections.Generic.IList{``0})">
            <summary>
            移除重复元素
            </summary>
        </member>
        <member name="M:AIO.IListExtend.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            移除最后一个元素
            </summary>
        </member>
        <member name="M:AIO.IListExtend.RemoveGroup``1(System.Collections.Generic.IList{``0},System.Int32@,System.Int32@)">
            <summary>
            移除指定范围的元素
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the collection argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if either index is less than zero or greater than or equal to the number of elements in the IList.</exception>
        </member>
        <member name="M:AIO.IListExtend.Remove``1(System.Collections.Generic.IList{``0},System.Int32@,System.Boolean@)">
            <summary>
            移除指定数量
            </summary>
            <param name="collection">数组</param>
            <param name="retainCount">保留数量</param>
            <param name="removeFromStart">Ture:从第一个移除 False:从最后一个移除</param>
            <typeparam name="T">泛型</typeparam>
            <exception cref="T:System.ArgumentNullException">参数为NULL</exception>
        </member>
        <member name="M:AIO.IListExtend.Set``1(System.Collections.Generic.IList{``0},System.Int32@,``0@)">
            <summary>
            设置指定下标元素
            </summary>
        </member>
        <member name="M:AIO.IListExtend.SetLast``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            设置最后一个元素
            </summary>
        </member>
        <member name="M:AIO.IListExtend.SetFirst``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            设置第一个元素
            </summary>
        </member>
        <member name="T:AIO.ISpanExtend">
            <summary>
            数组方法
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.Insert``1(``0[],System.Int32@,``0[])">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.Insert``1(``0[],System.Int32@,System.Array@)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.Insert``1(``0[],System.Int32@,``0@)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.Insert``1(``0[],System.Int32,System.Collections.Generic.ICollection{``0}@)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.AutoMaticExpansion``1(``0[],System.Int32@,System.Int32@)">
            <summary>
            自动扩容
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.RemoveALL``1(``0[],``0@)">
            <summary>
            移除
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.Remove``1(``0[],``0)">
            <summary>
            移除
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.RemoveAt``1(``0[],System.Int32@)">
            <summary>
            移除
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.ToConverString(System.Byte[])">
            <summary>
            转化为字符串
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.ToConverString(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            获取指定字节数组转化为字符串
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.ToConverStringUTF8(System.Byte[])">
            <summary>
            转化为字符串 UTF8格式
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.Add``1(``0[],``0@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.Add``1(``0[],``0[])">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.Add``1(``0[],System.Collections.Generic.ICollection{``0}@)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.ISpanExtend.CopyTo``1(``0[],System.Int32@)">
            <summary>
            复制
            </summary>
        </member>
        <member name="T:AIO.IntPtrExtend">
            <summary>
            句柄
            </summary>
        </member>
        <member name="M:AIO.IntPtrExtend.ToConverMemory(System.IntPtr)">
            <summary>
            转化为引用地址
            </summary>
        </member>
        <member name="M:AIO.IntPtrExtend.ToConverInts(System.IntPtr)">
            <summary>
            转化为int数组
            </summary>
        </member>
        <member name="M:AIO.IntPtrExtend.ToConverObject(System.IntPtr)">
            <summary>
            转化为 object
            </summary>
        </member>
        <member name="T:AIO.SocketExtend">
            <summary>
            Socket 扩展
            </summary>
        </member>
        <member name="M:AIO.SocketExtend.ToConverIP(System.Net.Sockets.Socket)">
            <summary>
            转化为IP地址
            </summary>
        </member>
        <member name="T:AIO.TypeExtend">
            <summary>
            类扩展
            </summary>
            <see>
                <cref>https://docs.microsoft.com/en-us/dotnet/api/system.type?view=net-5.0</cref>
            </see>
        </member>
        <member name="M:AIO.TypeExtend.Reset``1(``0,System.Reflection.BindingFlags)">
            <summary>
            重置类数据
            </summary>
        </member>
        <member name="T:AIO.EnumExtend">
            <summary>
            枚举扩展
            </summary>
        </member>
        <member name="M:AIO.EnumExtend.GetAttribute``1(System.Enum)">
            <summary>
            获取属性值
            </summary>
        </member>
        <member name="T:AIO.ICollectionExtend">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.ICollectionExtend.Find``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            查找 -1:未找到
            </summary>
        </member>
        <member name="T:AIO.IComparableExtend">
            <summary>
            扩展 ->
            定义由值类型或类实现的通用比较方法，以为排序实例创建类型特定的比较方法。
            </summary>
        </member>
        <member name="M:AIO.IComparableExtend.IsLT``1(System.IComparable{``0},``0@)">
            <summary>
            如果第一个对象 小于 第二个对象 则返回 true。
            </summary>
        </member>
        <member name="M:AIO.IComparableExtend.IsEQ``1(System.IComparable{``0},``0@)">
            <summary>
            如果第一个对象 等于 第二个对象，则返回 true。
            </summary>                                                              
        </member>
        <member name="M:AIO.IComparableExtend.IsGT``1(System.IComparable{``0},``0@)">
            <summary>
            如果第一个对象 大于 第二个对象，则返回 true。
            </summary>
        </member>
        <member name="M:AIO.IComparableExtend.IsNE``1(System.IComparable{``0},``0@)">
            <summary>
            如果第一个对象 不等于 第二个对象，则返回 true。
            </summary>
        </member>
        <member name="M:AIO.IComparableExtend.IsLE``1(System.IComparable{``0},``0@)">
            <summary>
            如果第一个对象 小于或等于 第二个对象，则返回 true。
            </summary>
        </member>
        <member name="M:AIO.IComparableExtend.IsGE``1(System.IComparable{``0},``0@)">
            <summary>
            如果第一个对象 大于或等于 第二个对象，则返回 true。
            </summary>
        </member>
        <member name="T:AIO.ByteExtend">
            <summary>
            字节数组扩展 写入
            </summary>
            <summary>
            字节扩展 包含类型 byte byte[]
            </summary>
        </member>
        <member name="M:AIO.ByteExtend.SetCharArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Char}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetByteArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Byte}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetSByteArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.SByte}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetBoolArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Boolean}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetInt16Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Int16}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetInt32Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Int32}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetInt64Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Int64}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetUInt16Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.UInt16}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetUInt32Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.UInt32}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetUInt64Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.UInt64}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetLenArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Int32}@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetFloatArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Single}@,System.Boolean,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="all"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetDoubleArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Double}@,System.Boolean,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="all"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetDecimalArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Decimal}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.String}@,System.Text.Encoding,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="encoding"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringArray(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Text.StringBuilder}@,System.Text.Encoding,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="encoding"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringUTF8Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.String}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringUTF8ASCII(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.String}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringUTF8Unicode(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.String}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringUTF8Array(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Text.StringBuilder}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringUTF8ASCII(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Text.StringBuilder}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringUTF8Unicode(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Collections.Generic.ICollection{System.Text.StringBuilder}@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetBool(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetChar(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Char@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetLen(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:AIO.ByteExtend.SetEnum``1(System.Collections.Generic.IList{System.Byte},``0@,System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="index"></param>
            <param name="reverse"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AIO.ByteExtend.SetByte(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Byte@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetSByte(System.Collections.Generic.IList{System.Byte},System.Int32@,System.SByte@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetInt16(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Int16@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetInt32(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetInt64(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Int64@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetUInt16(System.Collections.Generic.IList{System.Byte},System.Int32@,System.UInt16@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetUInt32(System.Collections.Generic.IList{System.Byte},System.Int32@,System.UInt32@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetUInt64(System.Collections.Generic.IList{System.Byte},System.Int32@,System.UInt64@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetFloat(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Single@,System.Boolean@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="all"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetDouble(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Double@,System.Boolean@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="all"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetDecimal(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Decimal@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetString(System.Collections.Generic.IList{System.Byte},System.Int32@,System.String@,System.Text.Encoding@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="encoding"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetString(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Text.StringBuilder@,System.Text.Encoding@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="encoding"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringUTF8(System.Collections.Generic.IList{System.Byte},System.Int32@,System.String@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringASCII(System.Collections.Generic.IList{System.Byte},System.Int32@,System.String@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringUnicode(System.Collections.Generic.IList{System.Byte},System.Int32@,System.String@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringUTF8(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringASCII(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.SetStringUnicode(System.Collections.Generic.IList{System.Byte},System.Int32@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:AIO.ByteExtend.ToConverHex16x(System.Byte)">
            <summary>
            字节 转小写16进制字符
            </summary>
        </member>
        <member name="M:AIO.ByteExtend.ToConverHex16X(System.Byte)">
            <summary>
            字节 转大写16进制字符
            </summary>
        </member>
        <member name="T:AIO.CharExtend">
            <summary>
            字符扩展
            </summary>
            <summary>
            字符扩展
            </summary>
            <summary>
            字符扩展
            </summary>
        </member>
        <member name="M:AIO.CharExtend.Repeat(System.Char,System.Int32)">
            <summary>
            重复字符
            </summary>
        </member>
        <member name="M:AIO.CharExtend.Clone(System.Char,System.Int32@)">
            <summary>
            重复N此 复制传入数据
            </summary>
        </member>
        <member name="M:AIO.CharExtend.Clone(System.Char,System.UInt32@)">
            <summary>
            重复N此 复制传入数据
            </summary>
        </member>
        <member name="M:AIO.CharExtend.GetBytesLength(System.Char)">
            <summary>
            判断当前字符是否为单字节
            </summary>
        </member>
        <member name="M:AIO.CharExtend.GetCodeASCII(System.Char)">
            <summary>
            获取 ASCII 码
            </summary>
        </member>
        <member name="M:AIO.CharExtend.GetCodeUnicode(System.Char)">
            <summary>
            获取 Unicode 码
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsWordDelimiter(System.Char)">
            <summary>
            检查字符是否是单词分隔符，包括空格、符号和标点符号
            </summary>
            <param name="c">要检查的字符</param>
            <returns>如果字符是单词分隔符，则为 true；否则为 false</returns>
        </member>
        <member name="M:AIO.CharExtend.IsInRange(System.Char,System.Char,System.Char)">
            <summary>
            判断字符串在指定范围
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.CharExtend.IsInRange(System.Char,System.Int32,System.Int32)">
            <summary>
            判断字符串在指定范围
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.CharExtend.IsWordBeginning(System.Nullable{System.Char},System.Char@,System.Nullable{System.Char}@)">
            <summary>
            检查字符是否可能是单词开始，根据字符及其前后字符的类型和顺序推断
            </summary>
            <param name="c">前一个字符，如果不存在则为 null</param>
            <param name="current">当前字符</param>
            <param name="next">后一个字符，如果不存在则为 null</param>
            <returns>如果该字符可能是单词开始，则为 true；否则为 false</returns>
        </member>
        <member name="M:AIO.CharExtend.IsSingleByte(System.Char)">
            <summary>
            判断当前字符是否为单字节
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsDigit(System.Char)">
            <summary>
            判断当前字符 是否为数字
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsHighSurrogate(System.Char)">
            <summary>
            判断当前字符 是否是一个高代理项
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsLetter(System.Char)">
            <summary>
            判断当前字符 是否属于 Unicode 字母类别
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsLetterOrDigit(System.Char)">
            <summary>
            判断当前字符 是否属于字母或十进制数字类别
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsLower(System.Char)">
            <summary>
            判断当前字符 是否属于小写字母类别
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsLowSurrogate(System.Char)">
            <summary>
            判断当前字符 是否是一个低代理项
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsNumber(System.Char)">
            <summary>
            判断当前字符 是否属于 Unicode 数字
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsPunctuation(System.Char)">
            <summary>
            判断当前字符 是否属于标点符号类别
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsSeparator(System.Char)">
            <summary>
            判断当前字符 是否属于分隔符类别
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsSurrogate(System.Char)">
            <summary>
            判断当前字符 是否具有代理项代码单位
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsSurrogatePair(System.Char,System.Char)">
            <summary>
            判断当前两个字符 是否形成一个代理项对
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsSymbol(System.Char)">
            <summary>
            判断当前字符 是否属于符号字符类别
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsUpper(System.Char)">
            <summary>
            判断当前字符 是否为大小字母类别
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsWhiteSpace(System.Char)">
            <summary>
            判断当前字符 是否属于空格类别
            </summary>
        </member>
        <member name="M:AIO.CharExtend.IsChinese(System.Char)">
            <summary>
            判断当前字符 是否属于中文字符
            </summary>
        </member>
        <member name="M:AIO.CharExtend.ToConverSByte(System.Char)">
            <summary>
            转化为字节
            </summary>
        </member>
        <member name="M:AIO.CharExtend.ToConverBytes(System.Char,System.Text.Encoding)">
            <summary>
            转化为字节数组
            </summary>
        </member>
        <member name="M:AIO.CharExtend.ToConverBase64(System.Char,System.Text.Encoding)">
            <summary>
            获取Base64
            </summary>
        </member>
        <member name="T:AIO.LongExtened">
            <summary>
            Long 扩展
            </summary>
        </member>
        <member name="M:AIO.LongExtened.ToConverStringFileSize(System.Int64)">
            <summary>
            将文件大小(字节)转换为最适合的显示方式
            </summary>
        </member>
        <member name="M:AIO.LongExtened.ToConverStringMoney(System.Int64)">
            <summary>
            转换为格式:00,000,000
            </summary>
        </member>
    </members>
</doc>

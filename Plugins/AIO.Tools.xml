<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AIO.Tools</name>
    </assembly>
    <members>
        <member name="T:AssemblyInfo">
            <summary>
            程序集信息
            </summary>
        </member>
        <member name="F:AssemblyInfo.KEY">
            <summary>
            密钥信息
            </summary>
        </member>
        <member name="F:AssemblyInfo.PublicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="F:AssemblyInfo.Token">
            <summary>
            公钥Token
            </summary>
        </member>
        <member name="F:AssemblyInfo.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:AssemblyInfo.FileVersion">
            <summary>
            指示编译器使用 Win32 文件版本资源的特定版本号。 Win32 文件版本不需要与程序集的版本号相同。
            </summary>
        </member>
        <member name="F:AssemblyInfo.KeyFile">
            <summary>
            密钥位置
            </summary>
        </member>
        <member name="F:AssemblyInfo.KeyName">
            <summary>
            密钥位置
            </summary>
        </member>
        <member name="F:AssemblyInfo.Company">
            <summary>
            作者
            </summary>
        </member>
        <member name="F:AssemblyInfo.Copyright">
            <summary>
            程序集属性
            </summary>
        </member>
        <member name="F:AssemblyInfo.Culture">
            <summary>
            支持的区域性
            </summary>
        </member>
        <member name="T:AIO.GBeanRegisterAttribute">
            <summary>
            游戏数据注册
            </summary>
        </member>
        <member name="P:AIO.GBeanRegisterAttribute.ID">
            <summary>
            唯一ID
            </summary>
        </member>
        <member name="M:AIO.GBeanRegisterAttribute.#ctor(System.Int32)">
            <summary>
            游戏数据注册
            </summary>
            <param name="id">唯一ID</param>
        </member>
        <member name="T:AIO.GBeanSystem">
            <summary>
            游戏数据储存管理
            </summary>
        </member>
        <member name="F:AIO.GBeanSystem.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:AIO.GBeanSystem.Bean">
            <summary>
            源数据
            </summary>
        </member>
        <member name="P:AIO.GBeanSystem.Progress">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="F:AIO.GBeanSystem.TargetPath">
            <summary>
            目标存储读取路径
            </summary>
        </member>
        <member name="M:AIO.GBeanSystem.GetMD5(System.Byte[]@)">
            <summary>
            获取二进制MD5码
            </summary>
        </member>
        <member name="M:AIO.GBeanSystem.Initialize(System.String@)">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="M:AIO.GBeanSystem.Load">
            <summary>
            加载数据
            </summary>
        </member>
        <member name="M:AIO.GBeanSystem.Save">
            <summary>
            保存数据
            </summary>
        </member>
        <member name="M:AIO.GBeanSystem.Clean">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AIO.GBeanSystem.Reset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="T:AIO.GBean">
            <summary>
            游戏数据
            </summary>
        </member>
        <member name="M:AIO.GBean.Deserialize(AIO.IReadData)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.GBean.Serialize(AIO.IWriteData)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.GBean.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:AIO.GBean.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AIO.GBean.Frist">
            <summary>
            首次数据存放
            </summary>
        </member>
        <member name="M:AIO.GBean.Clean">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AIO.GBean.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="T:AIO.Buffer">
            <summary>
            数据缓存留
            </summary>
        </member>
        <member name="F:AIO.Buffer.CAPACITY">
            <summary>
            默认容量:32B = 256bit
            </summary>
        </member>
        <member name="F:AIO.Buffer.MAX_CAPACITY">
            <summary>
            最大缓存:4M
            </summary>
        </member>
        <member name="F:AIO.Buffer.WriteIndex">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="F:AIO.Buffer.ReadIndex">
            <summary>
            当前读取位置
            </summary>
        </member>
        <member name="M:AIO.Buffer.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AIO.Buffer.Clear">
            <summary> 
            清空
            </summary>
        </member>
        <member name="P:AIO.Buffer.WriteOffset">
            <summary>
            缓存写入进度: 当前首位
            </summary>
        </member>
        <member name="P:AIO.Buffer.ReadOffset">
            <summary>
            缓存写入进度: 当前读取游标下标
            </summary>
        </member>
        <member name="P:AIO.Buffer.Count">
            <summary> 
            返回数据可读取长度
            </summary>
        </member>
        <member name="P:AIO.Buffer.Capacity">
            <summary> 
            数据缓存:容量
            </summary>
        </member>
        <member name="M:AIO.Buffer.Skip(System.Int32@)">
            <summary>
            跳过
            </summary>
        </member>
        <member name="M:AIO.Buffer.CheckSize(System.Int32@)">
            <summary>
            检查剩余数量 
            Flase:不满足
            Ture:满足
            </summary>
        </member>
        <member name="T:AIO.Buffer`1">
            <summary>
            缓冲流
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Addition(AIO.Buffer{`0},AIO.Buffer{`0}@)">
            <summary>
            增加
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Addition(AIO.Buffer{`0},`0[]@)">
            <summary>
            增加
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Addition(AIO.Buffer{`0},System.Collections.Generic.HashSet{`0}@)">
            <summary>
            增加
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Addition(AIO.Buffer{`0},System.Collections.Generic.ICollection{`0}@)">
            <summary>
            增加
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Implicit(AIO.Buffer{`0}@)~`0[]">
            <summary>
            隐式转化为数组
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Implicit(AIO.Buffer{`0}@)~System.Collections.Generic.HashSet{`0}">
            <summary>
            隐式转化为数组
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.op_Implicit(AIO.Buffer{`0}@)~System.Collections.Generic.List{`0}">
            <summary>
            隐式转化为List
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.#ctor(System.Int32@)">
            <summary>
            构建一个指定容量的Buffer
            </summary>
        </member>
        <member name="P:AIO.Buffer`1.Arrays">
            <summary>
            数据缓存
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.#ctor(`0[]@)">
            <summary>
            构建一个指定数据的ByteBuffer
            </summary>
        </member>
        <member name="P:AIO.Buffer`1.Capacity">
            <summary> 
            数据缓存:容量
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.ToArray">
            <summary> 
            获取有效字节数组
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.Write(AIO.Buffer{`0}@)">
            <summary> 
            将指定字节缓冲区数据写入当前缓存区
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.Write(System.Collections.Generic.ICollection{`0}@)">
            <summary> 
            将指定字节缓冲区数据写入当前缓存区
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.Write(System.Collections.Generic.IList{`0}@,System.Int32@,System.Int32@)">
            <summary>
            写入byte数组(从position开始写入len个)
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.Write(System.Collections.Generic.ICollection{`0}@,System.Int32@,System.Int32@)">
            <summary>
            写入byte数组(从position开始写入len个)
            </summary>
        </member>
        <member name="P:AIO.Buffer`1.IsReadOnly">
            <summary>
            是否为只读
            </summary>
        </member>
        <member name="P:AIO.Buffer`1.Item(System.Int32)">
            <summary>
            获取指定元素
            </summary>
            <param name="index">下标</param>
        </member>
        <member name="M:AIO.Buffer`1.IndexOf(`0)">
            <summary>
            判断元素所在下标
            </summary>
            <param name="item">元素</param>
            <returns>-1未找到指定下标</returns>
        </member>
        <member name="M:AIO.Buffer`1.Insert(System.Int32,`0)">
            <summary>
            在指定位置插入元素
            </summary>
            <param name="index">下标</param>
            <param name="item">元素</param>
            <exception cref="T:System.IndexOutOfRangeException">数组越界</exception>
        </member>
        <member name="M:AIO.Buffer`1.RemoveAt(System.Int32)">
            <summary>
            移除指定下标元素
            </summary>
            <param name="index">下标</param>
            <exception cref="T:System.IndexOutOfRangeException">数组越界</exception>
        </member>
        <member name="M:AIO.Buffer`1.Add(`0)">
            <summary>
            添加指定元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:AIO.Buffer`1.Contains(`0)">
            <summary>
            确定序列是否包含指定的元素使用的默认相等比较器。
            </summary>
            <param name="item">要在其中定位某个值的序列。</param>
            <returns>true 如果源序列包含具有指定的值; 的元素否则为 false。</returns>
        </member>
        <member name="M:AIO.Buffer`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制
            </summary>
            <param name="array">目标数组</param>
            <param name="arrayIndex">数组下标</param>
        </member>
        <member name="M:AIO.Buffer`1.Remove(`0)">
            <summary>
            移除指定元素
            </summary>
            <param name="item">元素</param>
            <returns>true 移除成功 false 集合不包含该元素</returns>
        </member>
        <member name="M:AIO.Buffer`1.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>返回指定元素</returns>
        </member>
        <member name="M:AIO.Buffer`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:AIO.Buffer`1.Equals(AIO.Buffer{`0},AIO.Buffer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Buffer`1.GetHashCode(AIO.Buffer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Buffer`1.Clone">
            <inheritdoc/>
        </member>
        <member name="T:AIO.BufferByte">
            <summary>
            字节缓存类
            </summary>
            提供 write, read, set, get 方法
            write  :  将写入字节缓存,改变写入进度
            read   :  从字节缓存中读取,改变读取进度
            set    :  需要传入索引,在字节缓存的指定索引处写入一个,不影响缓存读写进度
            get    :  需要传入索引,在字节缓存的指定索引处读取一个,不影响缓存读写进度
            method_:  为倒序写入 倒序读取
        </member>
        <member name="M:AIO.BufferByte.WriteCollection``1(System.Collections.Generic.ICollection{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.ReadCollection``1(System.Collections.Generic.ICollection{``0})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.WriteDictionary``2(System.Collections.Generic.IDictionary{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.ReadDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.ReadBool">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadBoolArray(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteBool(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteBoolArray(System.Collections.Generic.ICollection{System.Boolean}@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadByte">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadByteArray(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteByte(System.Byte@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteByteArray(System.Collections.Generic.ICollection{System.Byte}@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadChar(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadCharArray(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteChar(System.Char@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteCharArray(System.Collections.Generic.ICollection{System.Char}@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:AIO.BufferByte.#ctor(System.Byte[]@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.BufferByte.#ctor(System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.BufferByte.Write(AIO.Buffer{System.Byte}@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.Read(System.Int32@,System.Int32@)">
            <summary>
            读取数据
            </summary>
            <param name="start">开始下标</param>
            <param name="count">长度</param>
            <returns>返回数组</returns>
        </member>
        <member name="M:AIO.BufferByte.Write(System.Collections.Generic.IList{System.Byte}@,System.Int32@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.Write(System.Collections.Generic.ICollection{System.Byte}@,System.Int32@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AIO.BufferByte.ReadData``1">
            <summary>
            读取数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>值</returns>
        </member>
        <member name="M:AIO.BufferByte.ReadDataArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            读取数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>值</returns>
        </member>
        <member name="M:AIO.BufferByte.WriteData``1(``0)">
            <summary>
            写入二进制数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:AIO.BufferByte.WriteDataArray``1(System.Collections.Generic.ICollection{``0}@)">
            <summary>
            读取数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>值</returns>
        </member>
        <member name="M:AIO.BufferByte.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AIO.BufferByte.ReadDecimal(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadDecimalArray(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteDecimal(System.Decimal@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteDecimalArray(System.Collections.Generic.ICollection{System.Decimal}@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadDouble(System.Boolean@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadDoubleArray(System.Boolean@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteDouble(System.Double@,System.Boolean,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteDoubleArray(System.Collections.Generic.ICollection{System.Double}@,System.Boolean@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadEnum``1(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadEnumArray``1(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteEnum``1(``0@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteEnumArray``1(System.Collections.Generic.ICollection{``0}@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadFloat(System.Boolean@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadFloatArray(System.Boolean@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteFloat(System.Single@,System.Boolean,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteFloatArray(System.Collections.Generic.ICollection{System.Single}@,System.Boolean@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteList``1(System.Collections.Generic.IList{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.ReadList``1(System.Collections.Generic.IList{``0})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferByte.ReadInt16(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadInt16Array(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteInt16(System.Int16@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteInt16Array(System.Collections.Generic.ICollection{System.Int16}@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadInt32(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadInt32Array(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteInt32(System.Int32@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteInt32Array(System.Collections.Generic.ICollection{System.Int32}@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadInt64(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadInt64Array(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteInt64Array(System.Collections.Generic.ICollection{System.Int64}@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteInt64(System.Int64@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadJson``1(Newtonsoft.Json.JsonSerializerSettings@,System.Text.Encoding@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadJsonUTF8``1(Newtonsoft.Json.JsonSerializerSettings@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadJsonASCII``1(Newtonsoft.Json.JsonSerializerSettings@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadJsonUnicode``1(Newtonsoft.Json.JsonSerializerSettings@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteJson``1(``0@,Newtonsoft.Json.JsonSerializerSettings@,System.Text.Encoding@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteJsonUTF8``1(``0@,Newtonsoft.Json.JsonSerializerSettings@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteJsonASCII``1(``0@,Newtonsoft.Json.JsonSerializerSettings@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteJsonUnicode``1(``0@,Newtonsoft.Json.JsonSerializerSettings@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadLen">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadLenArray">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteLen(System.Int32@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteLen(System.UInt16@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteLen(System.Int16@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteLen(System.Byte@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteLen(System.SByte@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteLenArray(System.Collections.Generic.ICollection{System.Int32}@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadSByte">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadSByteArray(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteSByte(System.SByte@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteSByteArray(System.Collections.Generic.ICollection{System.SByte}@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadString(System.Text.Encoding@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadStringUTF8(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadStringASCII(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadStringUnicode(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteString(System.String@,System.Text.Encoding@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteString(System.Text.StringBuilder@,System.Text.Encoding@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteStringUTF8(System.String@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteStringUTF8(System.Text.StringBuilder@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteStringASCII(System.String@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteStringASCII(System.Text.StringBuilder@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteStringUnicode(System.String@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteStringUnicode(System.Text.StringBuilder@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadUInt16(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteUInt16(System.UInt16@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadUInt16Array(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteUInt16Array(System.Collections.Generic.ICollection{System.UInt16}@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadUInt32(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadUInt32Array(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteUInt32(System.UInt32@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteUInt32Array(System.Collections.Generic.ICollection{System.UInt32}@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadUInt64Array(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteUInt64Array(System.Collections.Generic.ICollection{System.UInt64}@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.ReadUInt64(System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="M:AIO.BufferByte.WriteUInt64(System.UInt64@,System.Boolean@)">
            <inheritdoc/> 
        </member>
        <member name="T:AIO.ILoad">
            <summary>
            加载文件等等
            </summary>
        </member>
        <member name="M:AIO.ILoad.Load">
            <summary>
            加载
            </summary>
        </member>
        <member name="T:AIO.ISave">
            <summary>
            保存文件
            </summary>
        </member>
        <member name="M:AIO.ISave.Save">
            <summary>
            保存文件
            </summary>
        </member>
        <member name="T:AIO.IReadData">
            <summary>
            数据读取接口
            </summary>
        </member>
        <member name="P:AIO.IReadData.Count">
            <summary>
            可读数据长度
            </summary>
        </member>
        <member name="M:AIO.IReadData.ReadData``1">
            <summary>
            读取数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>值</returns>
        </member>
        <member name="M:AIO.IReadData.ReadDataArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            读取数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>值</returns>
        </member>
        <member name="M:AIO.IReadData.CheckSize(System.Int32@)">
            <summary>
            检查是否有指定数据长度
            </summary>
            <param name="count">长度</param>
            <returns>Ture:满足 False:不满足</returns>
        </member>
        <member name="M:AIO.IReadData.Skip(System.Int32@)">
            <summary>
            跳过读取指定长度
            </summary>
            <param name="count">长度</param>
        </member>
        <member name="T:AIO.IReadICollection">
            <summary>
            读取字典
            </summary>
        </member>
        <member name="M:AIO.IReadICollection.ReadCollection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            读取字典
            </summary>
        </member>
        <member name="T:AIO.IReadIDictionary">
            <summary>
            读取字典
            </summary>
        </member>
        <member name="M:AIO.IReadIDictionary.ReadDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            读取字典
            </summary>
        </member>
        <member name="T:AIO.IReadIList">
            <summary>
            读取字典
            </summary>
        </member>
        <member name="M:AIO.IReadIList.ReadList``1(System.Collections.Generic.IList{``0})">
            <summary>
            读取字典
            </summary>
        </member>
        <member name="T:AIO.IReset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:AIO.IReset.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="T:AIO.IWriteData">
            <summary>
            写入数据
            </summary>
        </member>
        <member name="M:AIO.IWriteData.WriteData``1(``0)">
            <summary>
            写入二进制数据
            </summary>
            <param name="buffer">数据</param>
        </member>
        <member name="M:AIO.IWriteData.WriteDataArray``1(System.Collections.Generic.ICollection{``0}@)">
            <summary>
            读取数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>值</returns>
        </member>
        <member name="T:AIO.IReadBool">
            <summary>
            读取Bool
            </summary>
        </member>
        <member name="M:AIO.IReadBool.ReadBool">
            <summary>
            读取 Bool 数据类型
            </summary>
        </member>
        <member name="M:AIO.IReadBool.ReadBoolArray(System.Boolean@)">
            <summary>
            读取 Bool数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>Bool数组</returns>
        </member>
        <member name="T:AIO.IReadByte">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadByte.ReadByte">
            <summary>
            读取 Byte 数据类型
            </summary>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadByte.ReadByteArray(System.Boolean@)">
            <summary>
            读取 Byte 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadChar">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadChar.ReadChar(System.Boolean@)">
            <summary>
            读取 Char 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadChar.ReadCharArray(System.Boolean@)">
            <summary>
            读取 Char 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadDecimal">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadDecimal.ReadDecimal(System.Boolean@)">
            <summary>
            读取 Decimal 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadDecimal.ReadDecimalArray(System.Boolean@)">
            <summary>
            读取 Decimal 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadDouble">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadDouble.ReadDouble(System.Boolean@,System.Boolean@)">
            <summary>
            读取 Double 数据类型
            </summary>
            <param name="all">全部</param>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadDouble.ReadDoubleArray(System.Boolean@,System.Boolean@)">
            <summary>
            读取 Double 数组 数据类型
            </summary>
            <param name="all">全部</param>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadEnum">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadEnum.ReadEnum``1(System.Boolean@)">
            <summary>
            读取 枚举 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <typeparam name="T">枚举类型</typeparam>
            <returns>枚举值</returns>
        </member>
        <member name="M:AIO.IReadEnum.ReadEnumArray``1(System.Boolean@)">
            <summary>
            读取 枚举数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <typeparam name="T">枚举类型</typeparam>
            <returns>枚举值数组</returns>
        </member>
        <member name="T:AIO.IReadFloat">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadFloat.ReadFloatArray(System.Boolean@,System.Boolean@)">
            <summary>
            读取 Float 数组 数据类型
            </summary>
            <param name="all"></param>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadFloat.ReadFloat(System.Boolean@,System.Boolean@)">
            <summary>
            读取 Float 数据类型
            </summary>
            <param name="all">全部</param>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadInt16">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadInt16.ReadInt16(System.Boolean@)">
            <summary>
            读取 Int16 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadInt16.ReadInt16Array(System.Boolean@)">
            <summary>
            读取 Int16 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadInt32">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadInt32.ReadInt32(System.Boolean@)">
            <summary>
            读取 Int32 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadInt32.ReadInt32Array(System.Boolean@)">
            <summary>
            读取 Int32 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadInt64">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadInt64.ReadInt64(System.Boolean@)">
            <summary>
            读取 Int64 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadInt64.ReadInt64Array(System.Boolean@)">
            <summary>
            读取 Int64 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadJson">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadJson.ReadJson``1(Newtonsoft.Json.JsonSerializerSettings@,System.Text.Encoding@,System.Boolean@)">
            <summary>
            读取Json数据
            </summary>
            <param name="settings">反序列化设置</param>
            <param name="encoding">字符串编码</param>
            <param name="reverse">反转</param>
            <typeparam name="T">数据泛型</typeparam>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadJson.ReadJsonUTF8``1(Newtonsoft.Json.JsonSerializerSettings@,System.Boolean@)">
            <summary>
            读取Json数据
            </summary>
            <param name="settings">反序列化设置</param>
            <param name="reverse">反转</param>
            <typeparam name="T">数据泛型</typeparam>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadJson.ReadJsonASCII``1(Newtonsoft.Json.JsonSerializerSettings@,System.Boolean@)">
            <summary>
            读取Json数据
            </summary>
            <param name="settings">反序列化设置</param>
            <param name="reverse">反转</param>
            <typeparam name="T">数据泛型</typeparam>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadJson.ReadJsonUnicode``1(Newtonsoft.Json.JsonSerializerSettings@,System.Boolean@)">
            <summary>
            读取Json数据
            </summary>
            <param name="settings">反序列化设置</param>
            <param name="reverse">反转</param>
            <typeparam name="T">数据泛型</typeparam>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadLength">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadLength.ReadLen">
            <summary>
            读取一个长度 0至512M
            </summary>
            原理 : 以第一个字节二进制前三位来决定长度值占用的字节数(x表示0或1)
            1xx 开头:长度值占1个字节,且值只能是剩下的 07=(08-1) 位能表示的范围,即:0~(2^07-1)=0~127
            01x 开头:长度值占2个字节,且值只能是剩下的 14=(16-2) 位能表示的范围,即:0~(2^14-1)=0~163,83
            001 开头:长度值占4个字节,且值只能是剩下的 29=(32-3) 位能表示的范围,即:0~(2^29-1)=0~536,870,91
        </member>
        <member name="M:AIO.IReadLength.ReadLenArray">
            <summary>
            读取一个长度数组
            </summary>
            <returns>返回数组</returns>
        </member>
        <member name="T:AIO.IReadSByte">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadSByte.ReadSByte">
            <summary>
            读取 SByte 数据类型
            </summary>
            <returns>返回数组</returns>
        </member>
        <member name="M:AIO.IReadSByte.ReadSByteArray(System.Boolean@)">
            <summary>
            读取 Sbyte 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>返回数组</returns>
        </member>
        <member name="T:AIO.IReadString">
            <summary>
            读取 数据 String
            </summary>
        </member>
        <member name="M:AIO.IReadString.ReadStringUTF8(System.Boolean@)">
            <summary>
            读取字符串
            </summary>
            <param name="reverse">是否反转</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AIO.IReadString.ReadStringASCII(System.Boolean@)">
            <summary>
            读取字符串
            </summary>
            <param name="reverse">是否反转</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AIO.IReadString.ReadStringUnicode(System.Boolean@)">
            <summary>
            读取字符串
            </summary>
            <param name="reverse">是否反转</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AIO.IReadString.ReadString(System.Text.Encoding@,System.Boolean@)">
            <summary>
            读取字符串
            </summary>
            <param name="encoding">编码</param>
            <param name="reverse">是否反转</param>
            <returns>字符串</returns>
        </member>
        <member name="T:AIO.IReadUInt16">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadUInt16.ReadUInt16(System.Boolean@)">
            <summary>
            读取 UInt16 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadUInt16.ReadUInt16Array(System.Boolean@)">
            <summary>
            读取 UInt16 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadUInt32">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadUInt32.ReadUInt32(System.Boolean@)">
            <summary>
            读取 UInt32 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadUInt32.ReadUInt32Array(System.Boolean@)">
            <summary>
            读取 UInt32 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IReadUInt64">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:AIO.IReadUInt64.ReadUInt64(System.Boolean@)">
            <summary>
            读取 UInt64 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AIO.IReadUInt64.ReadUInt64Array(System.Boolean@)">
            <summary>
            读取 UInt64 数组 数据类型
            </summary>
            <param name="reverse">是否反转</param>
            <returns>数据值</returns>
        </member>
        <member name="T:AIO.IWriteBool">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteBool.WriteBool(System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteBool.WriteBoolArray(System.Collections.Generic.ICollection{System.Boolean}@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="T:AIO.IWriteByte">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteByte.WriteByte(System.Byte@)">
            <summary>
            写入指定数据类型
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AIO.IWriteByte.WriteByteArray(System.Collections.Generic.ICollection{System.Byte}@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
            <param name="value"></param>
            <param name="reverse"></param>
        </member>
        <member name="T:AIO.IWriteChar">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteChar.WriteChar(System.Char@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteChar.WriteCharArray(System.Collections.Generic.ICollection{System.Char}@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteDecimal">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteDecimal.WriteDecimal(System.Decimal@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteDecimal.WriteDecimalArray(System.Collections.Generic.ICollection{System.Decimal}@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteDouble">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteDouble.WriteDouble(System.Double@,System.Boolean,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteDouble.WriteDoubleArray(System.Collections.Generic.ICollection{System.Double}@,System.Boolean@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteEnum">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteEnum.WriteEnum``1(``0@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteEnum.WriteEnumArray``1(System.Collections.Generic.ICollection{``0}@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteFloat">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteFloat.WriteFloat(System.Single@,System.Boolean,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteFloat.WriteFloatArray(System.Collections.Generic.ICollection{System.Single}@,System.Boolean@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteICollection">
            <summary>
            写入字典
            </summary>
        </member>
        <member name="M:AIO.IWriteICollection.WriteCollection``1(System.Collections.Generic.ICollection{``0}@)">
            <summary>
            写入字典
            </summary>
        </member>
        <member name="T:AIO.IWriteIDictionary">
            <summary>
            写入字典
            </summary>
        </member>
        <member name="M:AIO.IWriteIDictionary.WriteDictionary``2(System.Collections.Generic.IDictionary{``0,``1}@)">
            <summary>
            写入字典
            </summary>
        </member>
        <member name="T:AIO.IWriteIList">
            <summary>
            写入字典
            </summary>
        </member>
        <member name="M:AIO.IWriteIList.WriteList``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            写入字典
            </summary>
        </member>
        <member name="T:AIO.IWriteInt16">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteInt16.WriteInt16(System.Int16@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteInt16.WriteInt16Array(System.Collections.Generic.ICollection{System.Int16}@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteInt32">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteInt32.WriteInt32(System.Int32@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteInt32.WriteInt32Array(System.Collections.Generic.ICollection{System.Int32}@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteInt64">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteInt64.WriteInt64(System.Int64@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteInt64.WriteInt64Array(System.Collections.Generic.ICollection{System.Int64}@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteJson">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteJson.WriteJson``1(``0@,Newtonsoft.Json.JsonSerializerSettings@,System.Text.Encoding@,System.Boolean@)">
            <summary>
            写入Json数据
            </summary>
            <param name="value">输入源</param>
            <param name="settings">json压缩设置</param>
            <param name="encoding">编码</param>
            <param name="reverse">反转</param>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:AIO.IWriteJson.WriteJsonUTF8``1(``0@,Newtonsoft.Json.JsonSerializerSettings@,System.Boolean@)">
            <summary>
            写入Json数据
            </summary>
            <param name="value">输入源</param>
            <param name="settings">json压缩设置</param>
            <param name="reverse">反转</param>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:AIO.IWriteJson.WriteJsonASCII``1(``0@,Newtonsoft.Json.JsonSerializerSettings@,System.Boolean@)">
            <summary>
            写入Json数据
            </summary>
            <param name="value">输入源</param>
            <param name="settings">json压缩设置</param>
            <param name="reverse">反转</param>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:AIO.IWriteJson.WriteJsonUnicode``1(``0@,Newtonsoft.Json.JsonSerializerSettings@,System.Boolean@)">
            <summary>
            写入Json数据
            </summary>
            <param name="value">输入源</param>
            <param name="settings">json压缩设置</param>
            <param name="reverse">反转</param>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="T:AIO.IWriteLength">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteLength.WriteLen(System.Byte@)">
            <summary> 写入一个长度, 0至512M </summary>
            原理: 以第一个字节二进制前三位来决定长度值占用的字节数(x表示0或1)
            1xx 开头:长度值占1个字节,且值只能是剩下的 07=(08-1) 位能表示的范围,即:0~(2^07-1)=0~127
            01x 开头:长度值占2个字节,且值只能是剩下的 14=(16-2) 位能表示的范围,即:0~(2^14-1)=0~163,83
            001 开头:长度值占4个字节,且值只能是剩下的 29=(32-3) 位能表示的范围,即:0~(2^29-1)=0~536,870,91
        </member>
        <member name="M:AIO.IWriteLength.WriteLen(System.SByte@)">
            <summary> 写入一个长度, 0至512M </summary>
            原理: 以第一个字节二进制前三位来决定长度值占用的字节数(x表示0或1)
            1xx 开头:长度值占1个字节,且值只能是剩下的 07=(08-1) 位能表示的范围,即:0~(2^07-1)=0~127
            01x 开头:长度值占2个字节,且值只能是剩下的 14=(16-2) 位能表示的范围,即:0~(2^14-1)=0~163,83
            001 开头:长度值占4个字节,且值只能是剩下的 29=(32-3) 位能表示的范围,即:0~(2^29-1)=0~536,870,91
        </member>
        <member name="M:AIO.IWriteLength.WriteLen(System.UInt16@)">
            <summary> 写入一个长度, 0至512M </summary>
            原理: 以第一个字节二进制前三位来决定长度值占用的字节数(x表示0或1)
            1xx 开头:长度值占1个字节,且值只能是剩下的 07=(08-1) 位能表示的范围,即:0~(2^07-1)=0~127
            01x 开头:长度值占2个字节,且值只能是剩下的 14=(16-2) 位能表示的范围,即:0~(2^14-1)=0~163,83
            001 开头:长度值占4个字节,且值只能是剩下的 29=(32-3) 位能表示的范围,即:0~(2^29-1)=0~536,870,91
        </member>
        <member name="M:AIO.IWriteLength.WriteLen(System.Int16@)">
            <summary> 写入一个长度, 0至512M </summary>
            原理: 以第一个字节二进制前三位来决定长度值占用的字节数(x表示0或1)
            1xx 开头:长度值占1个字节,且值只能是剩下的 07=(08-1) 位能表示的范围,即:0~(2^07-1)=0~127
            01x 开头:长度值占2个字节,且值只能是剩下的 14=(16-2) 位能表示的范围,即:0~(2^14-1)=0~163,83
            001 开头:长度值占4个字节,且值只能是剩下的 29=(32-3) 位能表示的范围,即:0~(2^29-1)=0~536,870,91
        </member>
        <member name="M:AIO.IWriteLength.WriteLen(System.Int32@)">
            <summary> 写入一个长度, 0至512M </summary>
            原理: 以第一个字节二进制前三位来决定长度值占用的字节数(x表示0或1)
            1xx 开头:长度值占1个字节,且值只能是剩下的 07=(08-1) 位能表示的范围,即:0~(2^07-1)=0~127
            01x 开头:长度值占2个字节,且值只能是剩下的 14=(16-2) 位能表示的范围,即:0~(2^14-1)=0~163,83
            001 开头:长度值占4个字节,且值只能是剩下的 29=(32-3) 位能表示的范围,即:0~(2^29-1)=0~536,870,91
        </member>
        <member name="M:AIO.IWriteLength.WriteLenArray(System.Collections.Generic.ICollection{System.Int32}@)">
            <summary>
            写入Sbyte数组
            </summary>
            <param name="value">输入源</param>
        </member>
        <member name="T:AIO.IWriteSByte">
            <summary>
            写入数据 SByte Array
            </summary>
        </member>
        <member name="M:AIO.IWriteSByte.WriteSByte(System.SByte@)">
            <summary>
            写入Sbyte数组
            </summary>
            <param name="value">输入源</param>
        </member>
        <member name="M:AIO.IWriteSByte.WriteSByteArray(System.Collections.Generic.ICollection{System.SByte}@,System.Boolean@)">
            <summary>
            写入Sbyte数组
            </summary>
            <param name="value">输入源</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="T:AIO.IWriteString">
            <summary>
            写入数据 String
            </summary>
        </member>
        <member name="M:AIO.IWriteString.WriteString(System.String@,System.Text.Encoding@,System.Boolean@)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="encoding">编码</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteString(System.Text.StringBuilder@,System.Text.Encoding@,System.Boolean@)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="encoding">编码</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteStringUTF8(System.String@,System.Boolean@)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteStringUTF8(System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteStringASCII(System.String@,System.Boolean@)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteStringASCII(System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteStringUnicode(System.String@,System.Boolean@)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="M:AIO.IWriteString.WriteStringUnicode(System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            写入字符串
            </summary>
            <param name="value">输入值</param>
            <param name="reverse">是否反转</param>
        </member>
        <member name="T:AIO.IWriteUInt16">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteUInt16.WriteUInt16(System.UInt16@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteUInt16.WriteUInt16Array(System.Collections.Generic.ICollection{System.UInt16}@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteUInt32">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteUInt32.WriteUInt32(System.UInt32@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteUInt32.WriteUInt32Array(System.Collections.Generic.ICollection{System.UInt32}@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.IWriteUInt64">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteUInt64.WriteUInt64(System.UInt64@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="M:AIO.IWriteUInt64.WriteUInt64Array(System.Collections.Generic.ICollection{System.UInt64}@,System.Boolean@)">
            <summary>
            写入指定数据类型
            </summary>
        </member>
        <member name="T:AIO.BufferRing`1">
            <summary>
            闭环数据流
            </summary>
            参考链接
            <see>
                <cref>https://ifeve.com/dissecting-disruptor-whats-so-special/</cref>
            </see>
        </member>
        <member name="F:AIO.BufferRing`1.FreedDic">
            <summary>
            存储队列 该队列专门存储数据作为对象池
            </summary>
        </member>
        <member name="F:AIO.BufferRing`1.UsedDic">
            <summary>
            读写队列 该队列专门处理数据读写
            </summary>
        </member>
        <member name="P:AIO.BufferRing`1.Capacity">
            <summary>
            容量
            </summary>
        </member>
        <member name="P:AIO.BufferRing`1.First">
            <summary>
            第一个读取的数组长度 队列最上面的数据数组
            </summary>
        </member>
        <member name="P:AIO.BufferRing`1.Last">
            <summary>
            最后读取的数组长度 队列最下面的数据数组
            </summary>
        </member>
        <member name="P:AIO.BufferRing`1.Count">
            <summary>
            当前可读取数据长度
            </summary>
        </member>
        <member name="P:AIO.BufferRing`1.WriteOffset">
            <summary>
            缓存写入进度: 当前首位
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.ToArray">
            <summary> 返回:有效字节数组 </summary>
        </member>
        <member name="M:AIO.BufferRing`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.AddLast">
            <summary>
            添加 读写数据数组 进入 读写队列
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.RemoveFirst">
            <summary>
            移除最上层的数据 添加进入到对象池
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.Read(`0[])">
            <summary>
            读取
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.Read(System.Int32)">
            <summary>
            读取
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.Read(`0[],System.Int32,System.Int32)">
            <summary>
            读取
            </summary>
            <param name="Buffer">字节数组</param>
            <param name="Offset">开始值 偏移量</param>
            <param name="count">读取长度</param>
            <returns>实际读取长度</returns>
        </member>
        <member name="M:AIO.BufferRing`1.Write(System.Collections.Generic.ICollection{`0}@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferRing`1.Write(System.Collections.Generic.IList{`0}@,System.Int32@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferRing`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.BufferRing`1.IsLastFull">
            <summary>
            判断Last数组是否满
            </summary>
        </member>
        <member name="M:AIO.BufferRing`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:AIO.RingBufferExtend">
            <summary>
            扩展
            </summary>
        </member>
        <member name="M:AIO.RingBufferExtend.Read(AIO.BufferRing{System.Byte},System.IO.Stream,System.Int32@)">
            <summary>
            读取数据流
            </summary>
        </member>
        <member name="M:AIO.RingBufferExtend.Write(AIO.BufferRing{System.Byte},System.IO.Stream)">
            <summary>
            写入数据
            </summary>
        </member>
        <member name="T:AIO.IBinDeserialize">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.IBinDeserialize.Deserialize(AIO.IReadData)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="T:AIO.IBinSerialize">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.IBinSerialize.Serialize(AIO.IWriteData)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:AIO.IBinStorage">
            <summary>
            二进制数据存储
            </summary>
        </member>
        <member name="P:AIO.IBinStorage.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:AIO.IDeserialize">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.IDeserialize.Deserialize">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="T:AIO.ISerialize">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.ISerialize.Serialize">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:AIO.BinDictionary`2">
            <summary>
            数据字典
            </summary>
            <typeparam name="K">Key泛型</typeparam>
            <typeparam name="V">Value泛型</typeparam>
        </member>
        <member name="P:AIO.BinDictionary`2.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.BinDictionary`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.BinDictionary`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Deserialize(AIO.IReadData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Serialize(AIO.IWriteData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Reset">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinDictionary`2.Count">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinDictionary`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinDictionary`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinDictionary`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinDictionary`2.Values">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinDictionary`2.Clone">
            <inheritdoc />
        </member>
        <member name="T:AIO.BinQueue`1">
            <summary>
            数据队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AIO.BinQueue`1.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.BinQueue`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AIO.BinQueue`1.Dispose">
            <summary>
            执行与释放或重置非托管资源关联的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:AIO.BinQueue`1.Deserialize(AIO.IReadData)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.BinQueue`1.Serialize(AIO.IWriteData)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.BinQueue`1.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:AIO.BinQueue`1.GetEnumerator">
            <summary>返回一个循环访问集合的枚举器。</summary>
            <returns>用于循环访问集合的枚举数。</returns>
        </member>
        <member name="M:AIO.BinQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>返回循环访问集合的枚举数。</summary>
            <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
            </returns>
        </member>
        <member name="M:AIO.BinQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
            <param name="array">
              一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
              <see cref="T:System.Array" /> 必须具有从零开始的索引。
            </param>
            <param name="index">
              <paramref name="array" /> 中从零开始的索引，从此处开始复制。
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> 为 <see langword="null" />。
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> 小于零。
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="array" /> 是多维的。
              - 或 -
              源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
              - 或 -
              无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。
            </exception>
        </member>
        <member name="P:AIO.BinQueue`1.System#Collections#ICollection#Count">
            <summary>
              获取 <see cref="T:System.Collections.ICollection" /> 中包含的元素数。
            </summary>
            <returns>
              <see cref="T:System.Collections.ICollection" /> 中包含的元素数。
            </returns>
        </member>
        <member name="P:AIO.BinQueue`1.SyncRoot">
            <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
            <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </returns>
        </member>
        <member name="P:AIO.BinQueue`1.IsSynchronized">
            <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
            <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
            </returns>
        </member>
        <member name="P:AIO.BinQueue`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
            <summary>获取集合中的元素数。</summary>
            <returns>集合中的元素数。</returns>
        </member>
        <member name="M:AIO.BinQueue`1.Clone">
            <inheritdoc />
        </member>
        <member name="T:AIO.BinSortedList`2">
            <summary>
            数据字典
            </summary>
            <typeparam name="TKey">Key泛型</typeparam>
            <typeparam name="TValue">Value泛型</typeparam>
        </member>
        <member name="P:AIO.BinSortedList`2.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.BinSortedList`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.BinSortedList`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Deserialize(AIO.IReadData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Serialize(AIO.IWriteData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Reset">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinSortedList`2.Count">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.Count" />
        </member>
        <member name="P:AIO.BinSortedList`2.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinSortedList`2.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinSortedList`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.ContainsKey(`0)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        </member>
        <member name="M:AIO.BinSortedList`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.TryGetValue(`0,`1@)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />
        </member>
        <member name="P:AIO.BinSortedList`2.Item(`0)">
            <inheritdoc cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
        </member>
        <member name="P:AIO.BinSortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinSortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinSortedList`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinSortedList`2.Values">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinSortedList`2.Clone">
            <inheritdoc />
        </member>
        <member name="T:AIO.BinStack`1">
            <summary>
            数据队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AIO.BinStack`1.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.BinStack`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AIO.BinStack`1.Dispose">
            <summary>
            执行与释放或重置非托管资源关联的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:AIO.BinStack`1.Deserialize(AIO.IReadData)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.BinStack`1.Serialize(AIO.IWriteData)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.BinStack`1.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:AIO.BinStack`1.GetEnumerator">
            <summary>返回一个循环访问集合的枚举器。</summary>
            <returns>用于循环访问集合的枚举数。</returns>
        </member>
        <member name="M:AIO.BinStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>返回循环访问集合的枚举数。</summary>
            <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
            </returns>
        </member>
        <member name="M:AIO.BinStack`1.CopyTo(System.Array,System.Int32)">
            <summary>
              从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
            <param name="array">
              一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。
              <see cref="T:System.Array" /> 必须具有从零开始的索引。
            </param>
            <param name="index">
              <paramref name="array" /> 中从零开始的索引，从此处开始复制。
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> 为 <see langword="null" />。
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> 小于零。
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="array" /> 是多维的。
              - 或 -
              源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。
              - 或 -
              无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。
            </exception>
        </member>
        <member name="P:AIO.BinStack`1.System#Collections#ICollection#Count">
            <summary>
              获取 <see cref="T:System.Collections.ICollection" /> 中包含的元素数。
            </summary>
            <returns>
              <see cref="T:System.Collections.ICollection" /> 中包含的元素数。
            </returns>
        </member>
        <member name="P:AIO.BinStack`1.SyncRoot">
            <summary>
              获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </summary>
            <returns>
              可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。
            </returns>
        </member>
        <member name="P:AIO.BinStack`1.IsSynchronized">
            <summary>
              获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。
            </summary>
            <returns>
              如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。
            </returns>
        </member>
        <member name="P:AIO.BinStack`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
            <summary>获取集合中的元素数。</summary>
            <returns>集合中的元素数。</returns>
        </member>
        <member name="M:AIO.BinStack`1.Clone">
            <inheritdoc />
        </member>
        <member name="T:AIO.Storage">
            <summary>
            数据存储
            </summary>
        </member>
        <member name="P:AIO.Storage.Buffer">
            <summary>
            字节数据
            </summary>
        </member>
        <member name="P:AIO.Storage.Data">
            <summary>
            数据有效长度 需要调动序列化 Serialize
            </summary>
        </member>
        <member name="M:AIO.Storage.#ctor">
            <summary>
            数据存储
            </summary>
        </member>
        <member name="M:AIO.Storage.Deserialize">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.Storage.Serialize">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.Storage.Dispose">
            <summary>
            执行与释放或重置非托管资源关联的应用程序定义的任务
            </summary>
        </member>
        <member name="M:AIO.Storage.OnDeserialize(AIO.IReadData)">
            <summary>
            反序列化
            </summary>
            <param name="buffer">读取接口 如果长度等于0则说明没有数据</param>
        </member>
        <member name="M:AIO.Storage.OnSerialize(AIO.IWriteData)">
            <summary>
            序列化
            </summary>
            <param name="buffer">存储接口</param>
        </member>
        <member name="M:AIO.Storage.OnReset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="M:AIO.Storage.Reset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="P:AIO.Storage.Count">
            <summary>
            数据有效长度 需要调动序列化 Serialize
            </summary>
        </member>
        <member name="M:AIO.Storage.AddBin(AIO.IBinData)">
            <summary>
            添加数据bin
            </summary>
        </member>
        <member name="M:AIO.Storage.ClearBin">
            <summary>
            清空数据Bin
            </summary>
        </member>
        <member name="M:AIO.Storage.ContainBin(AIO.IBinData)">
            <summary>
            判断是否存在数据
            </summary>
            <param name="item">数据</param>
            <returns>Ture存在 False不存在</returns>
        </member>
        <member name="M:AIO.Storage.IndexOfBin(AIO.IBinData)">
            <summary>
            获取当前数据的下标
            </summary>
        </member>
        <member name="M:AIO.Storage.InsertBin(System.Int32,AIO.IBinData)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.Storage.RemoveBin(AIO.IBinData)">
            <summary>
            移除指定数据
            </summary>
        </member>
        <member name="T:AIO.IBinData">
            <summary>
            数据序列化
            </summary>
        </member>
        <member name="T:AIO.BinHashSet`1">
            <summary>
            列表存储
            </summary>
        </member>
        <member name="P:AIO.BinHashSet`1.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.BinHashSet`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AIO.BinHashSet`1.Dispose">
            <summary>
            执行与释放或重置非托管资源关联的应用程序定义的任务
            </summary>
        </member>
        <member name="M:AIO.BinHashSet`1.Deserialize(AIO.IReadData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinHashSet`1.Serialize(AIO.IWriteData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinHashSet`1.GetEnumerator">
            <summary>返回一个循环访问集合的枚举器。</summary>
            <returns>用于循环访问集合的枚举数。</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>返回循环访问集合的枚举数。</summary>
            <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
            </returns>
        </member>
        <member name="M:AIO.BinHashSet`1.Add(`0)">
            <summary>
              将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。
            </summary>
            <param name="item">
              要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。
            </param>
            <exception cref="T:System.NotSupportedException">
              <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。
            </exception>
        </member>
        <member name="M:AIO.BinHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            对该集合进行与另一个IEnumerable (T)对象的并集运算；
            </summary>
            <param name="other">另一个集合</param>
        </member>
        <member name="M:AIO.BinHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            对该集合进行与另一个IEnumerable (T)对象的交集运算；
            </summary>
            <param name="other">另一个集合</param>
        </member>
        <member name="M:AIO.BinHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            将该集合中与其他集合重复的元素移除；
            </summary>
            <param name="other">另一个集合</param>
        </member>
        <member name="M:AIO.BinHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            将该集合变换成只包含在该集合或者另一个集合中而不同时属于两个集合的元素；
            </summary>
            <param name="other">另一个集合</param>
        </member>
        <member name="M:AIO.BinHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的子集；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的超集；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的真超集；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的真子集；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否与另一个集合存在共同的元素；
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否与另一个集合有完全相同的元素，且仅有这些元素。
            </summary>
            <param name="other">另一个集合</param>
            <returns>True:是 False:否</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.AIO#ISet{T}#Add(`0)">
            <summary>
            将ITEM添加到集合中，如果已存在，则返回false；
            </summary>
            <param name="item">要添加的元素</param>
            <returns>Ture:不存在 False:已存在</returns>
        </member>
        <member name="M:AIO.BinHashSet`1.Clear">
            <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。
            </summary>
            <exception cref="T:System.NotSupportedException">
              <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。
            </exception>
        </member>
        <member name="M:AIO.BinHashSet`1.Contains(`0)">
            <summary>
              确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。
            </summary>
            <param name="item">
              要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。
            </param>
            <returns>
              如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
        </member>
        <member name="M:AIO.BinHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
              从特定的 <see cref="T:System.Collections.Generic.ICollection`1" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。
            </summary>
            <param name="array">
              一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标。
              <see cref="T:System.Array" /> 必须具有从零开始的索引。
            </param>
            <param name="arrayIndex">
              <paramref name="array" /> 中从零开始的索引，从此处开始复制。
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> 为 <see langword="null" />。
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="arrayIndex" /> 小于 0。
            </exception>
            <exception cref="T:System.ArgumentException">
              源中的元素数目 <see cref="T:System.Collections.Generic.ICollection`1" /> 大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。
            </exception>
        </member>
        <member name="M:AIO.BinHashSet`1.Remove(`0)">
            <summary>
              从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。
            </summary>
            <param name="item">
              要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。
            </param>
            <returns>
              如果从 <see langword="true" /> 中成功移除 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
               如果在原始 <see langword="false" /> 中没有找到 <paramref name="item" />，该方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。
            </returns>
            <exception cref="T:System.NotSupportedException">
              <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。
            </exception>
        </member>
        <member name="P:AIO.BinHashSet`1.Count">
            <summary>
              获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。
            </summary>
            <returns>
              <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。
            </returns>
        </member>
        <member name="P:AIO.BinHashSet`1.IsReadOnly">
            <summary>
              获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。
            </summary>
            <returns>
              如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。
            </returns>
        </member>
        <member name="M:AIO.BinHashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
            </summary>
            <param name="info">
              要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
            </param>
            <param name="context">
              此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。
            </param>
            <exception cref="T:System.Security.SecurityException">
              调用方没有所要求的权限。
            </exception>
        </member>
        <member name="M:AIO.BinHashSet`1.OnDeserialization(System.Object)">
            <summary>在整个对象图形已经反序列化时运行。</summary>
            <param name="sender">
              启动回调的对象。
               当前未实现该参数的功能。
            </param>
        </member>
        <member name="M:AIO.BinHashSet`1.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:AIO.BinHashSet`1.Clone">
            <inheritdoc />
        </member>
        <member name="T:AIO.BinList`1">
            <summary>
            列表存储
            </summary>
        </member>
        <member name="P:AIO.BinList`1.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:AIO.BinList`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AIO.BinList`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Reset">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Deserialize(AIO.IReadData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Serialize(AIO.IWriteData)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinList`1.Count">
            <summary>
              获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。
            </summary>
            <returns>
              <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。
            </returns>
        </member>
        <member name="P:AIO.BinList`1.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinList`1.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:AIO.BinList`1.IsReadOnly">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
        </member>
        <member name="M:AIO.BinList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.BinList`1.RemoveAt(System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" />
        </member>
        <member name="P:AIO.BinList`1.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.Generic.IList`1.Item(System.Int32)" />
        </member>
        <member name="M:AIO.BinList`1.Clone">
            <inheritdoc />
        </member>
        <member name="T:AIO.StorageFile">
            <summary>
            数据文件
            </summary>
        </member>
        <member name="F:AIO.StorageFile.Path">
            <summary>
            保存读取路径
            </summary>
        </member>
        <member name="M:AIO.StorageFile.#ctor(System.String@)">
            <summary>
            数据存储
            </summary>
            <param name="path">存储读取路径</param>
        </member>
        <member name="M:AIO.StorageFile.Save">
            <summary>
            保存文件
            </summary>
        </member>
        <member name="M:AIO.StorageFile.Load">
            <summary>
            加载
            </summary>
        </member>
    </members>
</doc>

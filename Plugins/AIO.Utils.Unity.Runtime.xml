<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AIO.Utils.Unity.Runtime</name>
    </assembly>
    <members>
        <member name="T:UtilsEngine">
            <summary>
            工具类
            </summary>
        </member>
        <member name="T:UtilsEngine.ColorX">
            <summary>
            颜色工具类
            </summary>
        </member>
        <member name="M:UtilsEngine.ColorX.ColorToInt(UnityEngine.Color@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:UtilsEngine.ColorX.NewColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            颜色 R G B A
            </summary>
        </member>
        <member name="M:UtilsEngine.ColorX.IntToColor(System.UInt32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:UtilsEngine.ColorX.HexStringToColor(System.String,UnityEngine.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:UtilsEngine.ColorX.ColorToHexString(UnityEngine.Color)">
            <summary>
            
            </summary>
        </member>
        <member name="M:UtilsEngine.ColorX.ToHex(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            #FFFFFF 转换为 16进制
            </summary>
        </member>
        <member name="M:UtilsEngine.ColorX.ParseHtmlString(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:UtilsEngine.ColorX.HexToColor(System.String)">
            <summary>
            hex转换到color
            </summary>
        </member>
        <member name="T:UtilsEngine.GO">
            <summary>
            GameObject 工具
            </summary>
        </member>
        <member name="M:UtilsEngine.GO.TrulyEqual(UnityEngine.Object@,UnityEngine.Object@)">
            <summary>
            真正的相等
            </summary>
        </member>
        <member name="T:UtilsEngine.IO">
            <summary>
            Unity IO
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UtilsEngine.IO.FromAssets(System.String@)" -->
        <member name="M:UtilsEngine.IO.FromProject(System.String@)">
            <summary>
            将指定的项目路径转换为相对于项目根目录的相对路径。
            </summary>
            <param name="path">项目路径</param>
            <returns>相对于项目根目录的相对路径</returns>
        </member>
        <member name="M:UtilsEngine.IO.CreateParentDirectoryIfNeeded(System.String@)">
            <summary>
            如果不存在指定文件路径的父目录，则创建它。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:UtilsEngine.IO.CreateDirectoryIfNeeded(System.String@)">
            <summary>
            如果不存在指定的目录，则创建它。
            </summary>
            <param name="path">目录路径</param>
        </member>
        <member name="M:UtilsEngine.IO.DeleteDirectoryIfExists(System.String@)">
            <summary>
            如果存在指定的目录，则删除它及其关联的“.meta”文件。
            </summary>
            <param name="path">目录路径</param>
        </member>
        <member name="M:UtilsEngine.IO.MakeSafeFilename(System.String,System.Char@)">
            <summary>
            用指定的替换字符替换文件名中的任何无效字符。该方法使用Path.GetInvalidFileNameChars()方法检索被视为文件名不允许字符的字符数组。
            </summary>
            <param name="filename">要转换的文件名</param>
            <param name="replace">要替换无效字符的字符</param>
            <returns>已转换的文件名</returns>
        </member>
        <member name="M:UtilsEngine.IO.GetFilesRelativeAsset(System.String,System.String@,System.IO.SearchOption@)">
            <summary>
            获取资源文件夹下
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">查找模式</param>
            <returns>以Assets路径为节点的路径数组</returns>
        </member>
        <member name="M:UtilsEngine.IO.GetFilesRelativeAsset(System.String,System.Func{System.IO.FileInfo,System.Boolean}@,System.String@,System.IO.SearchOption@)">
            <summary>
            获取资源文件夹下
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">查找模式</param>
            <returns>以Assets路径为节点的路径数组</returns>
        </member>
        <member name="M:UtilsEngine.IO.GetFilesRelativeAssetNoMeta(System.String,System.Func{System.IO.FileInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取资源文件夹下 屏蔽meta文件
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">查找模式</param>
            <returns>以Assets路径为节点的路径数组</returns>
        </member>
        <member name="M:UtilsEngine.IO.GetFilesRelativeAssetNoMeta(System.String,System.String@,System.IO.SearchOption@)">
            <summary>
            获取资源文件夹下 屏蔽meta文件
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">查找模式</param>
            <returns>以Assets路径为节点的路径数组</returns>
        </member>
        <member name="T:UtilsEngine.Platform">
            <summary>
            平台工具类
            </summary>
        </member>
        <member name="F:UtilsEngine.Platform.supportsJit">
            <summary>
            支持jit
            </summary>
        </member>
        <member name="F:UtilsEngine.Pool.Cache">
            <summary>
            缓存列表
            </summary>
        </member>
        <member name="T:UtilsEngine.Prefs">
            <summary>
            持久化数据
            </summary>
        </member>
        <member name="T:UtilsEngine.ProfilerX">
            <summary>
            分析器
            </summary>
        </member>
        <member name="M:UtilsEngine.ProfilerX.GetMemoryObject``1(``0)">
            <summary>
            获取当前数据 在Unity内部声明内存
            </summary>
            <param name="obj">数据</param>
            <returns>占用内存</returns>
        </member>
        <member name="T:UtilsEngine.SystemInfoX">
            <summary>
            设备信息 Unity API 2019_or_new
            </summary>
            <summary>
            设备信息 Unity API
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsTessellationShaders">
            <summary>
            是否支持镶嵌着色器
            Are tessellation shaders supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsRayTracing">
            <summary>
            检查当前配置是否支持射线跟踪。
            Checks if ray tracing is supported by the current configuration.
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsMipMaxLevel">
            <summary>
            是否 Mip达到最高等级
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.MaxComputeBufferInputsCompute">
            <summary>
            确定Unity在一个计算着色器中同时支持多少计算缓冲读取
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.MaxComputeBufferInputsDomain">
            <summary>
            确定Unity在一个域着色器中同时支持多少计算缓冲读取
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.MaxComputeBufferInputsFragment">
            <summary>
            确定Unity在碎片着色器中同时支持多少计算缓冲读取
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.MaxComputeBufferInputsGeometry">
            <summary>
            确定Unity在一个几何着色器中同时支持多少计算缓冲读取。
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.MaxComputeBufferInputsHull">
            <summary>
            确定Unity在一个赫尔着色器中同时支持多少计算缓冲读取。
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.MaxComputeBufferInputsVertex">
            <summary>
            确定Unity在一个顶点着色器中同时支持多少计算缓冲读取。
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.MaxComputeWorkGroupSize">
            <summary>
            在单个本地工作组中可以分派到计算着色器的最大调用总数
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.MaxComputeWorkGroupSizeX">
            <summary>
            在X维度中，计算着色器可以使用的最大工作组数
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.MaxComputeWorkGroupSizeY">
            <summary>
            在Y维度中，计算着色器可以使用的最大工作组数
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.MaxComputeWorkGroupSizeZ">
            <summary>
            在Z维度中，计算着色器可以使用的最大工作组数
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.MaxCubemapSize">
            <summary>
            最大立方地图纹理大小
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.MaxTextureSize">
            <summary>
            最大的纹理尺寸
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsMinConstantBufferOffsetAlignment">
            <summary>
            是否 使用Shader绑定常量缓冲区时的最小缓冲区偏移量(以字节为单位)。 SetConstantBuffer或Material.SetConstantBuffer。
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsVertexAttributeFormat(UnityEngine.Rendering.VertexAttributeFormat,System.Int32)">
            <summary>
            指示此设备是否支持给定的顶点属性格式和维度组合。
            Indicates whether the given combination of a vertex attribute format and dimension is supported on this device.
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsUsesLoadStoreActions">
            <summary>
            如果图形API考虑了RenderBufferLoadAction和RenderBufferStoreAction，则为True，否则为false。
            True if the Graphics API takes RenderBufferLoadAction and RenderBufferStoreAction into account, false if otherwise.
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetCompatibleFormat(UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.Experimental.Rendering.FormatUsage)">
            <summary>
            获取兼容的图像格式
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetGraphicsFormat(UnityEngine.Experimental.Rendering.DefaultFormat)">
            <summary>
            获取图形格式
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsFormatSupported(UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.Experimental.Rendering.FormatUsage)">
            <summary>
            是否 支持指定格式
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetRenderingThreadingMode">
            <summary>
            应用程序的实际渲染线程模式
            Application's actual rendering threading mode
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetSupportedRandomWriteTargetCount">
            <summary>
            Unity同时支持的随机写目标(UAV)的最大数量。
            The maximum number of random write targets (UAV) that Unity supports simultaneously.
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsGeometryShaders">
            <summary>
            是否支持几何着色
            Are geometry shaders supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsGraphicsFence">
            <summary>
            当平台支持GraphicsFences时返回true，否则返回false。
            Returns true when the platform supports GraphicsFences, and false if otherwise.
            </summary>
        </member>
        <member name="F:UtilsEngine.SystemInfoX.UnsupportedIdentifier">
            <summary>
            SystemInfo字符串属性返回的值，该属性在当前平台上不受支持。
            Value returned by SystemInfo string properties which are not supported on the current platform.
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetBatteryStatus">
            <summary>
            获取设备电池状态
            </summary>
            <!--
            Unknown     : 如果电池状态不可用 无法确定设备的电池状态。
            Charging    : 设备已插入并正在充电。
            Discharging : 设备被拔出并正在放电。
            NotCharging : 设备已插入，但未充电。
            Full        : 设备已插入，电池已满。
            -->
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetTextureSupport">
            <summary>
            支持多种复制纹理功能的情况。
            </summary>
            <!--
            None           : No support for Graphics.CopyTexture.                                    : 不支持Graphics.CopyTexture。
            Basic          : Basic Graphics.CopyTexture support.                                    : 基本图形CopyTexture支持
            Copy3D         : Support for Texture3D in Graphics.CopyTexture.                         : 在Graphics.CopyTexture中支持Texture3D
            DifferentTypes : Support for Graphics.CopyTexture between different texture types.      : 支持图形 不同纹理类型之间的CopyTexture
            TextureToRT    : Support for Texture to RenderTexture copies in Graphics.CopyTexture.   : 在Graphics.CopyTexture中支持纹理到渲染纹理副本。
            RTToTexture    : Support for RenderTexture to Texture copies in Graphics.CopyTexture.   : 在Graphics.CopyTexture中支持渲染纹理到纹理拷贝。
            -->
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetDeviceModel">
            <summary>
            获取设备模型
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetDeviceName">
            <summary>
            获取用户设备自定义名称
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetDeviceType">
            <summary>
            返回程序运行所在的设备类型 PC电脑、掌上型等
            </summary>
            <!--
             Unknown = 0  : Device type is unknown.You should never see this in practice. : 设备类型未知。 你不应该在实践中看到这种情况
             Handheld = 1 : A handheld device like mobile phone or a tablet.              : 像移动电话或平板电脑这样的手持设备。
             Console = 2  : A stationary gaming console.                                  : 一个固定的游戏机。
             Desktop = 3  : Desktop or laptop computer.                                   : 台式或笔记本电脑。
            -->
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetDeviceUniqueIdentifier">
            <summary>
            设备的唯一标识符。每一台设备都有唯一的标识符。
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetGraphicsDeviceID">
            <summary>
            获取图形设备ID 显卡的唯一标识符ID。
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetGraphicsDeviceName">
            <summary>
            显卡的名称
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetGraphicsDeviceType">
            <summary>
            图形设备类型 显卡的类型
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetGraphicsDeviceVendor">
            <summary>
            图形设备供应商 显卡的供应商
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetGraphicsDeviceVendorID">
            <summary>
            设备厂商ID 显卡供应商的唯一识别码ID
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetGraphicsDeviceVersion">
            <summary>
            图形设备版本 显卡的类型和版本
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetGraphicsMemorySize">
            <summary>
            图形内存大小 显存大小
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsGraphicsMultiThreaded">
            <summary>
            是否支持多线程渲染
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetGraphicsShaderLevel">
            <summary>
            图形着色器水平 显卡着色器的级别。
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsGraphicsUVStartsAtTop">
            <summary>
            图形UV是否从顶部开始
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsDynamicUniformArrayIndexingInFragmentShaders">
            <summary>
            是否 在碎片着色器中 有动态统一数组索引
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsHiddenSurfaceRemovalOnGPU">
            <summary>
            是否 GPU上有隐藏表面去除
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetNpotSupport">
            <summary>
            GPU提供了什么NPOT(两种尺寸的非电源)纹理支持
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetOperatingSystem">
            <summary>
            返回运行游戏的操作系统家族
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetOperatingSystemFamily">
            <summary>
            返回运行游戏的操作系统家族
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetProcessorCount">
            <summary>
            处理器存在的数量
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetProcessorFrequency">
            <summary>
            处理器频率(MHz)
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetProcessorType">
            <summary>
            处理器的名字
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.operatingSystemFamily">
            <summary>
            返回运行游戏的操作系统系列
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetSupportedRenderTargetCount">
            <summary>
            支持多少同时呈现目标(mrt)
            How many simultaneous render targets (MRTs) are supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupports2DArrayTextures">
            <summary>
            是否支持2D数组纹理
            Are 2D Array textures supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupports32bitsIndexBuffer">
            <summary>
            是否支持32位索引缓冲区
            Are 32-bit index buffers supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupports3DRenderTextures">
            <summary>
            是否支持3D(体积)渲染纹理
            Are 3D (volume) RenderTextures supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupports3DTextures">
            <summary>
            是否支持3D(体积)纹理
            Are 3D (volume) textures supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsAccelerometer">
            <summary>
            是否设备上有加速度计
            Is an accelerometer available on the device
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsAsyncCompute">
            <summary>
            当平台支持异步计算队列时返回true，否则返回false。
            Returns true when the platform supports asynchronous compute queues and false if otherwise.
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsAsyncGPUReadback">
            <summary>
            如果此设备可以异步读回GPU数据，则返回true，否则返回false。
            Returns true if asynchronous readback of GPU data is available for this device and false otherwise.
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsAudio">
            <summary>
            是否有音频设备可用于回放
            Is there an Audio device available for playback
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsBlendingOnRenderTextureFormat(UnityEngine.RenderTextureFormat)">
            <summary>
            渲染纹理格式是否支持混合
            Is blending supported on render texture format
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsComputeShaders">
            <summary>
            是否支持计算着色器
            Are compute shaders supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsCubemapArrayTextures">
            <summary>
            是否支持Cubemap数组纹理
            Are Cubemap Array textures supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsGyroscope">
            <summary>
            是否设备上有陀螺仪
            Is a gyroscope available on the device
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsHardwareQuadTopology">
            <summary>
            是否硬件是否支持四元拓扑
            Does the hardware support quad topology
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsInstancing">
            <summary>
            是否支持GPU绘制调用实例化
            Is GPU draw call instancing supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsLocationService">
            <summary>
            设备是否能够报告其位置
            Is the device capable of reporting its location
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsMipStreaming">
            <summary>
            是否支持纹理mip贴图流
            Is streaming of texture mip maps supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsMotionVectors">
            <summary>
            该平台是否支持运动向量。
            Whether motion vectors are supported on this platform.
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsMultisampleAutoResolve">
            <summary>
            如果多重采样纹理被自动解析，则返回true
            Returns true if multisampled textures are resolved automatically
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetSsupportsMultisampledTextures">
            <summary>
            是否支持多采样纹理
            Are multisampled textures supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsRawShadowDepthSampling">
            <summary>
            是否支持从阴影贴图中采样原始深度
            Is sampling raw depth from shadowmaps supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsRenderTextureFormat(UnityEngine.RenderTextureFormat)">
            <summary>
            是否支持渲染纹理格式
            Is render texture format supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsSeparatedRenderTargetsBlend">
            <summary>
            当平台在渲染多个渲染目标时支持不同的混合模式时返回true，否则返回false。
            Returns true when the platform supports different blend modes when rendering to multiple render targets, or false otherwise.
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsShadows">
            <summary>
            是否支持内置阴影
            Are built-in shadows supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsSparseTextures">
            <summary>
            是否支持稀疏纹理
            Are sparse textures supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsTextureFormat(UnityEngine.TextureFormat)">
            <summary>
            这个设备是否支持纹理格式
            Is texture format supported on this device
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetSupportsTextureWrapMirrorOnce">
            <summary>
            如果支持“Mirror Once”纹理缠绕模式，返回true
            Returns true if the 'Mirror Once' texture wrap mode is supported
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsSupportsVibration">
            <summary>
            设备是否能够通过振动向用户提供触觉反馈
            Is the device capable of providing the user haptic feedback by vibration
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.GetSystemMemorySize">
            <summary>
            当前系统内存的数量
            Amount of system memory present
            </summary>
        </member>
        <member name="M:UtilsEngine.SystemInfoX.IsUsesReversedZBuffer">
            <summary>
            如果当前平台使用了反向深度缓冲区(近平面的值范围为1，远平面的值范围为0)，则该属性为true，如果深度缓冲区为normal(0为near, 1为far)，则为false。
            This property is true if the current platform uses a reversed depth buffer (where values range from 1 at the near plane and 0 at far plane), and false if the depth buffer is normal (0 is near, 1 is far).
            </summary>
        </member>
        <member name="T:UtilsEngine.MathX">
            <summary>
            Unity 计算
            </summary>
        </member>
        <member name="M:UtilsEngine.MathX.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary> 
            两点距离
            </summary>
        </member>
        <member name="M:UtilsEngine.MathX.IsRect(UnityEngine.Rect@,UnityEngine.Rect@)">
            <summary> 
            矩形相交
            </summary>
        </member>
        <member name="T:UtilsEngine.ThreadX">
            <summary>
            提供在特定线程上下文（SynchronizationContext）中异步执行回调函数或操作的静态方法。
            </summary>
        </member>
        <member name="F:UtilsEngine.ThreadX.syncContext">
            <summary>
            当前线程的同步上下文。
            </summary>
        </member>
        <member name="M:UtilsEngine.ThreadX.SyncPost(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            将传入的回调函数和状态对象封装成一个操作，并通过同步上下文的 Post 方法异步执行。
            </summary>
            <param name="d">要执行的回调函数。</param>
            <param name="state">传递给回调函数的状态对象。</param>
        </member>
        <member name="M:UtilsEngine.ThreadX.SyncPost(System.Action)">
            <summary>
            将传入的 Action 对象封装成一个操作，并在执行时捕获异常进行处理后，通过同步上下文的 Post 方法异步执行。
            </summary>
            <param name="act">要执行的 Action 对象。</param>
        </member>
        <member name="M:UtilsEngine.ThreadX.SynchronizationPost(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            将传入的回调函数和状态对象封装成一个操作，并通过 SyncPost 方法异步执行，实际上就是 SyncPost 方法的一个别名。
            </summary>
            <param name="d">要执行的回调函数。</param>
            <param name="state">传递给回调函数的状态对象。</param>
        </member>
        <member name="M:UtilsEngine.ThreadX.SynchronizationPost(System.Action)">
            <summary>
            将传入的 Action 对象封装成一个操作，并通过 SyncPost 方法异步执行，实际上也是 SyncPost 方法的一个别名。
            </summary>
            <param name="act">要执行的 Action 对象。</param>
        </member>
        <member name="T:UtilsEngine.Paths">
            <summary>
            提供了一些与路径相关的实用方法。
            包含与程序集有关的实用方法和属性的静态类
            </summary>
        </member>
        <member name="P:UtilsEngine.Paths.Assets">
            <summary>
            获取当前项目 Assets 文件夹的完整路径。
            </summary>
        </member>
        <member name="P:UtilsEngine.Paths.StreamingAssetsPath">
            <summary>
            获取当前项目 Streaming Assets 文件夹的完整路径。
            </summary>
        </member>
        <member name="P:UtilsEngine.Paths.PersistentDataPath">
            <summary>
            获取当前项目 Persistent Assets 文件夹的完整路径。
            </summary>
        </member>
        <member name="P:UtilsEngine.Paths.Project">
            <summary>
            获取当前项目所在文件夹的完整路径。
            </summary>
        </member>
        <member name="T:AIO.Unity.RuntimePlatformExtend">
            <summary>
            扩展
            </summary>
        </member>
        <member name="M:AIO.Unity.RuntimePlatformExtend.IsEditor(UnityEngine.RuntimePlatform)">
            <summary>
            是否为编辑器
            </summary>
        </member>
        <member name="M:AIO.Unity.RuntimePlatformExtend.IsAndroid(UnityEngine.RuntimePlatform)">
            <summary>
            是否为安卓平台
            </summary>
        </member>
        <member name="M:AIO.Unity.RuntimePlatformExtend.IsIOS(UnityEngine.RuntimePlatform)">
            <summary>
            是否为安卓平台
            </summary>
        </member>
        <member name="M:AIO.Unity.RuntimePlatformExtend.IsWebGL(UnityEngine.RuntimePlatform)">
            <summary>
            是否为安卓平台
            </summary>
        </member>
        <member name="M:AIO.Unity.RuntimePlatformExtend.IsStandalone(UnityEngine.RuntimePlatform)">
            <summary>
            是否为独立平台
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer._availableConverters">
            <summary>
            Converters that can be used for type registration.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer._availableDirectConverters">
            <summary>
            Direct converters (optimized _converters). We use these so we don't
            have to perform a scan through every item in _converters and can
            instead just do an O(1) lookup. This is potentially important to perf
            when there are a ton of direct converters.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer._processors">
            <summary>
            Processors that are available.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer._references">
            <summary>
            Reference manager for cycle detection.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer._abstractTypeRemap">
            <summary>
            Allow the user to provide default storage types for interfaces and abstract
            classes. For example, a model could have IList{int} as a parameter, but the
            serialization data does not specify a List{int} type. A IList{} -> List{}
            remapping will cause List{} to be used as the default storage type. see
            https://github.com/jacobdufault/fullserializer/issues/120 for additional
            context.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer._cachedConverterTypeInstances">
            <summary>
            Converter type to converter instance lookup table. This
            could likely be stored inside
            from serialized type to converter.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer._cachedConverters">
            <summary>
            A cache from type to it's converter.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer._cachedProcessors">
            <summary>
            A cache from type to the set of processors that are interested in it.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer.Context">
            <summary>
            A context object that fsConverters can use to customize how they
            operate.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer.Config">
            <summary>
            Configuration options. Also see fsGlobalConfig.
            </summary>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.AddProcessor(AIO.fsObjectProcessor)">
            <summary>
            Add a new processor to the serializer. Multiple processors can run at
            the same time in the same order they were added in.
            </summary>
            <param name="processor">The processor to add.</param>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.RemoveProcessor``1">
            <summary>
            Remove all processors which derive from TProcessor.
            </summary>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.SetDefaultStorageType(System.Type,System.Type)">
            <summary>
            Provide a default storage type for the given abstract or interface type. If
            a type is deserialized which contains an interface/abstract field type and a
            mapping is provided, the mapped type will be used by default. For example,
            IList{T} => List{T} or IDictionary{TKey, TValue} => Dictionary{TKey, TValue}.
            </summary>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.GetProcessors(System.Type)">
            <summary>
            Fetches all of the processors for the given type.
            </summary>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.AddConverter(AIO.fsBaseConverter)">
            <summary>
            Adds a new converter that can be used to customize how an object is
            serialized and deserialized.
            </summary>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.GetConverter(System.Type,System.Type)">
            <summary>
            Fetches a converter that can serialize/deserialize the given type.
            </summary>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.TrySerialize``1(``0,AIO.fsData@)">
            <summary>
            Helper method that simply forwards the call to
            TrySerialize(typeof(T), instance, out data);
            </summary>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.TryDeserialize``1(AIO.fsData,``0@)">
            <summary>
            Generic wrapper around TryDeserialize that simply forwards the call.
            </summary>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.TrySerialize(System.Type,System.Object,AIO.fsData@)">
            <summary>
            Serialize the given value.
            </summary>
            <param name="storageType">
            The type of field/property that stores the object instance. This is
            important particularly for inheritance, as a field storing an
            IInterface instance should have type information included.
            </param>
            <param name="instance">
            The actual object instance to serialize.
            </param>
            <param name="data">The serialized state of the object.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.TrySerialize(System.Type,System.Type,System.Object,AIO.fsData@)">
            <summary>
            Serialize the given value.
            </summary>
            <param name="storageType">
            The type of field/property that stores the object instance. This is
            important particularly for inheritance, as a field storing an
            IInterface instance should have type information included.
            </param>
            <param name="overrideConverterType">
            An fsBaseConverter derived type that will be used to serialize the
            object instead of the converter found via the normal discovery
            mechanisms.
            </param>
            <param name="instance">
            The actual object instance to serialize.
            </param>
            <param name="data">The serialized state of the object.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.TryDeserialize(AIO.fsData,System.Type,System.Object@)">
            <summary>
            Attempts to deserialize a value from a serialized state.
            </summary>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.TryDeserialize(AIO.fsData,System.Type,System.Type,System.Object@)">
            <summary>
            Attempts to deserialize a value from a serialized state.
            </summary>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.EnsureDictionary(AIO.fsData)">
            <summary>
            Ensures that the data is a dictionary. If it is not, then it is
            wrapped inside of one.
            </summary>
        </member>
        <member name="T:AIO.Unity.UnityFSSerializer.fsLazyCycleDefinitionWriter">
            <summary>
            This manages instance writing so that we do not write unnecessary $id
            fields. We only need to write out an $id field when there is a
            corresponding $ref field. This is able to write $id references lazily
            because the fsData instance is not actually written out to text until
            we have entirely finished serializing it.
            </summary>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.IsReservedKeyword(System.String)">
            <summary>
            Returns true if the given key is a special keyword that full
            serializer uses to add additional metadata on top of the emitted
            JSON.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer.Key_ObjectReference">
            <summary>
            This is an object reference in part of a cyclic graph.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer.Key_ObjectDefinition">
            <summary>
            This is an object definition, as part of a cyclic graph.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer.Key_InstanceType">
            <summary>
            This specifies the actual type of an object (the instance type was
            different from the field type).
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer.Key_Version">
            <summary>
            The version string for the serialized data.
            </summary>
        </member>
        <member name="F:AIO.Unity.UnityFSSerializer.Key_Content">
            <summary>
            If we have to add metadata but the original serialized state was not
            a dictionary, then this will contain the original data.
            </summary>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.StripDeserializationMetadata(AIO.fsData@)">
            <summary>
            Strips all deserialization metadata from the object, like $type and
            $content fields.
            </summary>
            <remarks>
            After making this call, you will *not* be able to deserialize the
            same object instance. The metadata is strictly necessary for
            deserialization!
            </remarks>
        </member>
        <member name="M:AIO.Unity.UnityFSSerializer.ConvertLegacyData(AIO.fsData@)">
            <summary>
            This function converts legacy serialization data into the new format,
            so that the import process can be unified and ignore the old format.
            </summary>
        </member>
        <member name="T:AIO.Unity.ScriptableBasics">
            <summary>
            Unity 可持续化数据
            </summary>
        </member>
        <member name="P:AIO.Unity.ScriptableBasics.Data">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableBasics.Awake">
            <summary>
            此函数在脚本启动时调用
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableBasics.OnEnable">
            <summary>
            当对象已启用并处于活动状态时调用此函数
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableBasics.OnDestroy">
            <summary>
            要销毁对象时调用此函数
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableBasics.OnDisable">
            <summary>
            对象变为禁用或非活跃状态时调用此函数
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableBasics.Reset">
            <summary>
            重置为默认值。
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableBasics.OnValidate">
            <summary>
            当该脚本被加载或检视面板的值被修改时调用此函数(仅在编辑器中调用）
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableBasics.Deserialize">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableBasics.Serialize">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableBasics.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:AIO.Unity.ScriptableHashSet`1">
            <summary>
            可持久化 列表数据
            </summary>
            <typeparam name="V">Value类型</typeparam>
        </member>
        <member name="F:AIO.Unity.ScriptableHashSet`1.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="P:AIO.Unity.ScriptableHashSet`1.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:AIO.Unity.ScriptableHashSet`1.IsReadOnly">
            <summary>
            是否为只读
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableHashSet`1.Add(`0)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableHashSet`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableHashSet`1.Contains(`0)">
            <summary>
            存在
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableHashSet`1.GetEnumerator">
            <summary>
            集合迭代器
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableHashSet`1.Remove(`0)">
            <summary>
            移除
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableHashSet`1.OnDeserialize">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableHashSet`1.OnSerialize">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableHashSet`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:AIO.Unity.ScriptableData">
            <summary>
            Unity 可持续化数据 
            保存为二进制数据
            只保存数据 需要需要编辑重写 
            请使用Editor重写
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableData.Awake">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableData.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableData.OnValidate">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableData.OnDisable">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableData.OnEnable">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableData.Reset">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableData.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableData.Deserialize">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableData.Serialize">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableData.OnDeserialize">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableData.OnSerialize">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableData.ToSerialize(AIO.IWrite)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableData.ToDeserialize(AIO.IRead)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableData.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:AIO.Unity.ScriptableDictionary`2">
            <summary>
            可持久化 字典数据
            </summary>
            <typeparam name="K">Key类型</typeparam>
            <typeparam name="V">Value类型</typeparam>
        </member>
        <member name="F:AIO.Unity.ScriptableDictionary`2.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="P:AIO.Unity.ScriptableDictionary`2.Count">
            <summary>
            大小
            </summary>
        </member>
        <member name="P:AIO.Unity.ScriptableDictionary`2.IsReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="P:AIO.Unity.ScriptableDictionary`2.Item(`0)">
            <summary>
            获取Value值
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.Add(`0,`1)">
            <summary>
            添加值
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            添加值
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            判断值是否存在
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.ContainsKey(`0)">
            <summary>
            判断值是否存在
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.ContainsValue(`1)">
            <summary>
            判断值是否存在
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            复制值
            </summary>
            <param name="array">目标数组</param>
            <param name="arrayIndex">目标数组开始下标</param>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            移除数据
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.Remove(`0)">
            <summary>
            移除数据
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            尝试获取值
            </summary>
            <param name="key">键值</param>
            <param name="value">返回值</param>
            <returns>是否成功获取</returns>
        </member>
        <member name="P:AIO.Unity.ScriptableDictionary`2.Keys">
            <summary>
            键集合
            </summary>
        </member>
        <member name="P:AIO.Unity.ScriptableDictionary`2.Values">
            <summary>
            值集合
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.OnDeserialize">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.OnSerialize">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableDictionary`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:AIO.Unity.ScriptableList`1">
            <summary>
            可持久化 列表数据
            </summary>
            <typeparam name="V">Value类型</typeparam>
        </member>
        <member name="F:AIO.Unity.ScriptableList`1.Collection">
            <summary>
            集合
            </summary>
        </member>
        <member name="P:AIO.Unity.ScriptableList`1.Item(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="index">下标</param>
            <returns></returns>
        </member>
        <member name="P:AIO.Unity.ScriptableList`1.Count">
            <summary>
            集合数量
            </summary>
        </member>
        <member name="P:AIO.Unity.ScriptableList`1.IsReadOnly">
            <summary>
            是否为只读
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableList`1.Add(`0)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableList`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableList`1.Contains(`0)">
            <summary>
            判断存在
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制到新数组
            </summary>
            <param name="array">目标数组</param>
            <param name="arrayIndex">目标数组下标</param>
        </member>
        <member name="M:AIO.Unity.ScriptableList`1.GetEnumerator">
            <summary>
            获取泛型迭代器
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableList`1.IndexOf(`0)">
            <summary>
            判断元素存在下标 值为-1 未找到
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableList`1.Insert(System.Int32,`0)">
            <summary>
            插入
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableList`1.Remove(`0)">
            <summary>
            移除
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableList`1.RemoveAt(System.Int32)">
            <summary>
            移除指定下标元素
            </summary>
        </member>
        <member name="M:AIO.Unity.ScriptableList`1.OnDeserialize">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableList`1.OnSerialize">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.ScriptableList`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:AIO.Unity.ISerializationDependency">
            <inheritdoc/>
        </member>
        <member name="T:AIO.Unity.ISerializationDepender">
            <inheritdoc/>
        </member>
        <member name="P:AIO.Unity.ISerializationDepender.DeserializationDependencies">
            <summary>
            依赖集合
            </summary>
        </member>
        <member name="M:AIO.Unity.ISerializationDepender.OnAfterDependenciesDeserialized">
            <summary>
            在依赖反序列化之后
            </summary>
        </member>
        <member name="T:AIO.Unity.Serialization">
            <summary>
            序列化
            </summary>
        </member>
        <member name="F:AIO.Unity.Serialization.ConstructorWarning">
            <summary>
            构造函数警告
            </summary>
        </member>
        <member name="P:AIO.Unity.Serialization.isUnitySerializing">
            <summary>
            Unity序列化
            </summary>
        </member>
        <member name="P:AIO.Unity.Serialization.isCustomSerializing">
            <summary>
            自定义序列化
            </summary>
        </member>
        <member name="P:AIO.Unity.Serialization.isSerializing">
            <summary>
            是否序列化
            </summary>
        </member>
        <member name="M:AIO.Unity.Serialization.CloneViaSerialization``1(``0,System.Boolean@)">
            <summary>
            复制序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.Unity.Serialization.CloneViaSerializationInto``2(``0,``1@,System.Boolean@)">
            <summary>
            复制序列化
            </summary>
        </member>
        <member name="M:AIO.Unity.Serialization.PrettyPrint(System.String@)">
            <summary>
            美化打印
            </summary>
        </member>
        <member name="M:AIO.Unity.Serialization.AwaitDependencies(AIO.Unity.ISerializationDepender@)">
            <summary>
            等待依赖关系
            </summary>
        </member>
        <member name="M:AIO.Unity.Serialization.NotifyDependencyDeserializing(AIO.Unity.ISerializationDependency@)">
            <summary>
            通知依赖项反序列化
            </summary>
        </member>
        <member name="M:AIO.Unity.Serialization.NotifyDependencyDeserialized(AIO.Unity.ISerializationDependency@)">
            <summary>
            通知依赖项反序列化
            </summary>
        </member>
        <member name="M:AIO.Unity.Serialization.NotifyDependencyUnavailable(AIO.Unity.ISerializationDependency@)">
            <summary>
            通知依赖项不可用
            </summary>
        </member>
        <member name="M:AIO.Unity.Serialization.NotifyDependencyAvailable(AIO.Unity.ISerializationDependency@)">
            <summary>
            通知依赖项可用
            </summary>
        </member>
        <member name="M:AIO.Unity.Serialization.LogStuckDependers">
            <summary>
            日志
            </summary>
        </member>
        <member name="T:AIO.Unity.SerializationOperation">
            <summary>
            序列化可选参数
            </summary>
        </member>
        <member name="M:AIO.Unity.SerializationOperation.#ctor">
            <summary>
            序列化可选参数
            </summary>
        </member>
        <member name="P:AIO.Unity.SerializationOperation.serializer">
            <summary>
            序列化
            </summary>
        </member>
        <member name="P:AIO.Unity.SerializationOperation.objectReferences">
            <summary>
            引用对象列表
            </summary>
        </member>
        <member name="M:AIO.Unity.SerializationOperation.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="T:AIO.Unity.Ray2DConverter">
            <summary>
             A ray in 2D space.
            </summary>
        </member>
        <member name="M:AIO.Unity.Ray2DConverter.DoSerialize(UnityEngine.Ray2D@,System.Collections.Generic.IDictionary{System.String,AIO.fsData}@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.Ray2DConverter.DoDeserialize(System.Collections.Generic.IDictionary{System.String,AIO.fsData}@,UnityEngine.Ray2D@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.Ray2DConverter.CreateInstance(AIO.fsData@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="T:AIO.Unity.RayConverter">
            <summary>
            Ray 转换器
            </summary>
        </member>
        <member name="M:AIO.Unity.RayConverter.DoDeserialize(System.Collections.Generic.IDictionary{System.String,AIO.fsData}@,UnityEngine.Ray@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.RayConverter.CreateInstance(AIO.fsData@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="T:AIO.Unity.UnityObjectConverter">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.UnityObjectConverter.CanProcess(System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.UnityObjectConverter.RequestCycleSupport(System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.UnityObjectConverter.RequestInheritanceSupport(System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.UnityObjectConverter.TrySerialize(System.Object@,AIO.fsData@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.UnityObjectConverter.TryDeserialize(AIO.fsData@,System.Object@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Unity.UnityObjectConverter.CreateInstance(AIO.fsData@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="T:AIO.Unity.ProfiledSegment">
            <summary>
            调试片段
            </summary>
        </member>
        <member name="M:AIO.Unity.ProfiledSegment.#ctor(AIO.Unity.ProfiledSegment@,System.String@)">
            <summary>
            初始化
            </summary>
            <param name="parent">父节点片段</param>
            <param name="name">名称</param>
        </member>
        <member name="P:AIO.Unity.ProfiledSegment.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:AIO.Unity.ProfiledSegment.Stopwatch">
            <summary>
            精度计时器
            </summary>
        </member>
        <member name="P:AIO.Unity.ProfiledSegment.Calls">
            <summary>
            调用次数
            </summary>
        </member>
        <member name="P:AIO.Unity.ProfiledSegment.Parent">
            <summary>
            父片段
            </summary>
        </member>
        <member name="P:AIO.Unity.ProfiledSegment.Children">
            <summary>
            子片段集合
            </summary>
        </member>
        <member name="T:AIO.Unity.ProfiledSegmentCollection">
            <summary>
            调试判断集合
            </summary>
        </member>
        <member name="M:AIO.Unity.ProfiledSegmentCollection.GetKeyForItem(AIO.Unity.ProfiledSegment)">
            <summary>
            在派生类中实现时，将从指定元素提取键。
            </summary>
        </member>
        <member name="T:AIO.Unity.ProfilingScope">
            <summary>
            调试区域
            </summary>
        </member>
        <member name="M:AIO.Unity.ProfilingScope.#ctor(System.String@)">
            <summary>
            创建
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:AIO.Unity.ProfilingScope.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:AIO.Unity.ProfilingUtils">
            <summary>
            调试工具类
            </summary>
        </member>
        <member name="F:AIO.Unity.ProfilingUtils.lock">
            <summary>
            锁
            </summary>
        </member>
        <member name="P:AIO.Unity.ProfilingUtils.RootSegment">
            <summary>
            根节点采样片段
            </summary>
        </member>
        <member name="P:AIO.Unity.ProfilingUtils.CurrentSegment">
            <summary>
            当前调试片段
            </summary>
        </member>
        <member name="M:AIO.Unity.ProfilingUtils.Clear">
            <summary>
            清除采样片段
            </summary>
        </member>
        <member name="M:AIO.Unity.ProfilingUtils.SampleBlock(System.String@)">
            <summary>
            获取采样区域
            </summary>
        </member>
        <member name="M:AIO.Unity.ProfilingUtils.BeginSample(System.String@)">
            <summary>
            开始采样
            </summary>
        </member>
        <member name="M:AIO.Unity.ProfilingUtils.EndSample">
            <summary>
            结束采样
            </summary>
        </member>
        <member name="T:AIO.AngleFixed">
            <summary>
            枚举类型，表示一些固定的角度值。
            </summary>
        </member>
        <member name="F:AIO.AngleFixed.DegreesA180">
            <summary>
            角度为180度。
            </summary>
        </member>
        <member name="F:AIO.AngleFixed.DegreesA135">
            <summary>
            角度为135度。
            </summary>
        </member>
        <member name="F:AIO.AngleFixed.DegreesA90">
            <summary>
            角度为90度。
            </summary>
        </member>
        <member name="F:AIO.AngleFixed.DegreesA45">
            <summary>
            角度为45度。
            </summary>
        </member>
        <member name="F:AIO.AngleFixed.Zero">
            <summary>
            角度为0度。
            </summary>
        </member>
        <member name="F:AIO.AngleFixed.DegreesS45">
            <summary>
            角度为-45度。
            </summary>
        </member>
        <member name="F:AIO.AngleFixed.DegreesS90">
            <summary>
            角度为-90度。
            </summary>
        </member>
        <member name="F:AIO.AngleFixed.DegreesS135">
            <summary>
            角度为-135度。
            </summary>
        </member>
        <member name="F:AIO.AngleFixed.DegreesS180">
            <summary>
            角度为-180度。
            </summary>
        </member>
        <member name="T:UnityThread">
            <summary>
            Unity线程
            </summary>
        </member>
        <member name="F:UnityThread.actionQueuesUpdateFunc">
            <summary>
            Update等待队列
            </summary>
        </member>
        <member name="F:UnityThread.mAactionCopiedQueueUpdateFunc">
            <summary>
            Update执行队列
            </summary>
        </member>
        <member name="F:UnityThread.noActionQueueToExecuteUpdateFunc">
            <summary>
            执行状态
            </summary>
        </member>
    </members>
</doc>

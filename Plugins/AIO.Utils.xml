<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AIO.Utils</name>
    </assembly>
    <members>
        <member name="T:AssemblyInfo">
            <summary>
            程序集信息
            </summary>
        </member>
        <member name="F:AssemblyInfo.KEY">
            <summary>
            密钥信息
            </summary>
        </member>
        <member name="F:AssemblyInfo.PublicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="F:AssemblyInfo.Token">
            <summary>
            公钥Token
            </summary>
        </member>
        <member name="F:AssemblyInfo.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:AssemblyInfo.FileVersion">
            <summary>
            指示编译器使用 Win32 文件版本资源的特定版本号。 Win32 文件版本不需要与程序集的版本号相同。
            </summary>
        </member>
        <member name="F:AssemblyInfo.KeyFile">
            <summary>
            密钥位置
            </summary>
        </member>
        <member name="F:AssemblyInfo.KeyName">
            <summary>
            密钥位置
            </summary>
        </member>
        <member name="F:AssemblyInfo.Company">
            <summary>
            作者
            </summary>
        </member>
        <member name="F:AssemblyInfo.Copyright">
            <summary>
            程序集属性
            </summary>
        </member>
        <member name="F:AssemblyInfo.Culture">
            <summary>
            支持的区域性
            </summary>
        </member>
        <member name="T:AIO.ConversionType">
            <summary>
            转换类型
            </summary>
        </member>
        <member name="F:AIO.ConversionType.Impossible">
            <summary>
            不可能转换
            </summary>
        </member>
        <member name="F:AIO.ConversionType.Identity">
            <summary>
            同等转换
            </summary>
        </member>
        <member name="F:AIO.ConversionType.Upcast">
            <summary>
            向上转换
            </summary>
        </member>
        <member name="F:AIO.ConversionType.Downcast">
            <summary>
            向下转换
            </summary>
        </member>
        <member name="F:AIO.ConversionType.NumericImplicit">
            <summary>
            数字隐式
            </summary>
        </member>
        <member name="F:AIO.ConversionType.NumericExplicit">
            <summary>
            数字显示
            </summary>
        </member>
        <member name="F:AIO.ConversionType.UserDefinedImplicit">
            <summary>
            用户自定义隐式
            </summary>
        </member>
        <member name="F:AIO.ConversionType.UserDefinedExplicit">
            <summary>
            用户自定义显式
            </summary>
        </member>
        <member name="F:AIO.ConversionType.UserDefinedThenNumericImplicit">
            <summary>
            用户定义的数字隐式
            </summary>
        </member>
        <member name="F:AIO.ConversionType.UserDefinedThenNumericExplicit">
            <summary>
            用户定义的数字显式
            </summary>
        </member>
        <member name="F:AIO.ConversionType.EnumerableToArray">
            <summary>
            集合转化为数组
            </summary>
        </member>
        <member name="F:AIO.ConversionType.EnumerableToList">
            <summary>
            集合转化为列表
            </summary>
        </member>
        <member name="F:AIO.ConversionType.ToString">
            <summary>
            字符串
            </summary>
        </member>
        <member name="T:AIO.ConversionUtils">
            <summary>
            转换工具类
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.HasImplicitNumericConversion(System.Type@,System.Type@)">
            <summary>
            是否存在 隐式数字转换
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.HasExplicitNumericConversion(System.Type@,System.Type@)">
            <summary>
            是否存在 显式数字转换
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.HasNumericConversion(System.Type@,System.Type@)">
            <summary>
            是否存在 数字转换功能
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.FindUserDefinedConversionMethods(AIO.ConversionUtils.ConversionQuery@)">
            <summary>
            查找用户定义的转换方法
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.CanConvert(System.Object@,System.Type@,System.Boolean@)">
            <summary>
            是否能转换
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.CanConvert(System.Type@,System.Type@,System.Boolean@)">
            <summary>
            是否能转换
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.Convert(System.Object@,System.Type@)">
            <summary>
            转换
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.Convert``1(System.Object@)">
            <summary>
            转换
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.TryConvert(System.Object@,System.Type@,System.Object@,System.Boolean@)">
            <summary>
            尝试转换
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.TryConvert``1(System.Object@,``0@,System.Boolean@)">
            <summary>
            尝试转换
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.IsConvertibleTo(System.Type,System.Type@,System.Boolean@)">
            <summary>
            可转化为
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.IsConvertibleTo(System.Object,System.Type@,System.Boolean@)">
            <summary>
            可转化为
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.IsConvertibleTo``1(System.Object,System.Boolean@)">
            <summary>
            可转化为
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.ConvertTo(System.Object,System.Type@)">
            <summary>
            转化为
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.ConvertTo``1(System.Object)">
            <summary>
            转化为
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.GetRequiredConversion(System.Type@,System.Type@)">
            <summary>
            获得所需的转换
            </summary>
        </member>
        <member name="M:AIO.ConversionUtils.GetRequiredConversion(System.Object@,System.Type@)">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIO.AmbiguousOperatorException">
            <summary>
            模棱两可的运算符
            </summary>
        </member>
        <member name="M:AIO.AmbiguousOperatorException.#ctor(System.String@,System.Type@,System.Type@)">
            <inheritdoc />
        </member>
        <member name="T:AIO.InvalidConversionException">
            <summary>
            表示当进行无效类型转换时引发的异常。
            </summary>
        </member>
        <member name="M:AIO.InvalidConversionException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.InvalidConversionException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:AIO.InvalidConversionException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AIO.InvalidOperatorException">
            <summary>
            无效的运算符
            </summary>
        </member>
        <member name="M:AIO.InvalidOperatorException.#ctor(System.String@,System.Type@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.InvalidOperatorException.#ctor(System.String@,System.Type@,System.Type@)">
            <inheritdoc />
        </member>
        <member name="T:AIO.OperatorException">
            <summary>
            运算符异常
            </summary>
        </member>
        <member name="M:AIO.OperatorException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:AIO.OperatorException.#ctor(System.String@)">
            <inheritdoc />
        </member>
        <member name="M:AIO.OperatorException.#ctor(System.String@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="T:AIO.UnexpectedEnumValueException`1">
            <summary>
            表示当枚举类型的值不在预期范围内时引发的异常。
            </summary>
            <typeparam name="T">枚举类型</typeparam>
        </member>
        <member name="M:AIO.UnexpectedEnumValueException`1.#ctor(`0)">
            <summary>
            使用指定的枚举值初始化 UnexpectedEnumValueException&lt;T&gt; 类的新实例。
            </summary>
            <param name="value">不在预期范围内的枚举值</param>
        </member>
        <member name="P:AIO.UnexpectedEnumValueException`1.Value">
            <summary>
            获取引发当前异常的枚举值。
            </summary>
        </member>
        <member name="T:AIO.IKeyedCollection`2">
            <summary>
            键迭代器
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:AIO.IKeyedCollection`2.Item(`0)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="P:AIO.IKeyedCollection`2.Item(System.Int32)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:AIO.IKeyedCollection`2.TryGetValue(`0,`1@)">
            <summary>
            尝试获取值
            </summary>
        </member>
        <member name="M:AIO.IKeyedCollection`2.Contains(`0)">
            <summary>
            存在
            </summary>
        </member>
        <member name="M:AIO.IKeyedCollection`2.Remove(`0)">
            <summary>
            移除
            </summary>
        </member>
        <member name="T:AIO.IMergedCollection`1">
            <summary>
            合并集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AIO.IMergedCollection`1.Includes``1">
            <summary>
            包含
            </summary>
        </member>
        <member name="M:AIO.IMergedCollection`1.Includes(System.Type)">
            <summary>
            包含
            </summary>
        </member>
        <member name="T:AIO.ISet`1">
            <summary>
            这是一个泛型集合接口，保证其元素的唯一性，这个唯一性是由某个比较器定义的。它还支持基本的集合操作，如并集、交集、补集和排他补集。
            </summary>
        </member>
        <member name="M:AIO.ISet`1.Add(`0)">
            <summary>
            将ITEM添加到集合中，如果已存在，则返回false；
            </summary>
            <param name="item"></param>
            <returns>Ture:不存在 False:已存在</returns>
        </member>
        <member name="M:AIO.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            对该集合进行与另一个IEnumerable (T)对象的并集运算；
            </summary>
        </member>
        <member name="M:AIO.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            对该集合进行与另一个IEnumerable (T)对象的交集运算；
            </summary>
        </member>
        <member name="M:AIO.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            将该集合中与其他集合重复的元素移除；
            </summary>
        </member>
        <member name="M:AIO.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            将该集合变换成只包含在该集合或者另一个集合中而不同时属于两个集合的元素；
            </summary>
        </member>
        <member name="M:AIO.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的子集；
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的超集；
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的真超集；
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的真子集；
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否与另一个集合存在共同的元素；
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否与另一个集合有完全相同的元素，且仅有这些元素。
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIO.MergedCollection`1">
            <summary>
            合并合计
            </summary>
        </member>
        <member name="M:AIO.MergedCollection`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:AIO.MergedCollection`1.Count">
            <inheritdoc />
        </member>
        <member name="P:AIO.MergedCollection`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.Include``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            包含
            </summary>
        </member>
        <member name="M:AIO.MergedCollection`1.Includes``1">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.Includes(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.ForType``1">
            <summary>
            获取指定类型合集
            </summary>
        </member>
        <member name="M:AIO.MergedCollection`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:AIO.VariantCollection`2">
            <summary>
            变种泛型 TImplementation必须是TBase的子类或本身
            </summary>
            <typeparam name="TBase"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:AIO.VariantCollection`2.#ctor(System.Collections.Generic.ICollection{`1}@)">
            <summary>
            初始化VariantCollection对象，
            </summary>
            <param name="implementation"></param>
        </member>
        <member name="P:AIO.VariantCollection`2.Implementation">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AIO.VariantCollection`2.Count">
            <summary>
            获取 Implementation 中包含的元素数。
            </summary>
        </member>
        <member name="P:AIO.VariantCollection`2.IsReadOnly">
            <summary>
            获取一个值，该值指示 Implementation 是否为只读。
            </summary>
        </member>
        <member name="M:AIO.VariantCollection`2.GetEnumerator">
            <summary>
            返回一个IEnumerator(TBase)类型的枚举器，用于遍历 implementatio n中的元素；
            </summary>
            <returns>支持在泛型集合上进行简单迭代</returns>
        </member>
        <member name="M:AIO.VariantCollection`2.Add(`0)">
            <summary>
            将某项添加到 implementatio 中。
            </summary>
        </member>
        <member name="M:AIO.VariantCollection`2.Clear">
            <summary>
            从implementation中移除所有元素；
            </summary>
        </member>
        <member name="M:AIO.VariantCollection`2.Contains(`0)">
            <summary>
            判断implementation是否包含某个TBase类型的item。
            如果item不是TImplementation类型，则抛出NotSupportedException异常；
            </summary>
        </member>
        <member name="M:AIO.VariantCollection`2.Remove(`0)">
            <summary>
            从implementation中移除指定的TBase类型的item。
            如果item不是TImplementation类型，则抛出NotSupportedException异常；
            </summary>
        </member>
        <member name="M:AIO.VariantCollection`2.CopyTo(`0[],System.Int32)">
            <summary>
            将implementation中的元素复制到一个TBase类型的数组中。
            如果array为null，则抛出ArgumentNullException异常；
            如果arrayIndex小于0，则抛出ArgumentOutOfRangeException异常；
            如果array的长度减去arrayIndex小于Count，则抛出ArgumentException异常。
            </summary>
        </member>
        <member name="T:AIO.INotifiedCollectionItem">
            <summary>
            通知集合
            </summary>
        </member>
        <member name="M:AIO.INotifiedCollectionItem.BeforeAdd">
            <summary>
            广播之后添加
            </summary>
        </member>
        <member name="M:AIO.INotifiedCollectionItem.AfterAdd">
            <summary>
            广播之前添加
            </summary>
        </member>
        <member name="M:AIO.INotifiedCollectionItem.BeforeRemove">
            <summary>
            广播之后移除
            </summary>
        </member>
        <member name="M:AIO.INotifiedCollectionItem.AfterRemove">
            <summary>
            广播之前移除
            </summary>
        </member>
        <member name="T:AIO.DebugDictionary`2">
            <summary>
            输出字典
            </summary>
        </member>
        <member name="P:AIO.DebugDictionary`2.Item(`0)">
            <summary>
            输出字典Value值
            </summary>
        </member>
        <member name="P:AIO.DebugDictionary`2.label">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:AIO.DebugDictionary`2.debug">
            <summary>
            是否输出
            </summary>
        </member>
        <member name="P:AIO.DebugDictionary`2.Count">
            <inheritdoc cref="T:System.Collections.ICollection" />
        </member>
        <member name="P:AIO.DebugDictionary`2.Keys">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="P:AIO.DebugDictionary`2.Values">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.Clear">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.GetEnumerator">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.ContainsKey(`0)">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.Add(`0,`1)">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.Remove(`0)">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="T:AIO.FlexibleDictionary`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:AIO.FlexibleDictionary`2.Item(`0)">
            <summary>
            获取V值
            </summary>
        </member>
        <member name="T:AIO.INotifyCollectionChanged`1">
            <summary>
            通知集合 改变事件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:AIO.INotifyCollectionChanged`1.ItemAdded">
            <summary>
            添加事件
            </summary>
        </member>
        <member name="E:AIO.INotifyCollectionChanged`1.ItemRemoved">
            <summary>
            移除事件
            </summary>
        </member>
        <member name="E:AIO.INotifyCollectionChanged`1.CollectionChanged">
            <summary>
            修改事件
            </summary>
        </member>
        <member name="T:AIO.HashUtils">
            <summary>
            hash工具
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetHashCode``1(``0@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetHashCode``2(``0@,``1@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetHashCode``3(``0@,``1@,``2@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetHashCode``4(``0@,``1@,``2@,``3@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetHashCode``5(``0@,``1@,``2@,``3@,``4@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetHashCodeAlloc(System.Object[])">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetMD5(System.IO.Stream,System.Int64)">
            <summary>
            通过HashAlgorithm的TransformBlock方法对流进行叠加运算获得MD5
            实现稍微复杂，但可使用与传输文件或接收文件时同步计算MD5值
            可自定义缓冲区大小，计算速度较快
            </summary>
            <param name="stream">数据流</param>
            <param name="bufferSize">自定义缓冲区大小16K</param>
            <returns>MD5Hash</returns>
        </member>
        <member name="M:AIO.HashUtils.GetMD5ByHashAlgorithm(System.IO.Stream,System.Int64)">
            <summary>
            通过HashAlgorithm的TransformBlock方法对流进行叠加运算获得MD5
            实现稍微复杂，但可使用与传输文件或接收文件时同步计算MD5值
            可自定义缓冲区大小，计算速度较快
            </summary>
            <param name="stream"></param>
            <param name="bufferSize">自定义缓冲区大小16K</param>
        </member>
        <member name="M:AIO.HashUtils.ToHash(System.Byte[])">
            <summary>
            转化为哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.VerifyCrc32Hash(System.String,System.String)">
            <summary>
            比较32位校验码
            </summary>
            <param name="input"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:AIO.IOUtils">
            <summary>
            IO ByteBuffer
            </summary>
            <summary> IO 核心方法 </summary>
            <summary>
            IO 加密
            </summary>
            <summary>
            文件读写操作工具集
            </summary>
            <summary> 获取属性 </summary>
            <summary>
            文件读写操作工具集
            </summary>
            <summary>
            IO 读取
            </summary>
            <summary>
            IO Image
            </summary>
            <summary>
            IO 写入
            </summary>
            <summary>
            ZIP工具
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadByteArray(System.String)">
            <summary>
            加载 Byte Array
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:AIO.IOUtils.ReadByteArrayAsync(System.String)">
            <summary>
            异步 加载 Byte Array
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:AIO.IOUtils.WriteByteArray(System.String,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            写入数据
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteByteArrayAsync(System.String,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            异步 写入数据
            </summary>
        </member>
        <member name="M:AIO.IOUtils.CopyChildNode(System.String,System.String,System.Boolean)">
            <summary>
            拷贝子节点
            </summary>
        </member>
        <member name="M:AIO.IOUtils.CopyFolderPart(System.String,System.String,System.Boolean)">
            <summary>
            复制文件夹及文件 部分 根文件名不会复制 适合重命名
            </summary>
            <param name="Source">原文件路径</param>
            <param name="Dest">目标文件路径</param>
            <param name="Overwrite"></param>
        </member>
        <member name="M:AIO.IOUtils.CopyFolderAll(System.String,System.String,System.Boolean)">
            <summary>
            复制文件夹及文件 全部
            </summary> 根文件名一起复制
            <param name="Source">原文件路径</param>
            <param name="Dest">目标文件路径</param>
            <param name="Overwrite"></param>
        </member>
        <member name="M:AIO.IOUtils.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            复制文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.CopyFile(System.String,System.String,System.Int32)">
            <summary>
            复制文件
            </summary>
            <param name="sourceFilePath">源文件的路径</param>
            <param name="destinationFilePath">目标文件的路径</param>
            <param name="bufferSize">缓冲区大小，用于每次读取和写入的字节数</param>
            <returns>是否成功复制文件</returns>
        </member>
        <member name="M:AIO.IOUtils.Write(System.String,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            将指定数据从offset开始写入length长度到文件中,是否追加到文件尾
            </summary>
            <param name="path">路径</param>
            <param name="bytes">内容</param>
            <param name="offset">写入内容位置</param>
            <param name="length">长度</param>
            <param name="concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.WriteAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            异步写入 将指定数据从offset开始写入length长度到文件中,是否追加到文件尾
            </summary>
            <param name="path">路径</param>
            <param name="bytes">内容</param>
            <param name="offset">写入内容位置</param>
            <param name="length">长度</param>
            <param name="concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.ReadAsync(System.String)">
            <summary>
            异步读取
            </summary>
        </member>
        <member name="M:AIO.IOUtils.Read(System.String)">
            <summary>
            读取
            </summary>
        </member>
        <member name="M:AIO.IOUtils.EncodingBitByte(System.Byte)">
            <summary>
            字节位运算加密
            </summary>
        </member>
        <member name="M:AIO.IOUtils.FindPaths(System.String,System.IO.SearchOption,System.String[])">
            <summary>
            查询匹配 返回符合条件的路径
            </summary>
            <param name="dir">文件夹路径</param>
            <param name="partterns">条件 "*value*"</param>
            <param name="op">匹配模式</param>
            <returns></returns>
        </member>
        <member name="M:AIO.IOUtils.GetFilesInfo(System.String,System.Func{System.IO.FileInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取当前所有文件夹中所有文件信息
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜查模式</param>
            <returns>所有文件信息数组</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFilesInfo(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取当前所有文件夹中所有文件信息
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件 绝对路径
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹 绝对路径</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFiles(System.String,System.Func{System.IO.FileInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件 绝对路径
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹 绝对路径</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFilesRelative(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件 相对路径
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹 相对路径</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFilesRelative(System.String,System.Func{System.IO.FileInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件 相对路径
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹 相对路径</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFilesName(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件名称
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件名称</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFilesName(System.String,System.Func{System.IO.FileInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件名称
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件名称</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFlodersInfo(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取文件夹数组
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹名称</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFlodersInfo(System.String,System.Func{System.IO.DirectoryInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取文件夹数组
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹名称</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFloders(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取文件夹数组
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹名称</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFloders(System.String,System.Func{System.IO.DirectoryInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取文件夹数组
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹名称</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFlodersName(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件夹名 不含子文件夹 不包含自己
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetFlodersName(System.String,System.Func{System.IO.DirectoryInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件夹名 不含子文件夹 不包含自己
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetFileSize(System.String,System.Single)">
            <summary>
            返回文件大小 默认单位KB
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetFileLength(System.String)">
            <summary>
            返回文件字节长度
            </summary>
            <param name="Path">文件相对路径</param>
        </member>
        <member name="M:AIO.IOUtils.GetFileName(System.String,System.Boolean)">
            <summary>
            返回文件名，不含路径 默认带文件名后缀
            </summary>
            <param name="file">文件路径</param>
            <param name="extension">是否有后缀</param>
            <returns>文件名</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFileInfo(System.String)">
            <summary>
            获取当前所有文件夹中所有文件信息
            </summary>
            <param name="value">文件夹路径</param>
        </member>
        <member name="M:AIO.IOUtils.GetFileHash(System.String)">
            <summary>
            获取文件的哈希值
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetFileMD5(System.String,System.Int64)">
            <summary>
            获取文件的MD5值
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetMD5ByHashAlgorithm(System.IO.Stream,System.Int64)">
            <summary>
            通过HashAlgorithm的TransformBlock方法对流进行叠加运算获得MD5
            实现稍微复杂，但可使用与传输文件或接收文件时同步计算MD5值
            可自定义缓冲区大小，计算速度较快
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetLastWriteTimeUtc(System.String)">
            <summary>
            获取最后写入时间
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetCreationTimeUtc(System.String)">
            <summary>
            获取创建文件时间
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetAttributes(System.String)">
            <summary>
            获取文件属性
            </summary>
        </member>
        <member name="F:AIO.IOUtils.EMPTY_BYTES">
            <summary> 空字节数组 </summary>
        </member>
        <member name="M:AIO.IOUtils.Exists(System.String)">
            <summary>
            判断当前路径是否存在 不管是以文件夹 还是 文件的形式存在
            </summary>
            <returns>True:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.IOUtils.FileExists(System.String@)">
            <summary>
            判断文件是否存在
            </summary>
            <returns>True:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.IOUtils.DirExists(System.String@)">
            <summary>
            判断目录是否存在
            </summary>
            <returns>True:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.IOUtils.DeleteFile(System.String@)">
            <summary>
            删除单个文件
            </summary>
            <param name="path">文件相对路径</param>
        </member>
        <member name="M:AIO.IOUtils.DeleteFile(System.IO.FileInfo@)">
            <summary>
            删除单个文件
            </summary>
            <param name="path">文件相对路径</param>
        </member>
        <member name="M:AIO.IOUtils.DeleteFiles(System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            删除单个文件
            </summary>
            <param name="paths">文件相对路径</param>
        </member>
        <member name="M:AIO.IOUtils.DeleteFilesAsync(System.String,System.String,System.IO.SearchOption)">
            <summary>
            删除指定文件夹下 指定类型文件
            </summary>
            <param name="folder">文件夹路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">查询模式</param>
        </member>
        <member name="M:AIO.IOUtils.DeleteFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            删除指定文件夹下 指定类型文件
            </summary>
            <param name="folder">文件夹路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">查询模式</param>
        </member>
        <member name="M:AIO.IOUtils.DeleteFolderAsync(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFolder(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFolderAsync(System.IO.DirectoryInfo,System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFolder(System.IO.DirectoryInfo,System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFlodersAsync(System.Collections.Generic.IEnumerable{System.String},System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFloders(System.Collections.Generic.IEnumerable{System.String},System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFloders(System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo},System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFlodersAsync(System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo},System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.CreateFloder(System.String,System.Boolean)">
            <summary>
            创建文件夹
            </summary>
            <param name="folder">文件夹路径</param>
            <param name="clear">清除</param>
        </member>
        <member name="M:AIO.IOUtils.ClearFloder(System.String)">
            <summary>
            清空当前文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ClearFloder(System.IO.DirectoryInfo)">
            <summary>
            清空当前文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadFileAsync(System.String)">
            <summary>
            使用异步 从文件中读取数据
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadFile(System.String)">
            <summary>
            从文件中读取数据
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteFileAsync(System.String,System.Byte[],System.Boolean)">
            <summary>
            将数据写入文件,是否追加到文件尾 默认覆盖文件
            </summary>
            <param name="Path">路径</param>
            <param name="Bytes">内容</param>
            <param name="Concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.WriteFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            将数据写入文件,是否追加到文件尾 默认覆盖文件
            </summary>
            <param name="Path">路径</param>
            <param name="Bytes">内容</param>
            <param name="Concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.ReadPhoto(System.String)">
            <summary>
            读取图片
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadUnicode(System.String)">
            <summary>
            按照UTF-8读取文本文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteUnicode(System.String,System.String,System.Boolean)">
            <summary>
            将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.ReadText(System.String,System.String)">
            <summary>
            按照指定编码读取文本文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadUnicodeAsync(System.String)">
            <summary>
            异步 按照UTF-8读取文本文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteUnicodeAsync(System.String,System.String,System.Boolean)">
            <summary>
            异步 将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.WriteText(System.String,System.String,System.String,System.Boolean)">
            <summary>
            将字符串按照指定编码写入文件,是否追加到文件尾
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Charset">保存文本格式</param>
            <param name="Concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.WriteTextAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            异步 将字符串按照指定编码写入文件,是否追加到文件尾
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Charset">保存文本格式</param>
            <param name="Concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.ReadTextAsync(System.String,System.String)">
            <summary>
            异步 按照指定编码读取文本文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteUTF8(System.String,System.String,System.Boolean)">
            <summary>
            将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.WriteUTF8(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.ReadUTF8(System.String)">
            <summary>
            按照UTF-8读取文本文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadUTF8Async(System.String)">
            <summary>
            异步 按照UTF-8读取文本文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteUTF8Async(System.String,System.String,System.Boolean)">
            <summary>
            异步 将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.WriteUTF8Async(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            异步 将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.ReadJson``1(System.String,System.String)">
            <summary>
            读取Json文件 根据编码
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadJsonAsync``1(System.String,System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadJsonUTF8``1(System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadJsonUTF8Async``1(System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteJson``1(System.String,``0,System.Boolean,System.String)">
            <summary>
            写入Json文件 根据编码
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteJsonAsync``1(System.String,``0,System.Boolean,System.String)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteJsonUTF8``1(System.String,``0,System.Boolean)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteJsonUTF8Async``1(System.String,``0,System.Boolean)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadXml``1(System.String,System.String)">
            <summary>
            读取Json文件 根据编码
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadXmlAsync``1(System.String,System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadXmlUTF8``1(System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadXmlUTF8Async``1(System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteXml``1(System.String,``0,System.String)">
            <summary>
            写入Json文件 根据编码
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteXmlAsync``1(System.String,``0,System.String)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteXmlUTF8``1(System.String,``0)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteXmlUTF8Async``1(System.String,``0)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadPList(System.String)">
            <summary>
            读取 Plist
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePList(System.String,AIO.PList.PListRoot)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePList(System.String,AIO.PList.PListDict)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePListAsync(System.String,AIO.PList.PListRoot)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePListAsync(System.String,AIO.PList.PListDict)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePListBinary(System.String,AIO.PList.PListRoot)">
            <summary>
            写入 Plist 二进制
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePListBinary(System.String,AIO.PList.PListDict)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePListBinaryAsync(System.String,AIO.PList.PListRoot)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePListBinaryAsync(System.String,AIO.PList.PListDict)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadZip(System.String,System.String,System.Action{System.Single},System.Action{System.String})">
            <summary>
            解压
            </summary>
            <param name="zip">解压包路径</param>
            <param name="save">保存路径</param>
            <param name="progressAction">进度回调</param>
            <param name="entryAction"></param>
        </member>
        <member name="T:AIO.ZipUitls">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.ZipUitls.Compress(System.String@)">
            <summary>
            
            </summary>
            <param name="srcFile"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ZipUitls.Compress(System.Byte[],System.Int32@)">
            <summary>
            解压ZIP文件
            </summary>
            <param name="bts"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ZipUitls.Decompress(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bts"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ZipUitls.Decompress(System.Byte[],System.Text.Encoding,System.Int32)">
            <summary>
            
            </summary>
            <param name="bts"></param>
            <param name="encoding"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:AIO.HexUtils">
            <summary>
            16进制操作类
            </summary>
        </member>
        <member name="F:AIO.HexUtils.HEX_BIT">
            <summary>
            16进制位控制符
            </summary>
        </member>
        <member name="F:AIO.HexUtils.EMPTY_BYTE_ARRAY">
            <summary>
            空字节数组
            </summary>
        </member>
        <member name="F:AIO.HexUtils.HEX_DIGIT">
            <summary>
            大写16进制数字字符
            </summary>
        </member>
        <member name="F:AIO.HexUtils.HEX_DIGIT_LOWER">
            <summary>
            小写写16进制数字字符
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToDigit(System.Char@)">
            <summary>
            将16进制字符转换为数字
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHexChar(System.Int32@,System.Boolean@)">
            <summary>
            将数字转换为16进制字符
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Char@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            将一个char转换为16进制并添加到字节缓存
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Byte@,System.Boolean@)">
            <summary>
            将一个字节转换为16进制
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Byte@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            将一个字节转换为16进制 ，并添加到字节缓存
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Int16,System.Boolean)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Int16,System.Text.StringBuilder,System.Boolean)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Int32,System.Boolean)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Int32,System.Text.StringBuilder,System.Boolean)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Int64@,System.Boolean@)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Collections.Generic.IList{System.Byte}@)">
            <summary>
            转换为16进制数据
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Collections.Generic.IList{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            转换为16进制数据
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Collections.Generic.IList{System.Byte}@,System.Boolean@)">
            <summary>
            转换为16进制数据
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Collections.Generic.IList{System.Byte}@,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            转换为16进制数据
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ParseByte(System.String@)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ParseShort(System.String)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ParseInt(System.String)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ParseLong(System.String@)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ParseLong(System.String@,System.Int32,System.Int32)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ParseLong(System.Collections.Generic.IList{System.Char}@,System.Int32,System.Int32)">
            <summary>
            将指定16进制字符数组转换为10进制数字
            </summary>
        </member>
        <member name="T:AIO.MathUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.InMask(System.Int32,System.Int32@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.InMask(System.Int64,System.Int64@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.OutMask(System.Int32,System.Int32@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.OutMask(System.Int64,System.Int64@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.ArrayPerCent(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            数组百分比计算
            </summary>
        </member>
        <member name="M:AIO.MathUtils.ArrayPerCent(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            数组百分比计算
            </summary>
        </member>
        <member name="M:AIO.MathUtils.ArrayPerCent(System.Collections.Generic.IList{System.Single}@)">
            <summary>
            数组百分比计算
            </summary>
        </member>
        <member name="F:AIO.MathUtils.EARTH_RADIUS">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.MathUtils.Deg2Rad">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.MathUtils.Rad2Deg">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Distance(System.Single,System.Single,System.Single,System.Single)">
            <summary> 
            距离
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Sin(System.Double)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Asin(System.Double)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Cos(System.Double)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Acos(System.Double)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Abs(System.Double)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Abs(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Abs(System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Round(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Ceil(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Floor(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Mod(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.GetGPSDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Rad(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.GetDistance(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.GetDecimal(System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIO.SortUtils">
            <summary>
            排序工具
            默认排序方向 从小到大
            </summary>
        </member>
        <member name="M:AIO.SortUtils.AutomaticArray``1(System.Array@,``0@)">
            <summary>
            自动扩容，并保存数据
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Counting(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            计数排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Counting(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            计数排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Radix(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Radix(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Radix(System.Collections.Generic.IList{System.Int16}@)">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bucket(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bucket(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bucket(System.Collections.Generic.IList{System.Int16}@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bucket(System.Collections.Generic.IList{System.Single}@,System.Int32@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bucket(System.Collections.Generic.IList{System.Double}@,System.Int32@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bucket(System.Collections.Generic.IList{System.Decimal}@,System.Int32@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.InsertIntoLinkList``1(System.Collections.Generic.LinkedList{``0}@,``0@)">
            <summary>  
            按升序插入 linklist   
            </summary>  
            <param name="linkedList"> 要排序的链表 </param>  
            <param name="num"> 要插入排序的数字 </param>  
        </member>
        <member name="M:AIO.SortUtils.Merge``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            归并排序
            数据量:1000以下适用
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Merge``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            归并排序
            数据量:1000以下适用
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Heap``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            堆排序
            数据量:1000以下适用
            </summary>
        </member>
        <member name="M:AIO.SortUtils.HeapSort_MaxHeaping``1(System.Collections.Generic.IList{``0}@,System.Int32@,System.Int32@)">
            <summary>
            将指定的结点调整为堆。
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Heap``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            堆排序
            数据量:1000以下适用
            </summary>
        </member>
        <member name="M:AIO.SortUtils.HeapSort_MaxHeaping``1(System.Collections.Generic.IList{``0}@,System.Int32@,System.Int32@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            将指定的结点调整为堆。
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Select``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            选择排序 数据量:100以下适用
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Select``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            选择排序 数据量:100以下适用
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Shell``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            希尔排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Shell``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            希尔排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Insert``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            插入排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Insert``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            插入排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Quick``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            快速排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Quick``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            快速排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bubble``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            单向冒泡排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bubble``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            单向冒泡排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.BubbleTwoWay``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            双向冒泡排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.BubbleTwoWay``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            双向冒泡排序
            </summary>
        </member>
        <member name="T:AIO.StatusUtils">
            <summary>
            状态值比较
            </summary>
            <summary>
            状态值比较类
            </summary>
            <summary>
            状态值比较类
            </summary>
            <summary>
            状态值比较类
            </summary>
            <summary>
            状态值比较类
            </summary>
            <summary>
            状态比较 推荐使用Int值 并且 不推荐使用枚举 装箱拆箱性能消耗与int值相比 差距是两倍
            实例 10000000次
            耗时 枚举转换 4
            耗时 Int转换  2
            耗时 long转换  4
            耗时 Convert转换  1504
            </summary>
        </member>
        <member name="M:AIO.StatusUtils.Square(System.Int32,System.Int32)">
            <summary>
            2次幂运算 判断是否相等
            </summary>
            <param name="index">次幂值 T:1,2,3..</param>
            <param name="mask">对比值 T:4,8,16,32..</param>
            <returns>Ture:相等 Flase:不相等</returns>
            <!--
            1 << 2 = 4 相等
            1 << 3 = 8 不相等
            -->
        </member>
        <member name="M:AIO.StatusUtils.Square(System.Int64,System.Int64)">
            <summary>
            2次幂运算 判断是否相等
            </summary>
            <param name="index">次幂值 T:1,2,3..</param>
            <param name="mask">对比值 T:4,8,16,32..</param>
            <returns>Ture:相等 Flase:不相等</returns>
        </member>
        <member name="M:AIO.StatusUtils.Mix(System.Enum,System.Enum)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AIO.StatusUtils.Mix(System.Byte@,System.Byte@)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AIO.StatusUtils.Mix(System.Int16@,System.Int16@)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AIO.StatusUtils.Mix(System.Int32@,System.Int32@)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AIO.StatusUtils.Mix(System.Int64@,System.Int64@)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AIO.StatusUtils.Set``1(``0,``0,System.Boolean@)">
            <summary>
            设置状态 要求枚举结构顺序为 幂次序
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <param name="b">Ture 状态添加 false 状态移除</param>
        </member>
        <member name="M:AIO.StatusUtils.Set(System.Int16@,System.Int16@,System.Boolean@)">
            <summary>
            设置状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <param name="b">Ture 状态添加 false 状态移除</param>
        </member>
        <member name="M:AIO.StatusUtils.Set(System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            设置状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <param name="b">Ture 状态添加 false 状态移除</param>
        </member>
        <member name="M:AIO.StatusUtils.Set(System.Int64@,System.Int64@,System.Boolean@)">
            <summary>
            设置状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <param name="b">Ture 状态添加 false 状态移除</param>
        </member>
        <member name="M:AIO.StatusUtils.Has(System.Enum@,System.Enum@)">
            <summary>
            是否有指定状态（包含指定状态，但不限于指定状态）
            </summary>
        </member>
        <member name="M:AIO.StatusUtils.Has(System.Int16@,System.Int16@)">
            <summary>
            是否有指定状态（包含指定状态，但不限于指定状态）
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Has(System.Int32@,System.Int32@)">
            <summary>
            是否有指定状态（包含指定状态，但不限于指定状态）
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Has(System.Int64@,System.Int64@)">
            <summary>
            是否有指定状态（包含指定状态，但不限于指定状态）
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only``1(``0@,``0@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.Int32@,System.Int32@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.Int64@,System.UInt32@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.Int64@,System.Int64@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.UInt64@,System.UInt64)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.Int16@,System.Int16@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.UInt16@,System.UInt16@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.Byte@,System.Byte@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.Single@,System.Single@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Del``1(``0@,``0@)">
            <summary>
            删除状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="M:AIO.StatusUtils.Del(System.Byte@,System.Byte@)">
            <summary>
            删除状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="M:AIO.StatusUtils.Del(System.Int16@,System.Int16@)">
            <summary>
            删除状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="M:AIO.StatusUtils.Del(System.Int32@,System.Int32@)">
            <summary>
            删除状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="M:AIO.StatusUtils.Del(System.Int64@,System.Int64@)">
            <summary>
            删除状态 2次幂序
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="T:AIO.TimeUtils">
            <summary>
            时间方法库
            </summary>
        </member>
        <member name="P:AIO.TimeUtils.StartBeforeDay">
            <summary>
            昨天开始时间 单位毫秒
            </summary>
        </member>
        <member name="P:AIO.TimeUtils.StartYesterDay">
            <summary>
            昨天开始时间 单位毫秒
            </summary>
        </member>
        <member name="P:AIO.TimeUtils.StartToday">
            <summary>
            当天开始时间 单位毫秒
            </summary>
        </member>
        <member name="P:AIO.TimeUtils.StartTomorrowDay">
            <summary>
            明天开始时间 单位毫秒
            </summary>
        </member>
        <member name="P:AIO.TimeUtils.StartAfterDay">
            <summary>
            后天开始时间 单位毫秒
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetCurrTimeStr(System.String)">
            <summary>
            获取当前时间 文字格式
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetCurrTime(AIO.TimeUnit.SencondUnit)">
            <summary>
            获取当前时间搓
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetDateTime(System.String,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取时间搓
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.Format(System.Int64,System.String,AIO.TimeUnit.SencondUnit)">
            <summary>
            格式化时间，参数：格林威治时间，格式化格式（具体见文件末尾）
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetDateTime(System.Int64,AIO.TimeUnit.SencondUnit)">
            <summary>
            © 获取DateTime 时间磋单位支持 纳秒 微秒 毫秒 秒
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetTimeSpan(System.Int64,AIO.TimeUnit.SencondUnit)">
            <summary>
            © 获取TimeSpan 时间磋单位支持 纳秒 微秒 毫秒 秒
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.Normalize(System.DateTime,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取指定单位的时间搓
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetCurrDateToDay(System.Int32,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取当天差距 时间信息
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetTimeStartByType(System.Int64,AIO.TimeUnit.DateTimeUnit,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取开始时间
            </summary>
            <param name="time">时间搓</param>
            <param name="DateType">获取类型 年 季 月 周 日</param>
            <param name="Unit">时间搓 单位 纳秒 微秒 毫秒 秒</param>
        </member>
        <member name="M:AIO.TimeUtils.GetTimeEndByType(System.Int64,AIO.TimeUnit.DateTimeUnit,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取结束时间
            </summary>
            <param name="time">时间搓</param>
            <param name="DateType">获取类型 年 季 月 周 日</param>
            <param name="Unit">时间搓 单位 纳秒 微秒 毫秒 秒</param>
        </member>
        <member name="M:AIO.TimeUtils.GetCountDown(System.Int64,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取时间倒计时字符串表示(ms) 01:59:08
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetPreHumanityTime(System.Int64,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取传入时间距离当前时间的文字描述
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.CompareNowTime(System.DateTime)">
            <summary>
            与当前时间比较 如果小于当前时间为Ture
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.CompareNowTime(System.Int64,AIO.TimeUnit.SencondUnit)">
            <summary>
            与当前时间比较 如果小于当前时间为Ture
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.DateStringFromNow(System.DateTime)">
            <summary>
            求离最近发表时间的函数
            </summary>
            <returns> 返回时间描述 </returns>
        </member>
        <member name="M:AIO.TimeUtils.CompareDateDay(System.String,System.String,System.Int32)">
            <summary>
            日期比较
            </summary>
            <param name="today">当前日期</param>
            <param name="writeDate">输入日期</param>
            <param name="n">比较天数</param>
            <returns>大于天数返回true，小于返回false</returns>
        </member>
        <member name="M:AIO.TimeUtils.GetDisTime(System.DateTime,System.DateTime,System.String)">
            <summary>
            获取两时间相差
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetDisTime(System.Int64,System.Int64,System.String)">
            <summary>
            获取两时间相差
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.IsToday(System.Int64,System.Int64,AIO.TimeUnit.SencondUnit)">
            <summary>
            判断是否同日
            </summary>
        </member>
        <member name="T:AIO.HttpDownloadInfo">
            <summary>
            文件下载信息
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.URL">
            <summary>
            下载地址
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.SavePath">
            <summary>
            保存路径
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.FullPath">
            <summary>
            保存路径
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Name">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.DownloadedSize">
            <summary>
            下载文件大小
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Exception">
            <summary>
            下载异常信息
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Time">
            <summary>
            下载总时间
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.IsResume">
            <summary>
            是否为断点续传
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.MD5">
            <summary>
            文件MD5
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Stopwatch">
            <summary>
            测量时间
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Response">
            <summary>
            请求体
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.CancelToken">
            <summary>
            取消
            </summary>
        </member>
        <member name="M:AIO.HttpDownloadInfo.#ctor(System.String@,System.String@,System.String@)">
            <summary>
            下载信息
            </summary>
            <param name="url">下载地址</param>
            <param name="savePath">保存文件夹</param>
            <param name="name">文件名</param>
        </member>
        <member name="M:AIO.HttpDownloadInfo.Cancel">
            <summary>
            取消下载
            </summary>
        </member>
        <member name="M:AIO.HttpDownloadInfo.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:AIO.HttpDownload">
            <summary>
            Http下载
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.Urls">
            <summary>
            文件地址
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.SavePath">
            <summary>
            保存地址
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.Client">
            <summary>
            Http客户端
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.MD5Client">
            <summary>
            Http客户端
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.MaxDownloadNum">
            <summary>
            最大下载数量
            </summary>
        </member>
        <member name="F:AIO.HttpDownload.ProgressAction">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="F:AIO.HttpDownload.CompleteAction">
            <summary>
            完成回调
            </summary>
        </member>
        <member name="F:AIO.HttpDownload.ExceptionAction">
            <summary>
            完成回调
            </summary>
        </member>
        <member name="F:AIO.HttpDownload.ClientHandler">
            <summary>
            Http头信息
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.#ctor(System.Collections.Generic.IList{System.String}@,System.String@)">
            <summary>
            初始化
            </summary>
            <param name="downloadUrls">下载地址</param>
            <param name="downloadPath">保存地址</param>
        </member>
        <member name="M:AIO.HttpDownload.#ctor(System.Collections.Generic.IList{System.String}@,System.String@,System.Net.Http.HttpClientHandler@)">
            <summary>
            初始化
            </summary>
            <param name="downloadUrls">下载地址</param>
            <param name="downloadPath">保存地址</param>
            <param name="handler">表头参数</param>
        </member>
        <member name="M:AIO.HttpDownload.#ctor(System.String@,System.String@)">
            <summary>
            初始化
            </summary>
            <param name="downloadUrls">下载地址</param>
            <param name="downloadPath">保存地址</param>
        </member>
        <member name="M:AIO.HttpDownload.Async(System.Int32)">
            <summary>
            开启异步下载
            </summary>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:AIO.HttpDownload.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.SetDownloadNum(System.Int32@)">
            <summary>
            设置最大下载数量
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.OnComplete(System.Action{AIO.HttpDownloadInfo}@)">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.OnException(System.Action{AIO.HttpDownloadInfo}@)">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.OnProgress(System.Action{AIO.HttpDownloadInfo}@)">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.GetAwaiter">
            <summary>
            获取异步等待器
            </summary>
        </member>
        <member name="T:AIO.HttpUtils">
            <summary>
            Http 工具类
            </summary>
        </member>
        <member name="T:AIO.BinaryOperator">
            <summary>
            二目运算符
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.Addition">
            <summary>
            加法运算
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.Subtraction">
            <summary>
            减法运算
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.Multiplication">
            <summary>
            乘法运算
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.Division">
            <summary>
            除法运算
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.Modulo">
            <summary>
            取模运算
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.And">
            <summary>
            逻辑与
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.Or">
            <summary>
            逻辑或
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.ExclusiveOr">
            <summary>
            逻辑异或
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.Equality">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.Inequality">
            <summary>
            不相等
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.GreaterThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.LessThan">
            <summary>
            小余
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.GreaterThanOrEqual">
            <summary>
            大于或等于
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.LessThanOrEqual">
            <summary>
            小于或等于
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.LeftShift">
            <summary>
            向左移
            </summary>
        </member>
        <member name="F:AIO.BinaryOperator.RightShift">
            <summary>
            向右移
            </summary>
        </member>
        <member name="T:AIO.UnaryOperator">
            <summary>
            一元运算符
            </summary>
        </member>
        <member name="F:AIO.UnaryOperator.LogicalNegation">
            <summary>
            逻辑非
            </summary>
        </member>
        <member name="F:AIO.UnaryOperator.NumericNegation">
            <summary>
            取反
            </summary>
        </member>
        <member name="F:AIO.UnaryOperator.Increment">
            <summary>
            自增 ++
            </summary>
        </member>
        <member name="F:AIO.UnaryOperator.Decrement">
            <summary>
            自减 --
            </summary>
        </member>
        <member name="F:AIO.UnaryOperator.Plus">
            <summary>
            加
            </summary>
        </member>
        <member name="T:AIO.BinaryOperatorHandler">
            <summary>
            二进制运算符 处理程序
            </summary>
        </member>
        <member name="M:AIO.BinaryOperatorHandler.#ctor(System.String@,System.String@,System.String@,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:AIO.OperatorHandler">
            <summary>
            运算符操作
            </summary>
        </member>
        <member name="M:AIO.OperatorHandler.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            运算符操作
            </summary>
            <param name="name">名称</param>
            <param name="verb">动词</param>
            <param name="symbol">标志</param>
            <param name="customMethodName">定制方法名</param>
        </member>
        <member name="P:AIO.OperatorHandler.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:AIO.OperatorHandler.verb">
            <summary>
            动词
            </summary>
        </member>
        <member name="P:AIO.OperatorHandler.symbol">
            <summary>
            标志
            </summary>
        </member>
        <member name="P:AIO.OperatorHandler.customMethodName">
            <summary>
            自定义函数名
            </summary>
        </member>
        <member name="T:AIO.OperatorUtils">
            <summary>
            运算符工具类
            </summary>
        </member>
        <member name="T:AIO.RandomUtils">
            <summary>
            随机数工具类
            </summary>
        </member>
        <member name="M:AIO.RandomUtils.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.RandomUtils.Refresh(System.Random@)">
            <summary>
            
            </summary>
            <param name="random"></param>
        </member>
        <member name="M:AIO.RandomUtils.Refresh(System.Int32@)">
            <summary>
            
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:AIO.RandomUtils.RandArray``1(System.Int32,System.Collections.Generic.ICollection{``0}@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandArray``1(System.Int32@,System.Collections.Generic.IList{``0}@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandArray``1(System.Int32,System.Collections.Generic.IList{``0},System.Int32@,System.Int32)">
            <param name="array"></param>
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
            <param name="count"></param>
        </member>
        <member name="M:AIO.RandomUtils.RandArray``2(System.Int32@,System.Collections.Generic.IDictionary{``0,``1}@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="array"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayValue``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayValue``1(System.Collections.Generic.ICollection{``0}@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayValue``2(System.Collections.Generic.IDictionary{``0,``1}@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayValue``1(System.Collections.Generic.IList{``0}@,System.Int32@,System.Int32@)">
            <param name="array"></param>
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayValue``1(System.Collections.Generic.ICollection{``0}@,System.Int32@,System.Int32)">
            <param name="array"></param>
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayValue``2(System.Collections.Generic.IDictionary{``0,``1}@,System.Int32@,System.Int32)">
            <param name="array"></param>
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayWeight(System.Collections.Generic.IList{System.Single}@)">
            <summary>
            随机权重 
            </summary>
            <param name="weights">传入数组的总和 应为1</param>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayWeight``1(System.Collections.Generic.IList{System.Single}@,System.Collections.Generic.IList{``0}@)">
            <summary>
            随机权重
            </summary>
            <param name="weights">传入数组的总和 应为1</param>
            <param name="values"></param>
        </member>
        <member name="M:AIO.RandomUtils.RandBool">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandBoolArray(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandBytes(System.Byte@,System.Int32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandByteArray(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandByteArray(System.Int32@,System.Int32@,System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:AIO.RandomUtils.RandSByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandSByteArray(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandSByteArray(System.Int32@,System.SByte@,System.SByte@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt16(System.UInt16@,System.Int32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt16Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt32(System.UInt32@,System.UInt32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt32Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt64(System.UInt64@,System.UInt64@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt64Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt16(System.Int16@,System.Int32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandInt16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt16Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt32(System.Int32@,System.Int32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandInt32Array(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="count"></param>
            <param name="minValue">下限-包含</param>
            <param name="maxValue">上限-不包含</param>
            <param name="hasRepeat">是否包含重复 Ture:包含 False:不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandInt32ArrayWeight(System.Collections.Generic.IList{System.Int32})">
            <summary>
            
            </summary>
            <param name="weights"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt32ArrayWeight(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            
            </summary>
            <param name="weights"></param>
            <param name="weightRandomMinVal"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt64(System.Int64@,System.Int64@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandInt64Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandFloat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandFloat(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="hasNan"></param>
            <param name="hasInfinity"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandDouble">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.BreakArray``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AIO.RandomUtils.BreakArray``1(System.Collections.Generic.IList{``0},System.Int32@,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:AIO.RandomUtils.NextLong(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:AIO.ParseUtils">
            <summary>
            Dat文件 解析
            </summary>
            <summary>
            Json 工具类
            </summary>
            <see>
                <cref>https://www.newtonsoft.com/json/help/html/N_Newtonsoft_Json.htm</cref>
            </see>
            <summary>
            XML 工具类
            </summary>
            <summary>
            Yaml 解析
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.BinarySerialize``1(``0)">
            <summary>
            序列化 未加密
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.Base64Serialize``1(``0)">
            <summary>
            序列化 未加密
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.Base64Deserialize``1(System.String)">
            <summary>
            反序列化 未加密
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.BinaryDeserialize``1(System.Byte[])">
            <summary>
            反序列化 未加密
            </summary>
        </member>
        <member name="F:AIO.ParseUtils.normalSettings">
            <see>
                <cref>https://www.newtonsoft.com/json/help/html/Properties_T_Newtonsoft_Json_JsonSerializerSettings.htm</cref>
            </see>
        </member>
        <member name="P:AIO.ParseUtils.JSONNormalSettings">
            <summary>
            Json默认设置
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonSerialize(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonSerialize``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonDeserialize(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonDeserialize``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonDeserialize(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonPopulateObject``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化 填充对象
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonPopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化 填充对象
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.UriParamSerialize(System.Object)">
            <summary>
            Model对象转换为uri网址参数形式
            </summary>
            <param name="obj">Model对象</param>
        </member>
        <member name="M:AIO.ParseUtils.XmlSerialize``1(``0,System.String,System.Text.Encoding)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.XmlDeserialize``1(System.String,System.Text.Encoding)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.YamlSerialize(System.Object)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.YamlToJson(System.String)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.YamlDeserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="T:AIO.PList.IPListElementExten">
            <summary>
            A .Net representation of a  PList element exten
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsString(AIO.PList.IPListElement)">
            <summary>
            转换为 String
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsReal(AIO.PList.IPListElement)">
            <summary>
            转换为 Real
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsBool(AIO.PList.IPListElement)">
            <summary>
            转换为 Bool
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsDict(AIO.PList.IPListElement)">
            <summary>
            转换为 Dict
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsInteger(AIO.PList.IPListElement)">
            <summary>
            转换为 Integer
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsDate(AIO.PList.IPListElement)">
            <summary>
            转换为 Date
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsData(AIO.PList.IPListElement)">
            <summary>
            转换为 Data
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsArray(AIO.PList.IPListElement)">
            <summary>
            转换为 Null
            </summary>
        </member>
        <member name="T:AIO.PList.IPListElement">
            <summary>
            A .Net representation of a  PList element
            </summary>
        </member>
        <member name="P:AIO.PList.IPListElement.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.IPListElement.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="M:AIO.PList.IPListElement.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.IPListElement.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>The count of PList elements in this element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="P:AIO.PList.IPListElement.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.IPListElement.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.IPListElement.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListBinaryReader">
            <summary>
            A class, used to read binary formated <see cref="T:CE.iPhone.IPListElemnet"/> from a stream
            </summary>
        </member>
        <member name="P:AIO.PList.PListBinaryReader.BaseStream">
            <summary>
            Gets the basestream.
            </summary>
            <value>The basestream.</value>
        </member>
        <member name="P:AIO.PList.PListBinaryReader.ElementIdxSize">
            <summary>
            Gets or sets the size of the element idx.
            </summary>
            <value>The size of the element idx.</value>
        </member>
        <member name="M:AIO.PList.PListBinaryReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListBinaryReader"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListBinaryReader.Read(System.IO.Stream)">
            <summary>
            Reads a binary formated <see cref="T:CE.iPhone.IPListElemnet"/> from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElemnet"/>, read from the specified stream</returns>
        </member>
        <member name="P:AIO.PList.PListBinaryReader.CurrentElementTypeCode">
            <summary>
            Gets the current element type code.
            </summary>
            <value>The current element type code.</value>
        </member>
        <member name="P:AIO.PList.PListBinaryReader.CurrentElementLength">
            <summary>
            Gets the length of the current element.
            </summary>
            <value>The length of the current element.</value>
        </member>
        <member name="M:AIO.PList.PListBinaryReader.ReadInternal(System.Int32)">
            <summary>
            Reads the <see cref="T:CE.iPhone.IPListElemnet"/> at the specified idx.
            </summary>
            <param name="elemIdx">The elem idx.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElemnet"/> at the specified idx.</returns>
        </member>
        <member name="M:AIO.PList.PListBinaryReader.ReadInternal">
            <summary>
            Reads the <see cref="T:CE.iPhone.IPListElemnet"/> at the current stream position.
            </summary>
            <returns>The <see cref="T:CE.iPhone.IPListElemnet"/> at the current stream position.</returns>
        </member>
        <member name="T:AIO.PList.PListBinaryWriter">
            <summary>
            A class, used to write a <see cref="T:CE.iPhone.IPListElemnet"/>  binary formated to a stream
            </summary>
        </member>
        <member name="F:AIO.PList.PListBinaryWriter.s_PListHeader">
            <summary>
            The Header (bplist00)
            </summary>
        </member>
        <member name="P:AIO.PList.PListBinaryWriter.BaseStream">
            <summary>
            Gets the basestream.
            </summary>
            <value>The basestream.</value>
        </member>
        <member name="P:AIO.PList.PListBinaryWriter.ElementIdxSize">
            <summary>
            Gets or sets the size of the element idx.
            </summary>
            <value>The size of the element idx.</value>
        </member>
        <member name="P:AIO.PList.PListBinaryWriter.Offsets">
            <summary>
            Gets the offset table.
            </summary>
            <value>The offset table.</value>
        </member>
        <member name="M:AIO.PList.PListBinaryWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListBinaryWriter"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListBinaryWriter.Write(System.IO.Stream,AIO.PList.IPListElement)">
            <summary>
            Writers a <see cref="T:CE.iPhone.IPListElemnet"/> to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:AIO.PList.PListBinaryWriter.FormatIdx(System.Int32)">
            <summary>
            Formats an element idx based on the ElementIdxSize.
            </summary>
            <param name="idx">The idx.</param>
            <returns>The formated idx.</returns>
        </member>
        <member name="M:AIO.PList.PListBinaryWriter.WriteInternal(AIO.PList.IPListElement)">
            <summary>
            Writers a <see cref="T:CE.iPhone.IPListElemnet"/> to the current stream position
            </summary>
            <param name="element">The element.</param>
            <returns>The Inx of the written element</returns>
        </member>
        <member name="T:AIO.PList.PListArray">
            <summary>
            Represents an array of an <see cref="T:CE.iPhone.IPListElement"/> objects
            </summary>
        </member>
        <member name="P:AIO.PList.PListArray.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListArray.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListArray.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.PListArray.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListArray.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListArray.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListArray.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListArray.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListArray.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListArray.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PList.PListDict">
            <summary>
            Represents an dictionary with <see cref="T:System.String"/> keys and <see cref="T:CE.iPhone.IPListElement"/> values
            </summary>
        </member>
        <member name="P:AIO.PList.PListDict.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListDict.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListDict.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.PListDict.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDict.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDict.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDict.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDict.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListDict.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListDict.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PList.PListElement`1">
            <summary>
            An abstract base class for primitive PList types
            </summary>
            <typeparam name="T">The .Net equivalent to the PList type</typeparam>
        </member>
        <member name="P:AIO.PList.PListElement`1.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListElement`1.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListElement`1.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AIO.PList.PListElement`1.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListElement`1.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a
            custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/>
            to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListElement`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:AIO.PList.PListElement`1.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListElement`1.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>The XML String representation of the Value.</returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.op_Implicit(AIO.PList.PListElement{`0})~`0">
            <summary>
            </summary>
            <param name="element">The elem.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListElement`1.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListElement`1.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListElement`1.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListElement`1.Equals(AIO.PList.IPListElement)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListElement`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIO.PList.PListElementFactory">
            <summary>
            Singleton class which generates concrete <see cref="T:CE.iPhone.IPListElement"/> from the Tag or TypeCode
            </summary>
        </member>
        <member name="P:AIO.PList.PListElementFactory.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:AIO.PList.PListElementFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListElementFactory"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListElementFactory.Register``1(``0)">
            <summary>
            Registers the specified element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
        </member>
        <member name="M:AIO.PList.PListElementFactory.Register``1(System.String,System.Byte,``0)">
            <summary>
            Registers the specified element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag">The tag.</param>
            <param name="typeCode">The type code.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:AIO.PList.PListElementFactory.Create(System.Byte,System.Int32)">
            <summary>
            Creates a concrete <see cref="T:CE.iPhone.IPListElement"/> object secified specified by it's typecode.
            </summary>
            <param name="typeCode">The typecode of the element.</param>
            <param name="length">The length of the element
            (required only for <see cref="T:CE.iPhone.PListBool"/>, <see cref="T:CE.iPhone.PListNull"/> and <see cref="T:CE.iPhone.PListFill"/>).</param>
            <returns>The created <see cref="T:CE.iPhone.IPListElement"/> object</returns>
        </member>
        <member name="M:AIO.PList.PListElementFactory.Create(System.String)">
            <summary>
            Creates a concrete <see cref="T:CE.iPhone.IPListElement"/> object secified specified by it's tag.
            </summary>
            <param name="tag">The tag of the element.</param>
            <returns>The created <see cref="T:CE.iPhone.IPListElement"/> object</returns>
        </member>
        <member name="M:AIO.PList.PListElementFactory.CreateLengthElement(System.Int32)">
            <summary>
            Creates a <see cref="T:CE.iPhone.IPListElement"/> object used for exteded length information.
            </summary>
            <param name="length">The exteded length information.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElement"/> object used for exteded length information.</returns>
        </member>
        <member name="M:AIO.PList.PListElementFactory.CreateKeyElement(System.String)">
            <summary>
            Creates a <see cref="T:CE.iPhone.IPListElement"/> object used for dictionary keys.
            </summary>
            <param name="key">The key.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElement"/> object used for dictionary keys.</returns>
        </member>
        <member name="T:AIO.PList.PListException">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:AIO.PList.PListFormatException">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListFormatException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListFormatException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListFormatException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:AIO.PList.PListFormat">
            <summary>
            The Format of a PList File
            </summary>
        </member>
        <member name="F:AIO.PList.PListFormat.Binary">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.PList.PListFormat.Xml">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIO.PList.PListBool">
            <summary>
            Represents a Boolean Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListBool.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListBool.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListBool.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AIO.PList.PListBool.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListBool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListBool"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListBool.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListBool"/> class.
            </summary>
            <param name="value">The Value of this element</param>
        </member>
        <member name="M:AIO.PList.PListBool.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListBool.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:AIO.PList.PListBool.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListBool.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListBool.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListBool.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListBool.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListData">
            <summary>
            Represents a Byte[] Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListData.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListData.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListData.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListData"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListData"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:AIO.PList.PListData.Parse(System.String)">
            <summary>
            Parses the specified value from a given String (encoded as Base64), read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListData.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value (encoded as Base64).
            </returns>
        </member>
        <member name="M:AIO.PList.PListData.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListData.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListData.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListDate">
            <summary>
            Represents a DateTime Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListDate.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListDate.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListDate.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListDate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListDate"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListDate.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListDate"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:AIO.PList.PListDate.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListDate.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListDate.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDate.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDate.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListFill">
            <summary>
            Represents a fill element in a PList
            </summary>
            <remarks>Is skipped in Xml-Serialization</remarks>
        </member>
        <member name="P:AIO.PList.PListFill.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListFill.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListFill.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.PListFill.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListFill.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListFill.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListFill.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListFill.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListFill.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListFill.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PList.PListInteger">
            <summary>
            Represents an integer Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListInteger.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListInteger.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListInteger.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListInteger"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListInteger.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListInteger"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:AIO.PList.PListInteger.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListInteger.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListInteger.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListInteger.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListInteger.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListNull">
            <summary>
            Represents a null element in a PList
            </summary>
            <remarks>Is skipped in Xml-Serialization</remarks>
        </member>
        <member name="P:AIO.PList.PListNull.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListNull.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListNull.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.PListNull.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListNull.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListNull.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListNull.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListNull.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListNull.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListNull.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PList.PListReal">
            <summary>
            Represents a double Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListReal.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListReal.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListReal.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListReal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListReal"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListReal.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListReal"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:AIO.PList.PListReal.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListReal.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListReal.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListReal.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListReal.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListString">
            <summary>
            Represents an string Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListString.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListString.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="M:AIO.PList.PListString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListString"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:AIO.PList.PListString.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListString.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListString.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListString.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListString.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListString.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListString.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.PList.PListString.Equals(System.Object)">
            <summary>
            比较
            </summary>
        </member>
        <member name="M:AIO.PList.PListString.op_Equality(AIO.PList.PListString,AIO.PList.PListString)">
            <summary>
            相等
            </summary>
        </member>
        <member name="M:AIO.PList.PListString.op_Inequality(AIO.PList.PListString,AIO.PList.PListString)">
            <summary>
            不相等
            </summary>
        </member>
        <member name="M:AIO.PList.PListString.op_Implicit(System.String)~AIO.PList.PListString">
            <summary>
            隐式转换
            </summary>
        </member>
        <member name="T:AIO.PList.PListRoot">
            <summary>
            Represents a PList File
            </summary>
        </member>
        <member name="P:AIO.PList.PListRoot.Format">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:AIO.PList.PListRoot"/> is stored in binary format.
            </summary>
            <value><c>true</c> if stored in binary format; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:AIO.PList.PListRoot.Load(System.String)">
            <summary>
            Loads the PList from specified file.
            </summary>
            <param name="fileName">The path of the PList.</param>
            <returns>A <see cref="T:AIO.PList.PListRoot"/> object loaded from the file</returns>
        </member>
        <member name="M:AIO.PList.PListRoot.Load(System.IO.Stream)">
            <summary>
            Loads the PList from specified stream.
            </summary>
            <param name="stream">The stream containing the PList.</param>
            <returns>A <see cref="T:AIO.PList.PListRoot"/> object loaded from the stream</returns>
        </member>
        <member name="M:AIO.PList.PListRoot.Save(System.String,AIO.PList.PListFormat)">
            <summary>
            Saves the PList to the specified path.
            </summary>
            <param name="fileName">The path of the PList.</param>
            <param name="format">The format of the PList (Binary/Xml).</param>
        </member>
        <member name="M:AIO.PList.PListRoot.Save(System.String)">
            <summary>
            Saves the PList to the specified path.
            </summary>
            <param name="fileName">The path of the PList.</param>
        </member>
        <member name="M:AIO.PList.PListRoot.Save(System.IO.Stream)">
            <summary>
            Saves the PList to the specified stream.
            </summary>
            <param name="stream">The stream in which the PList is saves.</param>
        </member>
        <member name="M:AIO.PList.PListRoot.Save(System.IO.Stream,AIO.PList.PListFormat)">
            <summary>
            Saves the PList to the specified stream.
            </summary>
            <param name="stream">The stream in which the PList is saves.</param>
            <param name="format">The format of the PList (Binary/Xml).</param>
        </member>
        <member name="P:AIO.PList.PListRoot.Root">
            <summary>
            Gets or sets the root PList-Element.
            </summary>
            <value>The root PList-Element.</value>
        </member>
        <member name="M:AIO.PList.PListRoot.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a
            custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/>
            to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListRoot.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListRoot.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.DoNotSerializeAttribute">
            <summary>
            无序列化
            </summary>
        </member>
        <member name="M:AIO.DoNotSerializeAttribute.#ctor">
            <summary>
            无序列化
            </summary>
        </member>
        <member name="T:AIO.fsForwardAttribute">
            <summary>
            This allows you to forward serialization of an object to one of its
            members. For example,
            [fsForward("Values")]
            struct Wrapper {
            public int[] Values;
            }
            Then `Wrapper` will be serialized into a JSON array of integers. It will
            be as if `Wrapper` doesn't exist.
            </summary>
        </member>
        <member name="M:AIO.fsForwardAttribute.#ctor(System.String)">
            <summary>
            Forward object serialization to an instance member. See class
            comment.
            </summary>
            <param name="memberName">
            The name of the member that we should serialize this object as.
            </param>
        </member>
        <member name="F:AIO.fsForwardAttribute.MemberName">
            <summary>
            The name of the member we should serialize as.
            </summary>
        </member>
        <member name="T:AIO.fsIgnoreAttribute">
            <summary>
            用[JsonIgnore]注释的给定属性或字段将不会被序列化。
            </summary>
        </member>
        <member name="T:AIO.fsObjectAttribute">
            <summary>
            此属性控制类型的某些序列化行为
            </summary>
        </member>
        <member name="M:AIO.fsObjectAttribute.#ctor">
            <summary>
            此属性控制类型的某些序列化行为
            </summary>
        </member>
        <member name="M:AIO.fsObjectAttribute.#ctor(System.String@,System.Type[])">
            <summary>
            此属性控制类型的某些序列化行为
            </summary>
        </member>
        <member name="F:AIO.fsObjectAttribute.PreviousModels">
            <summary>
            The previous model that should be used if an old version of this
            object is encountered. Using this attribute also requires that the
            type have a public constructor that takes only one parameter, an
            object instance of the given type. Use of this parameter *requires*
            that the VersionString parameter is also set.
            </summary>
        </member>
        <member name="F:AIO.fsObjectAttribute.VersionString">
            <summary>
            The version string to use for this model. This should be unique among
            all prior versions of this model that is supported for importation.
            If PreviousModel is set, then this attribute must also be set. A good
            valid example for this is "v1", "v2", "v3", ...
            </summary>
        </member>
        <member name="F:AIO.fsObjectAttribute.MemberSerialization">
            <summary>
            This controls the behavior for member serialization. The default
            behavior is fsMemberSerialization.Default.
            </summary>
        </member>
        <member name="F:AIO.fsObjectAttribute.Converter">
            <summary>
            Specify a custom converter to use for serialization. The converter
            type needs to derive from fsBaseConverter. This defaults to null.
            </summary>
        </member>
        <member name="F:AIO.fsObjectAttribute.Processor">
            <summary>
            Specify a custom processor to use during serialization. The processor
            type needs to derive from fsObjectProcessor and the call to
            CanProcess is not invoked. This defaults to null.
            </summary>
        </member>
        <member name="T:AIO.fsPropertyAttribute">
            <summary>
            显式地标记要序列化的属性。这也可用于指定属性在序列化期间应该使用的名称。
            </summary>
        </member>
        <member name="M:AIO.fsPropertyAttribute.#ctor">
            <summary>
            属性
            </summary>
        </member>
        <member name="M:AIO.fsPropertyAttribute.#ctor(System.String@)">
            <summary>
            属性
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="F:AIO.fsPropertyAttribute.Name">
            <summary>
            属性将在JSON序列化中使用的名称。
            </summary>
        </member>
        <member name="F:AIO.fsPropertyAttribute.Converter">
            <summary>
            为给定类型使用自定义转换器。指定要使用的转换器使用typeof。
            </summary>
        </member>
        <member name="T:AIO.SerializeAsAttribute">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.SerializeAsAttribute.#ctor(System.String@)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:AIO.SerializeAttribute">
            <summary>
            序列化属性
            </summary>
        </member>
        <member name="M:AIO.SerializeAttribute.#ctor">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:AIO.fsDataType">
            <summary>
            JsonData 实例可以存储的实际类型。
            </summary>
        </member>
        <member name="F:AIO.fsDataType.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:AIO.fsDataType.Object">
            <summary>
            对象
            </summary>
        </member>
        <member name="F:AIO.fsDataType.Double">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:AIO.fsDataType.Int64">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:AIO.fsDataType.Boolean">
            <summary>
            布尔值
            </summary>
        </member>
        <member name="F:AIO.fsDataType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AIO.fsDataType.Null">
            <summary>
            空值
            </summary>
        </member>
        <member name="T:AIO.fsMemberSerialization">
            <summary>
            Controls how the reflected converter handles member serialization.
            </summary>
        </member>
        <member name="F:AIO.fsMemberSerialization.OptIn">
            <summary>
            Only members with [SerializeField] or [fsProperty] attributes are
            serialized.
            </summary>
        </member>
        <member name="F:AIO.fsMemberSerialization.OptOut">
            <summary>
            Only members with [NotSerialized] or [fsIgnore] will not be
            serialized.
            </summary>
        </member>
        <member name="F:AIO.fsMemberSerialization.Default">
            <summary>
            The default member serialization behavior is applied.
            </summary>
        </member>
        <member name="T:AIO.fsDuplicateVersionNameException">
            <summary>
            出现多个相同类型
            </summary>
        </member>
        <member name="M:AIO.fsDuplicateVersionNameException.#ctor(System.Type,System.Type,System.String)">
            <summary>
            出现多个相同类型
            </summary>
        </member>
        <member name="T:AIO.fsMissingVersionConstructorException">
            <summary>
            缺少一个数据的构造类型
            </summary>
        </member>
        <member name="M:AIO.fsMissingVersionConstructorException.#ctor(System.Type@,System.Type@)">
            <summary>
            缺少一个数据的构造类型
            </summary>
        </member>
        <member name="M:AIO.fsTypeExtensions.CSharpName(System.Type,System.Boolean)">
            <summary>
            Returns a pretty name for the type in the style of one that you'd see
            in C#.
            </summary>
            <parparam name="includeNamespace">
            Should the name include namespaces?
            </parparam>
        </member>
        <member name="T:AIO.fsISerializationCallbacks">
            <summary>
            Extend this interface on your type to receive notifications about
            serialization/deserialization events. If you don't have access to the
            type itself, then you can write an fsObjectProcessor instead.
            </summary>
        </member>
        <member name="M:AIO.fsISerializationCallbacks.OnBeforeSerialize(System.Type)">
            <summary>
            Called before serialization.
            </summary>
        </member>
        <member name="M:AIO.fsISerializationCallbacks.OnAfterSerialize(System.Type,AIO.fsData@)">
            <summary>
            Called after serialization.
            </summary>
            <param name="storageType">
            The field/property type that is storing the instance.
            </param>
            <param name="data">The data that was serialized.</param>
        </member>
        <member name="M:AIO.fsISerializationCallbacks.OnBeforeDeserialize(System.Type,AIO.fsData@)">
            <summary>
            Called before deserialization.
            </summary>
            <param name="storageType">
            The field/property type that is storing the instance.
            </param>
            <param name="data">
            The data that will be used for deserialization.
            </param>
        </member>
        <member name="M:AIO.fsISerializationCallbacks.OnAfterDeserialize(System.Type)">
            <summary>
            Called after deserialization.
            </summary>
            <param name="storageType">
            The field/property type that is storing the instance.
            </param>
            <param name="instance">The type of the instance.</param>
        </member>
        <member name="T:AIO.IOptimizedAccessor">
            <summary>
            优化访问器
            </summary>
        </member>
        <member name="M:AIO.IOptimizedAccessor.Compile">
            <summary>
            编译器
            </summary>
        </member>
        <member name="M:AIO.IOptimizedAccessor.GetValue(System.Object@)">
            <summary>
            获取值
            </summary>
            <param name="target">参数</param>
            <returns>值</returns>
        </member>
        <member name="M:AIO.IOptimizedAccessor.SetValue(System.Object@,System.Object@)">
            <summary>
            设置值
            </summary>
            <param name="target">目标值</param>
            <param name="value">设置值</param>
        </member>
        <member name="T:AIO.IOptimizedInvoker">
            <summary>
            优化调用
            </summary>
        </member>
        <member name="M:AIO.IOptimizedInvoker.Compile">
            <summary>
            编译
            </summary>
        </member>
        <member name="M:AIO.IOptimizedInvoker.Invoke(System.Object@)">
            <summary>
            调用
            </summary>
        </member>
        <member name="M:AIO.IOptimizedInvoker.Invoke(System.Object@,System.Object@)">
            <summary>
            调用
            </summary>
        </member>
        <member name="M:AIO.IOptimizedInvoker.Invoke(System.Object@,System.Object@,System.Object@)">
            <summary>
            调用
            </summary>
        </member>
        <member name="M:AIO.IOptimizedInvoker.Invoke(System.Object@,System.Object@,System.Object@,System.Object@)">
            <summary>
            调用
            </summary>
        </member>
        <member name="M:AIO.IOptimizedInvoker.Invoke(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)">
            <summary>
            调用
            </summary>
        </member>
        <member name="M:AIO.IOptimizedInvoker.Invoke(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)">
            <summary>
            调用
            </summary>
        </member>
        <member name="M:AIO.IOptimizedInvoker.Invoke(System.Object@,System.Object[])">
            <summary>
            调用
            </summary>
        </member>
        <member name="T:AIO.fsAotCompilationManager">
            <summary>
            The AOT compilation manager
            </summary>
        </member>
        <member name="P:AIO.fsAotCompilationManager.AvailableAotCompilations">
            <summary>
            Ahead of time compilations that are available. The type maps to the
            object type the generated converter will serialize/deserialize, and
            the string is the text content for a converter that will do the
            serialization.
            <para />
            The generated serializer is completely independent and you don't need
            to do anything. Simply add the file to your project and it'll get
            used instead of the reflection based one.
            </summary>
        </member>
        <member name="M:AIO.fsAotCompilationManager.TryToPerformAotCompilation(AIO.fsConfig,System.Type,System.String@)">
            <summary>
            This is a helper method that makes it simple to run an AOT
            compilation on the given type.
            </summary>
            <param name="config">
            The configuration to use when running AOT compilation.
            </param>
            <param name="type">
            The type to perform the AOT compilation on.
            </param>
            <param name="aotCompiledClassInCSharp">
            The AOT class. Add this C# code to your project.
            </param>
            <returns>True if AOT compilation was successful.</returns>
        </member>
        <member name="M:AIO.fsAotCompilationManager.AddAotCompilation(System.Type,AIO.fsMetaProperty[],System.Boolean)">
            <summary>
            Adds a new AOT compilation unit.
            </summary>
            <param name="type">The type of object we are AOT compiling.</param>
            <param name="members">
            The members on the object which will be serialized/deserialized.
            </param>
        </member>
        <member name="M:AIO.fsAotCompilationManager.GenerateDirectConverterForTypeInCSharp(System.Type,AIO.fsMetaProperty[],System.Boolean)">
            <summary>
            AOT compiles the object (in C#).
            </summary>
        </member>
        <member name="T:AIO.fsBaseConverter">
            <summary>
            The serialization converter allows for customization of the serialization
            process.
            </summary>
            <remarks>
            You do not want to derive from this class - there is no way to actually
            use it within the serializer.. Instead, derive from either fsConverter or
            fsDirectConverter
            </remarks>
        </member>
        <member name="F:AIO.fsBaseConverter.Serializer">
            <summary>
            The serializer that was owns this converter.
            </summary>
        </member>
        <member name="M:AIO.fsBaseConverter.CreateInstance(AIO.fsData@,System.Type@)">
            <summary>
            Construct an object instance that will be passed to TryDeserialize.
            This should **not** deserialize the object.
            </summary>
            <param name="data">The data the object was serialized with.</param>
            <param name="storageType">
            The field/property type that is storing the instance.
            </param>
            <returns>An object instance</returns>
        </member>
        <member name="M:AIO.fsBaseConverter.RequestCycleSupport(System.Type@)">
            <summary>
            If true, then the serializer will support cyclic references with the
            given converted type.
            </summary>
            <param name="storageType">
            The field/property type that is currently storing the object that is
            being serialized.
            </param>
        </member>
        <member name="M:AIO.fsBaseConverter.RequestInheritanceSupport(System.Type@)">
            <summary>
            If true, then the serializer will include inheritance data for the
            given converter.
            </summary>
            <param name="storageType">
            The field/property type that is currently storing the object that is
            being serialized.
            </param>
        </member>
        <member name="M:AIO.fsBaseConverter.TrySerialize(System.Object@,AIO.fsData@,System.Type@)">
            <summary>
            Serialize the actual object into the given data storage.
            </summary>
            <param name="instance">
            The object instance to serialize. This will never be null.
            </param>
            <param name="serialized">The serialized state.</param>
            <param name="storageType">
            The field/property type that is storing this instance.
            </param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:AIO.fsBaseConverter.TryDeserialize(AIO.fsData@,System.Object@,System.Type@)">
            <summary>
            Deserialize data into the object instance.
            </summary>
            <param name="data">Serialization data to deserialize from.</param>
            <param name="instance">
            The object instance to deserialize into.
            </param>
            <param name="storageType">
            The field/property type that is storing the instance.
            </param>
            <returns>
            True if serialization was successful, false otherwise.
            </returns>
        </member>
        <member name="M:AIO.fsBaseConverter.FailExpectedType(AIO.fsData@,AIO.fsDataType[])">
            <summary>
            检查预期类型
            </summary>
        </member>
        <member name="M:AIO.fsBaseConverter.CheckType(AIO.fsData@,AIO.fsDataType@)">
            <summary>
            检查类型
            </summary>
        </member>
        <member name="M:AIO.fsBaseConverter.CheckKey(AIO.fsData@,System.String@,AIO.fsData@)">
            <summary>
            检查Key值
            </summary>
        </member>
        <member name="M:AIO.fsBaseConverter.CheckKey(System.Collections.Generic.IDictionary{System.String,AIO.fsData}@,System.String@,AIO.fsData@)">
            <summary>
            检查Key值
            </summary>
        </member>
        <member name="M:AIO.fsBaseConverter.SerializeMember``1(System.Collections.Generic.IDictionary{System.String,AIO.fsData}@,System.Type@,System.String@,``0@)">
            <summary>
            序列化成员
            </summary>
        </member>
        <member name="M:AIO.fsBaseConverter.DeserializeMember``1(System.Collections.Generic.IDictionary{System.String,AIO.fsData}@,System.Type@,System.String@,``0@)">
            <summary>
            反序列化成员
            </summary>
        </member>
        <member name="T:AIO.fsConfig">
            <summary>
            Enables some top-level customization of Full Serializer.
            </summary>
        </member>
        <member name="F:AIO.fsConfig.SerializeAttributes">
            <summary>
            The attributes that will force a field or property to be serialized.
            </summary>
        </member>
        <member name="F:AIO.fsConfig.IgnoreSerializeAttributes">
            <summary>
            The attributes that will force a field or property to *not* be
            serialized.
            </summary>
        </member>
        <member name="F:AIO.fsConfig.DefaultMemberSerialization">
            <summary>
            The default member serialization.
            </summary>
        </member>
        <member name="F:AIO.fsConfig.GetJsonNameFromMemberName">
            <summary>
            Convert a C# field/property name into the key used for the JSON
            object. For example, you could force all JSON names to lowercase
            with:
            fsConfig.GetJsonNameFromMemberName = (name, info) =&gt;
            name.ToLower();
            This will only be used when the name is not explicitly specified with
            fsProperty.
            </summary>
        </member>
        <member name="F:AIO.fsConfig.EnablePropertySerialization">
            <summary>
            If false, then *all* property serialization support will be disabled
            - even properties explicitly annotated with fsProperty or any other
            opt-in annotation.
            Setting this to false means that SerializeNonAutoProperties and
            SerializeNonPublicSetProperties will be completely ignored.
            </summary>
        </member>
        <member name="F:AIO.fsConfig.SerializeNonAutoProperties">
            <summary>
            Should the default serialization behaviour include non-auto
            properties?
            </summary>
        </member>
        <member name="F:AIO.fsConfig.SerializeNonPublicSetProperties">
            <summary>
            Should the default serialization behaviour include properties with
            non-public setters?
            </summary>
        </member>
        <member name="F:AIO.fsConfig.CustomDateTimeFormatString">
            <summary>
            If not null, this string format will be used for DateTime instead of
            the default one.
            </summary>
        </member>
        <member name="F:AIO.fsConfig.Serialize64BitIntegerAsString">
            <summary>
            Int64 and UInt64 will be serialized and deserialized as string for
            compatibility
            </summary>
        </member>
        <member name="F:AIO.fsConfig.SerializeEnumsAsInteger">
            <summary>
            Enums are serialized using their names by default. Setting this to
            true will serialize them as integers instead.
            </summary>
        </member>
        <member name="T:AIO.fsContext">
            <summary>
            fsContext stores global metadata that can be used to customize how
            fsConverters operate during serialization.
            </summary>
        </member>
        <member name="F:AIO.fsContext._contextObjects">
            <summary>
            All of the context objects.
            </summary>
        </member>
        <member name="M:AIO.fsContext.Reset">
            <summary>
            Removes all context objects from the context.
            </summary>
        </member>
        <member name="M:AIO.fsContext.Set``1(``0@)">
            <summary>
            Sets the context object for the given type with the given value.
            </summary>
        </member>
        <member name="M:AIO.fsContext.Has``1">
            <summary>
            Returns true if there is a context object for the given type.
            </summary>
        </member>
        <member name="M:AIO.fsContext.Get``1">
            <summary>
            Fetches the context object for the given type.
            </summary>
        </member>
        <member name="T:AIO.fsConverter">
            <summary>
            The serialization converter allows for customization of the serialization
            process.
            </summary>
        </member>
        <member name="M:AIO.fsConverter.CanProcess(System.Type@)">
            <summary>
            Can this converter serialize and deserialize the given object type?
            </summary>
            <param name="type">The given object type.</param>
            <returns>
            True if the converter can serialize it, false otherwise.
            </returns>
        </member>
        <member name="T:AIO.fsConverterRegistrar">
            <summary>
            This class allows arbitrary code to easily register global converters. To
            add a converter, simply declare a new field called "Register_*" that
            stores the type of converter you would like to add. Alternatively, you
            can do the same with a method called "Register_*"; just add the converter
            type to the `Converters` list.
            </summary>
        </member>
        <member name="F:AIO.fsConverterRegistrar.Converters">
            <summary>
            转化类型列表
            </summary>
        </member>
        <member name="T:AIO.fsCyclicReferenceManager">
            <summary>
            轮询引用管理
            </summary>
        </member>
        <member name="M:AIO.fsCyclicReferenceManager.Enter">
            <summary>
            进入
            </summary>
        </member>
        <member name="M:AIO.fsCyclicReferenceManager.Exit">
            <summary>
            退出
            </summary>
        </member>
        <member name="M:AIO.fsCyclicReferenceManager.GetReferenceObject(System.Int32@)">
            <summary>
            获取引用对象
            </summary>
        </member>
        <member name="M:AIO.fsCyclicReferenceManager.AddReferenceWithId(System.Int32@,System.Object@)">
            <summary>
            添加引用对象ID
            </summary>
        </member>
        <member name="M:AIO.fsCyclicReferenceManager.GetReferenceId(System.Object@)">
            <summary>
            获取引用对象ID
            </summary>
        </member>
        <member name="M:AIO.fsCyclicReferenceManager.IsReference(System.Object@)">
            <summary>
            是否为引用
            </summary>
        </member>
        <member name="M:AIO.fsCyclicReferenceManager.MarkSerialized(System.Object@)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:AIO.fsData">
            <summary>
            A union type that stores a serialized value. The stored type can be one
            of six different
            types: null, boolean, double, Int64, string, Dictionary, or List.
            </summary>
        </member>
        <member name="F:AIO.fsData._value">
            <summary>
            The raw value that this serialized data stores. It can be one of six
            different types; a boolean, a double, Int64, a string, a Dictionary,
            or a List.
            </summary>
        </member>
        <member name="M:AIO.fsData.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AIO.fsData.#ctor">
            <summary>
            Creates a fsData instance that holds null.
            </summary>
        </member>
        <member name="M:AIO.fsData.#ctor(System.Boolean)">
            <summary>
            Creates a fsData instance that holds a boolean.
            </summary>
        </member>
        <member name="M:AIO.fsData.#ctor(System.Double)">
            <summary>
            Creates a fsData instance that holds a double.
            </summary>
        </member>
        <member name="M:AIO.fsData.#ctor(System.Int64)">
            <summary>
            Creates a new fsData instance that holds an integer.
            </summary>
        </member>
        <member name="M:AIO.fsData.#ctor(System.String)">
            <summary>
            Creates a fsData instance that holds a string.
            </summary>
        </member>
        <member name="M:AIO.fsData.#ctor(System.Collections.Generic.Dictionary{System.String,AIO.fsData})">
            <summary>
            Creates a fsData instance that holds a dictionary of values.
            </summary>
        </member>
        <member name="M:AIO.fsData.#ctor(System.Collections.Generic.List{AIO.fsData})">
            <summary>
            Creates a fsData instance that holds a list of values.
            </summary>
        </member>
        <member name="M:AIO.fsData.CreateDictionary">
            <summary>
            Helper method to create a fsData instance that holds a dictionary.
            </summary>
        </member>
        <member name="M:AIO.fsData.CreateList">
            <summary>
            Helper method to create a fsData instance that holds a list.
            </summary>
        </member>
        <member name="M:AIO.fsData.CreateList(System.Int32)">
            <summary>
            Helper method to create a fsData instance that holds a list with the
            initial capacity.
            </summary>
        </member>
        <member name="F:AIO.fsData.True">
            <summary>
            Ture
            </summary>
        </member>
        <member name="F:AIO.fsData.False">
            <summary>
            False
            </summary>
        </member>
        <member name="F:AIO.fsData.Null">
            <summary>
            Null
            </summary>
        </member>
        <member name="M:AIO.fsData.BecomeDictionary">
            <summary>
            Transforms the internal fsData instance into a dictionary.
            </summary>
        </member>
        <member name="M:AIO.fsData.Clone">
            <summary>
            Returns a shallow clone of this data instance.
            </summary>
        </member>
        <member name="P:AIO.fsData.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:AIO.fsData.IsNull">
            <summary>
            Returns true if this fsData instance maps back to null.
            </summary>
        </member>
        <member name="P:AIO.fsData.IsDouble">
            <summary>
            Returns true if this fsData instance maps back to a double.
            </summary>
        </member>
        <member name="P:AIO.fsData.IsInt64">
            <summary>
            Returns true if this fsData instance maps back to an Int64.
            </summary>
        </member>
        <member name="P:AIO.fsData.IsBool">
            <summary>
            Returns true if this fsData instance maps back to a boolean.
            </summary>
        </member>
        <member name="P:AIO.fsData.IsString">
            <summary>
            Returns true if this fsData instance maps back to a string.
            </summary>
        </member>
        <member name="P:AIO.fsData.IsDictionary">
            <summary>
            Returns true if this fsData instance maps back to a Dictionary.
            </summary>
        </member>
        <member name="P:AIO.fsData.IsList">
            <summary>
            Returns true if this fsData instance maps back to a List.
            </summary>
        </member>
        <member name="P:AIO.fsData.AsDouble">
            <summary>
            Casts this fsData to a double. Throws an exception if it is not a
            double.
            </summary>
        </member>
        <member name="P:AIO.fsData.AsInt64">
            <summary>
            Casts this fsData to an Int64. Throws an exception if it is not an
            Int64.
            </summary>
        </member>
        <member name="P:AIO.fsData.AsBool">
            <summary>
            Casts this fsData to a boolean. Throws an exception if it is not a
            boolean.
            </summary>
        </member>
        <member name="P:AIO.fsData.AsString">
            <summary>
            Casts this fsData to a string. Throws an exception if it is not a
            string.
            </summary>
        </member>
        <member name="P:AIO.fsData.AsDictionary">
            <summary>
            Casts this fsData to a Dictionary. Throws an exception if it is not a
            Dictionary.
            </summary>
        </member>
        <member name="P:AIO.fsData.AsList">
            <summary>
            Casts this fsData to a List. Throws an exception if it is not a List.
            </summary>
        </member>
        <member name="M:AIO.fsData.Cast``1">
            <summary>
            Internal helper method to cast the underlying storage to the given
            type or throw a pretty printed exception on failure.
            </summary>
        </member>
        <member name="M:AIO.fsData.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current
            object.
            </summary>
        </member>
        <member name="M:AIO.fsData.Equals(AIO.fsData)">
            <summary>
            Determines whether the specified object is equal to the current
            object.
            </summary>
        </member>
        <member name="M:AIO.fsData.op_Equality(AIO.fsData,AIO.fsData)">
            <summary>
            Returns true iff a == b.
            </summary>
        </member>
        <member name="M:AIO.fsData.op_Inequality(AIO.fsData,AIO.fsData)">
            <summary>
            Returns true iff a != b.
            </summary>
        </member>
        <member name="M:AIO.fsData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms
            and data structures like a hash table.
            </returns>
        </member>
        <member name="T:AIO.fsDateConverter">
            <summary>
            Supports serialization for DateTime, DateTimeOffset, and TimeSpan.
            </summary>
        </member>
        <member name="T:AIO.fsDirectConverter">
            <summary>
            The direct converter is similar to a regular converter, except that it
            targets specifically only one type. This means that it can be used
            without performance impact when discovering converters. It is strongly
            recommended that you derive from fsDirectConverter{TModel}.
            </summary>
            <remarks>
            Due to the way that direct converters operate, inheritance is *not*
            supported. Direct converters will only be used with the exact ModelType
            object.
            </remarks>
        </member>
        <member name="P:AIO.fsDirectConverter.ModelType">
            <summary>
            模块类型
            </summary>
        </member>
        <member name="T:AIO.fsDirectConverter`1">
            <inheritdoc/>
        </member>
        <member name="P:AIO.fsDirectConverter`1.ModelType">
            <inheritdoc/>
        </member>
        <member name="M:AIO.fsDirectConverter`1.TrySerialize(System.Object@,AIO.fsData@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.fsDirectConverter`1.TryDeserialize(AIO.fsData@,System.Object@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="T:AIO.fsEnumConverter">
            <summary>
            Serializes and deserializes enums by their current name.
            </summary>
        </member>
        <member name="M:AIO.fsEnumConverter.ArrayContains``1(System.Collections.Generic.IReadOnlyList{``0},``0)">
            <summary>
            Returns true if the given value is contained within the specified
            array.
            </summary>
        </member>
        <member name="T:AIO.fsGlobalConfig">
            <summary>
            Global configuration options.
            </summary>
        </member>
        <member name="F:AIO.fsGlobalConfig.IsCaseSensitive">
            <summary>
            Should deserialization be case sensitive? If this is false and the
            JSON has multiple members with the same keys only separated by case,
            then this results in undefined behavior.
            </summary>
        </member>
        <member name="F:AIO.fsGlobalConfig.AllowInternalExceptions">
            <summary>
            If exceptions are allowed internally, then additional date formats
            can be deserialized. Note that the Full Serializer public API will
            *not* throw exceptions with this enabled; errors will still be
            returned in a fsResult instance.
            </summary>
        </member>
        <member name="F:AIO.fsGlobalConfig.InternalFieldPrefix">
            <summary>
            This string will be used to prefix fields used internally by
            FullSerializer.
            </summary>
        </member>
        <member name="T:AIO.fsGuidConverter">
            <summary>
            Serializes and deserializes guids.
            </summary>
        </member>
        <member name="M:AIO.fsGuidConverter.CanProcess(System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.fsGuidConverter.RequestCycleSupport(System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.fsGuidConverter.RequestInheritanceSupport(System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.fsGuidConverter.TrySerialize(System.Object@,AIO.fsData@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.fsGuidConverter.TryDeserialize(AIO.fsData@,System.Object@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.fsGuidConverter.CreateInstance(AIO.fsData@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="T:AIO.fsIEnumerableConverter">
            <summary>
            Provides serialization support for anything which extends from
            `IEnumerable` and has an `Add` method.
            </summary>
        </member>
        <member name="M:AIO.fsIEnumerableConverter.GetElementType(System.Type)">
            <summary>
            Fetches the element type for objects inside of the collection.
            </summary>
        </member>
        <member name="T:AIO.fsJsonParser">
            <summary>
            A simple recursive descent parser for JSON.
            </summary>
        </member>
        <member name="M:AIO.fsJsonParser.SkipSpace">
            <summary>
            Skips input such that Character() will return a non-whitespace
            character
            </summary>
        </member>
        <member name="M:AIO.fsJsonParser.TryParseNumber(AIO.fsData@)">
            <summary>
            Parses numbers that follow the regular expression [-+](\d+|\d*\.\d*)
            </summary>
        </member>
        <member name="M:AIO.fsJsonParser.TryParseString(System.String@)">
            <summary>
            Parses a string
            </summary>
        </member>
        <member name="M:AIO.fsJsonParser.TryParseArray(AIO.fsData@)">
            <summary>
            Parses an array
            </summary>
        </member>
        <member name="M:AIO.fsJsonParser.Parse(System.String@,AIO.fsData@)">
            <summary>
            Parses the specified input. Returns a failure state if parsing
            failed.
            </summary>
            <param name="input">The input to parse.</param>
            <param name="data">
            The parsed data. This is undefined if parsing fails.
            </param>
            <returns>The parsed input.</returns>
        </member>
        <member name="M:AIO.fsJsonParser.Parse(System.String@)">
            <summary>
            Helper method for Parse that does not allow the error information to
            be recovered.
            </summary>
        </member>
        <member name="T:AIO.fsJsonPrinter">
            <summary>
            Json 输出
            </summary>
        </member>
        <member name="M:AIO.fsJsonPrinter.InsertSpacing(System.IO.TextWriter,System.Int32)">
            <summary>
            Inserts the given number of indents into the builder.
            </summary>
        </member>
        <member name="M:AIO.fsJsonPrinter.EscapeString(System.String)">
            <summary>
            Escapes a string.
            </summary>
        </member>
        <member name="M:AIO.fsJsonPrinter.BuildPrettyString(AIO.fsData,System.IO.TextWriter,System.Int32)">
            <summary>
            Formats this data into the given builder.
            </summary>
        </member>
        <member name="M:AIO.fsJsonPrinter.PrettyJson(AIO.fsData,System.IO.TextWriter)">
            <summary>
            Writes the pretty JSON output data to the given stream.
            </summary>
            <param name="data">The data to print.</param>
            <param name="outputStream">Where to write the printed data.</param>
        </member>
        <member name="M:AIO.fsJsonPrinter.PrettyJson(AIO.fsData)">
            <summary>
            Returns the data in a pretty printed JSON format.
            </summary>
        </member>
        <member name="M:AIO.fsJsonPrinter.CompressedJson(AIO.fsData,System.IO.StreamWriter)">
            <summary>
            Writes the compressed JSON output data to the given stream.
            </summary>
            <param name="data">The data to print.</param>
            <param name="outputStream">Where to write the printed data.</param>
        </member>
        <member name="M:AIO.fsJsonPrinter.CompressedJson(AIO.fsData)">
            <summary>
            Returns the data in a relatively compressed JSON format.
            </summary>
        </member>
        <member name="M:AIO.fsJsonPrinter.ConvertDoubleToString(System.Double)">
            <summary>
            Utility method that converts a double to a string.
            </summary>
        </member>
        <member name="T:AIO.fsMetaProperty">
            <summary>
            A property or field on a MetaType. This unifies the FieldInfo and
            PropertyInfo classes.
            </summary>
        </member>
        <member name="F:AIO.fsMetaProperty._memberInfo">
            <summary>
            Internal handle to the reflected member.
            </summary>
        </member>
        <member name="P:AIO.fsMetaProperty.StorageType">
            <summary>
            The type of value that is stored inside of the property. For example,
            for an int field, StorageType will be typeof(int).
            </summary>
        </member>
        <member name="P:AIO.fsMetaProperty.OverrideConverterType">
            <summary>
            A custom fsBaseConverter instance to use for this field/property, if
            requested. This will be null if the default converter selection
            algorithm should be used. This is specified using the [fsObject]
            annotation with the Converter field.
            </summary>
        </member>
        <member name="P:AIO.fsMetaProperty.CanRead">
            <summary>
            Can this property be read?
            </summary>
        </member>
        <member name="P:AIO.fsMetaProperty.CanWrite">
            <summary>
            Can this property be written to?
            </summary>
        </member>
        <member name="P:AIO.fsMetaProperty.JsonName">
            <summary>
            The serialized name of the property, as it should appear in JSON.
            </summary>
        </member>
        <member name="P:AIO.fsMetaProperty.MemberName">
            <summary>
            The name of the actual member.
            </summary>
        </member>
        <member name="P:AIO.fsMetaProperty.IsPublic">
            <summary>
            Is this member public?
            </summary>
        </member>
        <member name="P:AIO.fsMetaProperty.IsReadOnly">
            <summary>
            Is this type readonly? We can modify readonly properties using
            reflection, but not using generated C#.
            </summary>
        </member>
        <member name="M:AIO.fsMetaProperty.Write(System.Object@,System.Object@)">
            <summary>
            Writes a value to the property that this MetaProperty represents,
            using given object instance as the context.
            </summary>
        </member>
        <member name="M:AIO.fsMetaProperty.Read(System.Object@)">
            <summary>
            Reads a value from the property that this MetaProperty represents,
            using the given object instance as the context.
            </summary>
        </member>
        <member name="T:AIO.fsMetaType">
            <summary>
            MetaType contains metadata about a type. This is used by the reflection
            serializer.
            </summary>
        </member>
        <member name="P:AIO.fsMetaType.HasDefaultConstructor">
            <summary>
            Returns true if the type represented by this metadata contains a
            default constructor.
            </summary>
        </member>
        <member name="M:AIO.fsMetaType.EmitAotData">
            <summary>
            Attempt to emit an AOT compiled direct converter for this type.
            </summary>
            <returns>True if AOT data was emitted, false otherwise.</returns>
        </member>
        <member name="M:AIO.fsMetaType.CreateInstance">
            <summary>
            Creates a new instance of the type that this metadata points back to.
            If this type has a default constructor, then Activator.CreateInstance
            will be used to construct the type (or Array.CreateInstance if it an
            array). Otherwise, an uninitialized object created via
            FormatterServices.GetSafeUninitializedObject is used to construct the
            instance.
            </summary>
        </member>
        <member name="M:AIO.fsMetaType.ClearCache">
            <summary>
            Clears out the cached type results. Useful if some prior assumptions
            become invalid, ie, the default member serialization mode.
            </summary>
        </member>
        <member name="M:AIO.fsMetaType.CanSerializeProperty(AIO.fsConfig,System.Reflection.PropertyInfo,System.Reflection.MemberInfo[],System.Boolean)">
            <summary>
            Returns if the given property should be serialized.
            </summary>
            <param name="annotationFreeValue">
            Should a property without any annotations be serialized?
            </param>
        </member>
        <member name="T:AIO.fsNullableConverter">
            <summary>
            The reflected converter will properly serialize nullable types. However,
            we do it here instead as we can emit less serialization data.
            </summary>
        </member>
        <member name="T:AIO.fsObjectProcessor">
            <summary>
                <para>
                Enables injecting code before/after an object has been serialized. This
                is most useful if you want to run the default serialization process but
                apply a pre/post processing step.
                </para>
                <para>
                Multiple object processors can be active at the same time. When running
                they are called in a "nested" fashion - if we have processor1 and
                process2 added to the serializer in that order (p1 then p2), then the
                execution order will be p1#Before p2#Before /serialization/ p2#After
                p1#After.
                </para>
            </summary>
        </member>
        <member name="M:AIO.fsObjectProcessor.CanProcess(System.Type@)">
            <summary>
            Is the processor interested in objects of the given type?
            </summary>
            <param name="type">The given type.</param>
            <returns>
            True if the processor should be applied, false otherwise.
            </returns>
        </member>
        <member name="M:AIO.fsObjectProcessor.OnBeforeSerialize(System.Type@,System.Object@)">
            <summary>
            Called before serialization.
            </summary>
            <param name="storageType">
            The field/property type that is storing the instance.
            </param>
            <param name="instance">The type of the instance.</param>
        </member>
        <member name="M:AIO.fsObjectProcessor.OnAfterSerialize(System.Type@,System.Object@,AIO.fsData@)">
            <summary>
            Called after serialization.
            </summary>
            <param name="storageType">
            The field/property type that is storing the instance.
            </param>
            <param name="instance">The type of the instance.</param>
            <param name="data">The data that was serialized.</param>
        </member>
        <member name="M:AIO.fsObjectProcessor.OnBeforeDeserialize(System.Type@,AIO.fsData@)">
            <summary>
            Called before deserialization.
            </summary>
            <param name="storageType">
            The field/property type that is storing the instance.
            </param>
            <param name="data">
            The data that will be used for deserialization.
            </param>
        </member>
        <member name="M:AIO.fsObjectProcessor.OnBeforeDeserializeAfterInstanceCreation(System.Type@,System.Object@,AIO.fsData@)">
            <summary>
            Called before deserialization has begun but *after* the object
            instance has been created. This will get invoked even if the user
            passed in an existing instance.
            </summary>
            <remarks>
            **IMPORTANT**: The actual instance that gets passed here is *not*
            guaranteed to be an a subtype of storageType, since the value for
            instance is whatever the active converter returned for
            CreateInstance() - ie, some converters will return dummy types in
            CreateInstance() if instance creation cannot be separated from
            deserialization (ie, KeyValuePair).
            </remarks>
            <param name="storageType">
            The field/property type that is storing the instance.
            </param>
            <param name="instance">
            The created object instance. No deserialization has been applied to
            it.
            </param>
            <param name="data">
            The data that will be used for deserialization.
            </param>
        </member>
        <member name="M:AIO.fsObjectProcessor.OnAfterDeserialize(System.Type@,System.Object@)">
            <summary>
            Called after deserialization.
            </summary>
            <param name="storageType">
            The field/property type that is storing the instance.
            </param>
            <param name="instance">The type of the instance.</param>
        </member>
        <member name="T:AIO.fsOption`1">
            <summary>
            简单选项类型。这类似于可空类型。
            </summary>
        </member>
        <member name="P:AIO.fsOption`1.HasValue">
            <summary>
            是否存在值
            </summary>
        </member>
        <member name="P:AIO.fsOption`1.IsEmpty">
            <summary>
            是否为NULL
            </summary>
        </member>
        <member name="P:AIO.fsOption`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:AIO.fsOption`1.#ctor(`0@)">
            <summary>
            可选类型
            </summary>
        </member>
        <member name="F:AIO.fsOption`1.Empty">
            <summary>
            空
            </summary>
        </member>
        <member name="T:AIO.fsOption">
            <summary>
            可选
            </summary>
        </member>
        <member name="M:AIO.fsOption.Just``1(``0@)">
            <summary>
            正确的
            </summary>
        </member>
        <member name="T:AIO.fsPortableReflection">
            <summary>
            This wraps reflection types so that it is portable across different Unity
            runtimes.
            </summary>
        </member>
        <member name="F:AIO.fsPortableReflection.EmptyTypes">
            <summary>
            空类型数组
            </summary>
        </member>
        <member name="M:AIO.fsPortableReflection.HasAttribute``1(System.Reflection.MemberInfo@)">
            <summary>
            Returns true if the given attribute is defined on the given element.
            </summary>
        </member>
        <member name="M:AIO.fsPortableReflection.HasAttribute``1(System.Reflection.MemberInfo@,System.Boolean@)">
            <summary>
            Returns true if the given attribute is defined on the given element.
            </summary>
        </member>
        <member name="M:AIO.fsPortableReflection.HasAttribute(System.Reflection.MemberInfo@,System.Type@)">
            <summary>
            Returns true if the given attribute is defined on the given element.
            </summary>
        </member>
        <member name="M:AIO.fsPortableReflection.HasAttribute(System.Reflection.MemberInfo@,System.Type@,System.Boolean@)">
            <summary>
            Returns true if the given attribute is defined on the given element.
            </summary>
        </member>
        <member name="M:AIO.fsPortableReflection.GetAttribute(System.Reflection.MemberInfo@,System.Type@,System.Boolean@)">
            <summary>
            Fetches the given attribute from the given MemberInfo. This method
            applies caching and is allocation free (after caching has been
            performed).
            </summary>
            <param name="element">
            The MemberInfo the get the attribute from.
            </param>
            <param name="attributeType">The type of attribute to fetch.</param>
            <param name="shouldCache"></param>
            <returns>The attribute or null.</returns>
        </member>
        <member name="M:AIO.fsPortableReflection.GetAttribute``1(System.Reflection.MemberInfo@,System.Boolean@)">
            <summary>
            Fetches the given attribute from the given MemberInfo.
            </summary>
            <typeparam name="TAttribute">
            The type of attribute to fetch.
            </typeparam>
            <param name="element">
            The MemberInfo to get the attribute from.
            </param>
            <param name="shouldCache">
            Should this computation be cached? If this is the only time it will
            ever be done, don't bother caching.
            </param>
            <returns>The attribute or null.</returns>
        </member>
        <member name="M:AIO.fsPortableReflection.GetAttribute``1(System.Reflection.MemberInfo@)">
            <summary>
            Fetches the given attribute from the given MemberInfo.
            </summary>
            <typeparam name="TAttribute">
            The type of attribute to fetch.
            </typeparam>
            <param name="element">
            The MemberInfo to get the attribute from.
            </param>
            <param name="shouldCache">
            Should this computation be cached? If this is the only time it will
            ever be done, don't bother caching.
            </param>
            <returns>The attribute or null.</returns>
        </member>
        <member name="M:AIO.fsPortableReflection.AsMemberInfo(System.Type)">
            <summary>
            转化为成员信息
            </summary>
        </member>
        <member name="M:AIO.fsPortableReflection.IsType(System.Reflection.MemberInfo)">
            <summary>
            判断是否为类型
            </summary>
        </member>
        <member name="T:AIO.fsReflectedConverter">
            <summary>
            反射转换器
            </summary>
        </member>
        <member name="M:AIO.fsReflectionUtility.GetInterface(System.Type,System.Type)">
            <summary>
            Searches for a particular implementation of the given interface type
            inside of the type. This is particularly useful if the interface type
            is an open type, ie, typeof(IFace{}), because this method will then
            return IFace{} but with appropriate type parameters inserted.
            </summary>
            <param name="type">The base type to search for interface</param>
            <param name="interfaceType">
            The interface type to search for. Can be an open generic type.
            </param>
            <returns>
            The actual interface type that the type contains, or null if there is
            no implementation of the given interfaceType on type.
            </returns>
        </member>
        <member name="T:AIO.fsResult">
            <summary>
            The result of some sort of operation. A result is either successful or
            not, but if it is successful then there may be a set of warnings/messages
            associated with it. These warnings describe the performed error recovery
            operations.
            </summary>
        </member>
        <member name="F:AIO.fsResult._success">
            <summary>
            Is this result successful?
            </summary>
            <remarks>
            This is intentionally a `success` state so that when the object is
            default constructed it defaults to a failure state.
            </remarks>
        </member>
        <member name="F:AIO.fsResult._messages">
            <summary>
            The warning or error messages associated with the result. This may be
            null if there are no messages.
            </summary>
        </member>
        <member name="M:AIO.fsResult.AddMessage(System.String)">
            <summary>
            Adds a new message to this result.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AIO.fsResult.AddMessages(AIO.fsResult)">
            <summary>
            Adds only the messages from the other result into this result,
            ignoring the success/failure status of the other result.
            </summary>
        </member>
        <member name="M:AIO.fsResult.Merge(AIO.fsResult)">
            <summary>
            Merges the other result into this one. If the other result failed,
            then this one too will have failed.
            </summary>
            <remarks>
            Note that you can use += instead of this method so that you don't
            bury the actual method call that is generating the other fsResult.
            </remarks>
        </member>
        <member name="F:AIO.fsResult.Success">
            <summary>
            A successful result.
            </summary>
        </member>
        <member name="M:AIO.fsResult.Warn(System.String)">
            <summary>
            Create a result that is successful but contains the given warning
            message.
            </summary>
        </member>
        <member name="M:AIO.fsResult.Fail(System.String)">
            <summary>
            Create a result that failed.
            </summary>
        </member>
        <member name="M:AIO.fsResult.op_Addition(AIO.fsResult,AIO.fsResult)">
            <summary>
            Only use this as +=!
            </summary>
        </member>
        <member name="P:AIO.fsResult.Failed">
            <summary>
            Did this result fail? If so, you can see the reasons why in
            `RawMessages`.
            </summary>
        </member>
        <member name="P:AIO.fsResult.Succeeded">
            <summary>
            Was the result a success? Note that even successful operations may
            have warning messages (`RawMessages`) associated with them.
            </summary>
        </member>
        <member name="P:AIO.fsResult.HasWarnings">
            <summary>
            Does this result have any warnings? This says nothing about if it
            failed or succeeded, just if it has warning messages associated with
            it.
            </summary>
        </member>
        <member name="M:AIO.fsResult.AssertSuccess">
            <summary>
            A simply utility method that will assert that this result is
            successful. If it is not, then an exception is thrown.
            </summary>
        </member>
        <member name="M:AIO.fsResult.AssertSuccessWithoutWarnings">
            <summary>
            A simple utility method that will assert that this result is
            successful and that there are no warning messages. This throws an
            exception if either of those asserts are false.
            </summary>
        </member>
        <member name="P:AIO.fsResult.AsException">
            <summary>
            Utility method to convert the result to an exception. This method is
            only defined is `Failed` returns true.
            </summary>
        </member>
        <member name="P:AIO.fsResult.RawMessages">
            <summary>
            原始信息
            </summary>
        </member>
        <member name="P:AIO.fsResult.FormattedMessages">
            <summary>
            格式化信息
            </summary>
        </member>
        <member name="F:AIO.fsSerializer._availableConverters">
            <summary>
            Converters that can be used for type registration.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer._availableDirectConverters">
            <summary>
            Direct converters (optimized _converters). We use these so we don't
            have to perform a scan through every item in _converters and can
            instead just do an O(1) lookup. This is potentially important to perf
            when there are a ton of direct converters.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer._processors">
            <summary>
            Processors that are available.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer._references">
            <summary>
            Reference manager for cycle detection.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer._abstractTypeRemap">
            <summary>
            Allow the user to provide default storage types for interfaces and abstract
            classes. For example, a model could have IList{int} as a parameter, but the
            serialization data does not specify a List{int} type. A IList{} -> List{}
            remapping will cause List{} to be used as the default storage type. see
            https://github.com/jacobdufault/fullserializer/issues/120 for additional
            context.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer._cachedConverterTypeInstances">
            <summary>
            Converter type to converter instance lookup table. This
            could likely be stored inside
            from serialized type to converter.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer._cachedConverters">
            <summary>
            A cache from type to it's converter.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer._cachedProcessors">
            <summary>
            A cache from type to the set of processors that are interested in it.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer.Context">
            <summary>
            A context object that fsConverters can use to customize how they
            operate.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer.Config">
            <summary>
            Configuration options. Also see fsGlobalConfig.
            </summary>
        </member>
        <member name="M:AIO.fsSerializer.AddProcessor(AIO.fsObjectProcessor)">
            <summary>
            Add a new processor to the serializer. Multiple processors can run at
            the same time in the same order they were added in.
            </summary>
            <param name="processor">The processor to add.</param>
        </member>
        <member name="M:AIO.fsSerializer.RemoveProcessor``1">
            <summary>
            Remove all processors which derive from TProcessor.
            </summary>
        </member>
        <member name="M:AIO.fsSerializer.SetDefaultStorageType(System.Type,System.Type)">
            <summary>
            Provide a default storage type for the given abstract or interface type. If
            a type is deserialized which contains an interface/abstract field type and a
            mapping is provided, the mapped type will be used by default. For example,
            IList{T} => List{T} or IDictionary{TKey, TValue} => Dictionary{TKey, TValue}.
            </summary>
        </member>
        <member name="M:AIO.fsSerializer.GetProcessors(System.Type)">
            <summary>
            Fetches all of the processors for the given type.
            </summary>
        </member>
        <member name="M:AIO.fsSerializer.AddConverter(AIO.fsBaseConverter)">
            <summary>
            Adds a new converter that can be used to customize how an object is
            serialized and deserialized.
            </summary>
        </member>
        <member name="M:AIO.fsSerializer.GetConverter(System.Type,System.Type)">
            <summary>
            Fetches a converter that can serialize/deserialize the given type.
            </summary>
        </member>
        <member name="M:AIO.fsSerializer.TrySerialize``1(``0,AIO.fsData@)">
            <summary>
            Helper method that simply forwards the call to
            TrySerialize(typeof(T), instance, out data);
            </summary>
        </member>
        <member name="M:AIO.fsSerializer.TryDeserialize``1(AIO.fsData,``0@)">
            <summary>
            Generic wrapper around TryDeserialize that simply forwards the call.
            </summary>
        </member>
        <member name="M:AIO.fsSerializer.TrySerialize(System.Type,System.Object,AIO.fsData@)">
            <summary>
            Serialize the given value.
            </summary>
            <param name="storageType">
            The type of field/property that stores the object instance. This is
            important particularly for inheritance, as a field storing an
            IInterface instance should have type information included.
            </param>
            <param name="instance">
            The actual object instance to serialize.
            </param>
            <param name="data">The serialized state of the object.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:AIO.fsSerializer.TrySerialize(System.Type,System.Type,System.Object,AIO.fsData@)">
            <summary>
            Serialize the given value.
            </summary>
            <param name="storageType">
            The type of field/property that stores the object instance. This is
            important particularly for inheritance, as a field storing an
            IInterface instance should have type information included.
            </param>
            <param name="overrideConverterType">
            An fsBaseConverter derived type that will be used to serialize the
            object instead of the converter found via the normal discovery
            mechanisms.
            </param>
            <param name="instance">
            The actual object instance to serialize.
            </param>
            <param name="data">The serialized state of the object.</param>
            <returns>If serialization was successful.</returns>
        </member>
        <member name="M:AIO.fsSerializer.TryDeserialize(AIO.fsData,System.Type,System.Object@)">
            <summary>
            Attempts to deserialize a value from a serialized state.
            </summary>
        </member>
        <member name="M:AIO.fsSerializer.TryDeserialize(AIO.fsData,System.Type,System.Type,System.Object@)">
            <summary>
            Attempts to deserialize a value from a serialized state.
            </summary>
        </member>
        <member name="M:AIO.fsSerializer.EnsureDictionary(AIO.fsData)">
            <summary>
            Ensures that the data is a dictionary. If it is not, then it is
            wrapped inside of one.
            </summary>
        </member>
        <member name="T:AIO.fsSerializer.fsLazyCycleDefinitionWriter">
            <summary>
            This manages instance writing so that we do not write unnecessary $id
            fields. We only need to write out an $id field when there is a
            corresponding $ref field. This is able to write $id references lazily
            because the fsData instance is not actually written out to text until
            we have entirely finished serializing it.
            </summary>
        </member>
        <member name="M:AIO.fsSerializer.IsReservedKeyword(System.String)">
            <summary>
            Returns true if the given key is a special keyword that full
            serializer uses to add additional metadata on top of the emitted
            JSON.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer.Key_ObjectReference">
            <summary>
            This is an object reference in part of a cyclic graph.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer.Key_ObjectDefinition">
            <summary>
            This is an object definition, as part of a cyclic graph.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer.Key_InstanceType">
            <summary>
            This specifies the actual type of an object (the instance type was
            different from the field type).
            </summary>
        </member>
        <member name="F:AIO.fsSerializer.Key_Version">
            <summary>
            The version string for the serialized data.
            </summary>
        </member>
        <member name="F:AIO.fsSerializer.Key_Content">
            <summary>
            If we have to add metadata but the original serialized state was not
            a dictionary, then this will contain the original data.
            </summary>
        </member>
        <member name="M:AIO.fsSerializer.StripDeserializationMetadata(AIO.fsData@)">
            <summary>
            Strips all deserialization metadata from the object, like $type and
            $content fields.
            </summary>
            <remarks>
            After making this call, you will *not* be able to deserialize the
            same object instance. The metadata is strictly necessary for
            deserialization!
            </remarks>
        </member>
        <member name="M:AIO.fsSerializer.ConvertLegacyData(AIO.fsData@)">
            <summary>
            This function converts legacy serialization data into the new format,
            so that the import process can be unified and ignore the old format.
            </summary>
        </member>
        <member name="T:AIO.fsVersionedType">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="F:AIO.fsVersionedType.Ancestors">
            <summary>
            The direct ancestors that this type can import.
            </summary>
        </member>
        <member name="F:AIO.fsVersionedType.VersionString">
            <summary>
            The identifying string that is unique among all ancestors.
            </summary>
        </member>
        <member name="F:AIO.fsVersionedType.ModelType">
            <summary>
            The modeling type that this versioned type maps back to.
            </summary>
        </member>
        <member name="M:AIO.fsVersionedType.Migrate(System.Object)">
            <summary>
            Migrate from an instance of an ancestor.
            </summary>
        </member>
        <member name="M:AIO.fsVersionedType.ToString">
            <summary>
            内容转化为字符串
            </summary>
        </member>
        <member name="M:AIO.fsVersionedType.op_Equality(AIO.fsVersionedType,AIO.fsVersionedType)">
            <summary>
            相等
            </summary>
        </member>
        <member name="M:AIO.fsVersionedType.op_Inequality(AIO.fsVersionedType,AIO.fsVersionedType)">
            <summary>
            不相等
            </summary>
        </member>
        <member name="M:AIO.fsVersionedType.Equals(System.Object)">
            <summary>
            判断是否相等
            </summary>
        </member>
        <member name="M:AIO.fsVersionedType.GetHashCode">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="T:AIO.fsVersionManager">
            <summary>
            版本管理
            </summary>
        </member>
        <member name="M:AIO.fsVersionManager.GetVersionImportPath(System.String@,AIO.fsVersionedType@,System.Collections.Generic.List{AIO.fsVersionedType}@)">
            <summary>
            导入路径
            </summary>
        </member>
        <member name="M:AIO.fsVersionManager.VerifyConstructors(AIO.fsVersionedType@)">
            <summary>
            Verifies that the given type has constructors to migrate from all
            ancestor types.
            </summary>
        </member>
        <member name="M:AIO.fsVersionManager.VerifyUniqueVersionStrings(AIO.fsVersionedType@)">
            <summary>
            Verifies that the given version graph contains only unique versions.
            </summary>
        </member>
        <member name="T:AIO.fsWeakReferenceConverter">
            <summary>
            Serializes and deserializes WeakReferences.
            </summary>
        </member>
        <member name="T:AIO.LooseAssemblyName">
            <summary>
            分散程序集名称
            </summary>
        </member>
        <member name="F:AIO.LooseAssemblyName.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:AIO.LooseAssemblyName.#ctor(System.String)">
            <summary>
            分散程序集名称
            </summary>
        </member>
        <member name="M:AIO.LooseAssemblyName.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.LooseAssemblyName.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AIO.LooseAssemblyName.op_Equality(AIO.LooseAssemblyName,AIO.LooseAssemblyName)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.LooseAssemblyName.op_Inequality(AIO.LooseAssemblyName,AIO.LooseAssemblyName)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.LooseAssemblyName.op_Implicit(System.String)~AIO.LooseAssemblyName">
            <inheritdoc/>
        </member>
        <member name="M:AIO.LooseAssemblyName.op_Implicit(AIO.LooseAssemblyName)~System.String">
            <inheritdoc/>
        </member>
        <member name="M:AIO.LooseAssemblyName.op_Explicit(System.Reflection.AssemblyName)~AIO.LooseAssemblyName">
            <inheritdoc/>
        </member>
        <member name="M:AIO.LooseAssemblyName.ToString">
            <inheritdoc/>
        </member>
        <member name="T:AIO.LooseAssemblyNameConverter">
            <inheritdoc/>
        </member>
        <member name="P:AIO.LooseAssemblyNameConverter.ModelType">
            <inheritdoc/>
        </member>
        <member name="M:AIO.LooseAssemblyNameConverter.CreateInstance(AIO.fsData@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.LooseAssemblyNameConverter.TrySerialize(System.Object@,AIO.fsData@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.LooseAssemblyNameConverter.TryDeserialize(AIO.fsData@,System.Object@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="T:AIO.Namespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:AIO.Namespace.Root">
            <summary>
            根节点命名空间
            </summary>
        </member>
        <member name="P:AIO.Namespace.Parent">
            <summary>
            父命名空间
            </summary>
        </member>
        <member name="P:AIO.Namespace.FullName">
            <summary>
            完整命名空间
            </summary>
        </member>
        <member name="P:AIO.Namespace.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:AIO.Namespace.IsRoot">
            <summary>
            是否为根节点
            </summary>
        </member>
        <member name="P:AIO.Namespace.IsGlobal">
            <summary>
            是否为全局
            </summary>
        </member>
        <member name="P:AIO.Namespace.Ancestors">
            <summary>
            获取所有父类命名空间
            </summary>
        </member>
        <member name="M:AIO.Namespace.AndAncestors">
            <summary>
            获取所有父类命名空间
            </summary>
        </member>
        <member name="M:AIO.Namespace.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Namespace.ToString">
            <inheritdoc/>
        </member>
        <member name="P:AIO.Namespace.Global">
            <summary>
            全局命名空间
            </summary>
        </member>
        <member name="M:AIO.Namespace.FromFullName(System.String)">
            <summary>
            转化为完整命名空间
            </summary>
        </member>
        <member name="M:AIO.Namespace.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Namespace.op_Implicit(System.String@)~AIO.Namespace">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Namespace.op_Implicit(AIO.Namespace@)~System.String">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Namespace.op_Equality(AIO.Namespace@,AIO.Namespace@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Namespace.op_Inequality(AIO.Namespace@,AIO.Namespace@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.Namespace.Collection.TryGetValue(System.String,AIO.Namespace@)">
            <inheritdoc/>
        </member>
        <member name="T:AIO.NamespaceConverter">
            <inheritdoc/>
        </member>
        <member name="P:AIO.NamespaceConverter.ModelType">
            <inheritdoc/>
        </member>
        <member name="M:AIO.NamespaceConverter.CreateInstance(AIO.fsData@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.NamespaceConverter.TrySerialize(System.Object@,AIO.fsData@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="M:AIO.NamespaceConverter.TryDeserialize(AIO.fsData@,System.Object@,System.Type@)">
            <inheritdoc/>
        </member>
        <member name="T:AIO.IDNoUtils">
            <summary>
            身份证判断方法
            </summary>
        </member>
        <member name="F:AIO.IDNoUtils.REGEX_ID_NO_18">
            <summary>
            18位二代身份证号码的正则表达式
            </summary>
        </member>
        <member name="F:AIO.IDNoUtils.W">
            <summary>
            加权因子
            </summary>
        </member>
        <member name="F:AIO.IDNoUtils.CheckNumberArray">
            <summary>
             
            </summary>
        </member>
        <member name="M:AIO.IDNoUtils.CheckIDNo(System.String)">
            <summary>
            判断当前字符是否符合中国身份证
            </summary>
        </member>
        <member name="M:AIO.IDNoUtils.CheckIDNo18(System.String)">
            <summary>
            判断当前字符是否符合中国18位身份证
            </summary>
        </member>
        <member name="M:AIO.IDNoUtils.UpdateIDNo15to18(System.String)">
            <summary>
            
            </summary>
            <param name="IDNo"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IDNoUtils.ComputeCheckNumber(System.String)">
            <summary>
            计算校验码 适用于18位的二代身份证号码
            </summary>
            <param name="masterNumber">本体码</param>
            <returns>校验码</returns>
        </member>
        <member name="M:AIO.IDNoUtils.ValidateCheckNumber(System.String)">
            <summary>
            校验身份证号码的验证码
            </summary>
        </member>
        <member name="T:AIO.MaskWordUtils">
            <summary> 
            屏蔽字
            </summary>
        </member>
        <member name="M:AIO.MaskWordUtils.Replace(System.String)">
            <summary>
            替换屏蔽字为*
            </summary>
        </member>
        <member name="M:AIO.MaskWordUtils.LoadMaskWord(System.String)">
            <summary> 加载屏蔽文本 </summary>
        </member>
        <member name="T:AIO.StringUtils">
            <summary>
            字符串工具库
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateMonth(System.String@)">
            <summary>
            验证一年的12个月
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateChinese(System.String@)">
            <summary>
            验证输入汉字
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateLength(System.String@,System.Int32)">
            <summary>
            验证输入字符串 是否满足指定个数
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateMinMaxLength(System.String@,System.Int32,System.Int32)">
            <summary>
            验证当前字符串是否在指定长度范围内
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateDay(System.String@)">
            <summary>
            验证一个月的31天
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidate2Decimal(System.String@)">
            <summary>
            验证两位小数
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsNullOrEmpty(System.String@)">
            <summary> 判断字符是否为空 </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateNumeric(System.String@)">
            <summary>
            是否为Numeric
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateInt(System.String@)">
            <summary>
            是否为Int
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateBool(System.String@)">
            <summary>
            是否为Bool
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateNum(System.String)">
            <summary>
            是否为整数
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateUnsign(System.String)">
            <summary>
            是否为Unsign
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateDate(System.String@)">
            <summary>
            验证是否为 YYYY MM DD 格式 包含闰年 平年
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateDateString(System.String@)">
            <summary>
            判断字符串是否是yy-mm-dd字符串
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidatePhone(System.String@)">
            <summary>
            验证手机号码
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateIPSect(System.String@)">
            <summary>
            是否为IP分段
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateEmail(System.String@)">
            <summary>
            是否电子邮件
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsPostalcode(System.String@)">
            <summary>
            验证邮编
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateIDcard(System.String@)">
            <summary>
            验证身份证号
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateIDcard18(System.String@)">
            <summary>
            验证中国身份证号18
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateIDcard15(System.String@)">
            <summary>
            验证身份证号15
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IDcard15To18(System.String@)">
            <summary>
            15位省份证号码升18位
            </summary>
        </member>
        <member name="M:AIO.StringUtils.GetHttpHost(System.String@)">
            <summary>
            获取Http主机名 如果有端口 包含端口
            </summary>
        </member>
        <member name="M:AIO.StringUtils.GetRegexMatches(System.String@,System.String)">
            <summary>
            根据正则表达式 获取对应内容
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateUrl(System.String,System.String)">
            <summary>
            验证URL是否有效
            </summary>
        </member>
        <member name="M:AIO.StringUtils.ToConvertBlock(System.String[])">
            <summary>
            转化为区块
            </summary>
        </member>
        <member name="M:AIO.StringUtils.ToConvertSpace(System.String[])">
            <summary>
            转化为区块
            </summary>
        </member>
        <member name="M:AIO.StringUtils.ToConvert(AIO.StringBlock@,System.String[])">
            <summary>
            转化为区块
            </summary>
        </member>
        <member name="M:AIO.StringUtils.ToConverUnitsCNS(System.String,System.Int32@)">
            <summary>
            阿拉伯数字全部转化为中文数字 有单位 传入需全部为数字字符 简体中文
            </summary>
            <param name="num"></param>
            <param name="unitNum">单位截止下标,默认0,1:万后,2:亿后,3:万亿</param>
        </member>
        <member name="M:AIO.StringUtils.ToConverNoUnitsCNS(System.String)">
            <summary>
            阿拉伯数字全部转化为中文数字 无单位 传入需全部为数字字符 简体中文
            </summary>
        </member>
        <member name="M:AIO.StringUtils.StringToHexView(System.Byte[]@,System.Int32)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.StringToHex(System.Byte[]@,System.Int32)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.HexStringToBytes(System.String@)">
            <summary>
            
            </summary>
            <param name="hexStr"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.BtsToBase64(System.Byte[]@)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.Base64ToBts(System.String@)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.GetMD5(System.String@,System.Text.Encoding@)">
            <summary>
            
            </summary>
            <param name="sDataIn"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.GetMD5(System.Collections.Generic.ICollection{System.String}@,System.Text.Encoding@)">
            <summary>
            
            </summary>
            <param name="sDataIn"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.IsNullOrWhiteSpace(System.String@)">
            <summary>
            是空还是空白
            </summary>
        </member>
        <member name="M:AIO.StringUtils.FallbackEmpty(System.String,System.String@)">
            <summary>
            如果指示指定的字符串是 null 还是 System.String.Empty 字符串。
            则回退
            </summary>
        </member>
        <member name="M:AIO.StringUtils.FallbackWhitespace(System.String,System.String@)">
            <summary>
            如果所有字符串为空白则回退
            </summary>
        </member>
        <member name="T:AIO.StringBlock">
            <summary>
            字符串区块 字符单位
            </summary>
        </member>
        <member name="P:AIO.StringBlock.Top">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIO.StringBlock.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIO.StringBlock.IgnoreChinese">
            <summary>
            忽略中文
            </summary>
        </member>
        <member name="M:AIO.StringBlock.#ctor(System.Collections.Generic.IList{System.Char},System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="units"></param>
            <param name="width"></param>
            <param name="ignoreChinese"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AIO.StringBlock.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="units"></param>
            <param name="width"></param>
            <param name="ignoreChinese"></param>
        </member>
        <member name="M:AIO.StringBlock.Convert(System.String[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringBlock.Convert(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:AIO.AssemblyUtils">
            <summary>
            程序集
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetAllType">
            <summary>
            获取所有的类
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetAllType``1">
            <summary>
            获取所有的类
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetReferanceAssemblies(System.AppDomain)">
            <summary>
            获取所有程序集
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetAllAssemblieHasAttributeType``1">
            <summary>
            获取全部程序集中 包含指定特性的类 输出 key=命名空间加类名 value=类
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetMethodInfo(System.String,System.String,System.String)">
            <summary>
            获取方法
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetMethodInfo(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            获取方法
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetMethodInfo``1(``0,System.String)">
            <summary>
            获取方法
            </summary>
        </member>
        <member name="T:AIO.ClassUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.ClassUtils.RemoveAllEvent``1(``0,System.String)">
            <summary>
            清除事件
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
        </member>
        <member name="M:AIO.ClassUtils.GetMembers(System.Object,System.Reflection.BindingFlags)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ClassUtils.GetMethods(System.Object,System.Reflection.BindingFlags)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ClassUtils.GetType(System.String)">
            <summary>
            C# Type类获取类型方法(通过字符串型的类名)
            </summary>
        </member>
        <member name="T:AIO.GCUtils">
            <see>
                <cref>https://docs.microsoft.com/zh-cn/dotnet/api/system.gc?view=net-5.0</cref>
            </see>
            <!--公共语言运行时中的垃圾回收器支持使用代的对象老化。 代是内存中对象的相对生存期的单位。
            对象的代数或 age 指示对象所属的代。 最近创建的对象是较新的生成的一部分，其生成号比之前在应用程序生命周期中创建的对象的生成号要低。
            最近一代中的对象位于第0代中。 垃圾回收器的这种实现支持三代对象，第0代、第1代和第2代。
            可以检索属性的值 MaxGeneration ，以确定系统支持的最大代数。-->
        </member>
        <member name="P:AIO.GCUtils.MaxGeneration">
            <summary>
            获取系统当前支持的最大代数
            </summary>
        </member>
        <member name="M:AIO.GCUtils.SuppressFinalize(System.Object)">
            <summary>
            阻止GC调用Finalize方法
            </summary>
            <!--因为Finalize方法的调用会牺牲部分性能。如果你的Dispose方法已经对委托管资源作了清理，就没必要让GC再调用对象的Finalize方法-->
        </member>
        <member name="M:AIO.GCUtils.Collect">
            <summary>
            强制对所有代进行即时垃圾回收
            </summary>
        </member>
        <member name="M:AIO.GCUtils.Collect(System.Int32)">
            <summary>
            强制对 0 代到指定代进行即时垃圾回收。
            </summary>
            <param name="generation">代</param>
        </member>
        <member name="M:AIO.GCUtils.Collect(System.Int32,System.GCCollectionMode)">
            <summary>
            强制在 GCCollectionMode 值所指定的时间对 0 代到指定代进行垃圾回收。
            </summary>
            <param name="generation">代</param>
            <param name="gCCollectionMode">GC模式集合</param>
        </member>
        <member name="M:AIO.GCUtils.Collect(System.Int32,System.GCCollectionMode,System.Boolean)">
            <summary>
            在由 GCCollectionMode 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收是否应该为阻碍性。
            </summary>
            <param name="generation">代</param>
            <param name="gCCollectionMode">GC模式集合</param>
            <param name="blocking">阻塞</param>
        </member>
        <member name="M:AIO.GCUtils.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)">
            <summary>
            在由 GCCollectionMode 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收应该为阻碍性还是压缩性。
            </summary>
            <param name="generation">代</param>
            <param name="gCCollectionMode">GC模式集合</param>
            <param name="blocking">阻塞</param>
            <param name="compacting">压缩</param>
        </member>
        <member name="M:AIO.GCUtils.CollectionCount(System.Int32)">
            <summary>
            返回已经对对象的指定代进行的垃圾回收次数。
            </summary>
            <param name="generation">代</param>
        </member>
        <member name="M:AIO.GCUtils.CancelFullGCNotification">
            <summary>
            取消注册垃圾回收通知。
            </summary>
        </member>
        <member name="M:AIO.GCUtils.AddMemoryPressure(System.Int64)">
            <summary>
            通知运行时在安排垃圾回收时应考虑分配大量的非托管内存
            </summary>
            <param name="bytesAllocated">分配的字节数</param>
        </member>
        <member name="M:AIO.GCUtils.RemoveMemoryPressure(System.Int64)">
            <summary>
            通知运行时已释放非托管内存，在安排垃圾回收时不需要再考虑它。
            </summary>
            <param name="bytesAllocated">分配的字节数</param>
        </member>
        <member name="M:AIO.GCUtils.TryStartNoGCRegion(System.Int64)">
            <summary>
            如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收。
            </summary>
            <param name="totalSize">总空间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AIO.GCUtils.TryStartNoGCRegion(System.Int64,System.Boolean)">
            <summary>
            如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收；
            并在初始没有足够内存可用的情况下，
            控制垃圾回收器是否进行完整的阻碍性垃圾回收。
            </summary>
            <param name="totalSize">总空间</param>
            <param name="disallowFullBlockingGC">禁止完全阻塞GC</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AIO.GCUtils.TryStartNoGCRegion(System.Int64,System.Int64)">
            <summary>
            如果指定数量的内存可用于大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收。
            </summary>
            <param name="totalSize">总空间</param>
            <param name="lohSize">大对象堆</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AIO.GCUtils.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)">
            <summary>
            如果指定数量的内存可用大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收；
            并在初始没有足够内存可用的情况下，控制垃圾回收器是否进行完整的阻碍性垃圾回收。
            </summary>
            <param name="totalSize">总空间</param>
            <param name="lohSize">大对象堆</param>
            <param name="disallowFullBlockingGC">禁止完全阻塞GC</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AIO.GCUtils.EndNoGCRegion">
            <summary>
            结束无 GC 区域延迟模式
            </summary>
        </member>
        <member name="M:AIO.GCUtils.GetGeneration(System.Object)">
            <summary>
            返回指定对象的当前代数。
            </summary>
            <param name="obj">数据</param>
            <returns>代</returns>
        </member>
        <member name="M:AIO.GCUtils.GetGeneration(System.WeakReference)">
            <summary>
            返回指定弱引用的目标的当前代数。
            </summary>
            <param name="obj">数据</param>
            <returns>代</returns>
        </member>
        <member name="M:AIO.GCUtils.GetTotalMemory(System.Boolean)">
            <summary>
            检索当前认为要分配的字节数
            </summary>
            <param name="forceFullCollection">是否可以等待较短间隔再返回，以便系统回收垃圾和终结对象。</param>
            <returns>全部内存大小</returns>
        </member>
        <member name="M:AIO.GCUtils.KeepAlive(System.Object)">
            <summary>
            引用指定对象，使其从当前例程开始到调用此方法的那一刻为止均不符合进行垃圾回收的条件。
            </summary>
            <param name="obj">指定对象</param>
        </member>
        <member name="M:AIO.GCUtils.RegisterForFullGCNotification(System.Int32,System.Int32)">
            <summary>
            注册完整GC通知
            </summary>
            <param name="maxGenerationThreshold">马克斯代阈值</param>
            <param name="largeObjectHeapThreshold">大对象堆阈值</param>
        </member>
        <member name="M:AIO.GCUtils.ReRegisterForFinalize(System.Object)">
            <summary>
            请求系统调用指定对象的终结器，此前已为该对象调用 SuppressFinalize(Object)。
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:AIO.GCUtils.WaitForFullGCApproach">
            <summary>
            返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。
            </summary>
            <returns>GC通知状态</returns>
        </member>
        <member name="M:AIO.GCUtils.WaitForFullGCApproach(System.Int32)">
            <summary>
            在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。
            </summary>
            <param name="millisecondsTimeout">毫秒超时时间</param>
            <returns>GC通知状态</returns>
        </member>
        <member name="M:AIO.GCUtils.WaitForFullGCComplete">
            <summary>
            返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。
            </summary>
            <returns>GC通知状态</returns>
        </member>
        <member name="M:AIO.GCUtils.WaitForFullGCComplete(System.Int32)">
            <summary>
            在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。
            </summary>
            <param name="millisecondsTimeout">毫秒超时时间</param>
            <returns>GC通知状态</returns>
        </member>
        <member name="M:AIO.GCUtils.WaitForPendingFinalizers">
            <summary>
            挂起当前线程，直到处理终结器队列的线程清空该队列为止。
            </summary>
        </member>
        <member name="T:AIO.Define">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_IDENTICARDID">
            <summary>
            maximum length of identicardid
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_NAME">
            <summary>
            maximum length of name
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_COUNTRY">
            <summary>
            maximum length of country
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_NATION">
            <summary>
            maximum length of nation
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_BIRTHDAY">
            <summary>
            maximum length of birthday
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_ADDRESS">
            <summary>
            maximum length of address
            </summary>
        </member>
        <member name="T:AIO.MarshalUtils">
            <summary>
            Marshal 类
            </summary>
            <see>
                <cref>https://msdn.microsoft.com/zh-cn/library/system.runtime.interopservices.marshal(VS.80).aspx</cref>
            </see>
            <!--提供了一个方法集，这些方法用于分配非托管内存、复制非托管内存块、将托管类型转换为非托管类型 此外还提供了在与非托管代码交互时使用的其他杂项方法-->
            <!--备注 Marshal 类中定义的 static 方法对于处理非托管代码至关重要。此类中定义的大多数方法通常由需要-->
            <!--此类型的任何公共静态（Visual Basic 中的 Shared）成员都是线程安全的，但不保证所有实例成员都 是线程安全的-->
        </member>
        <member name="P:AIO.MarshalUtils.SystemDefaultCharSize">
            <summary>
            表示系统上的默认字符大小；Unicode 系统上默认值为 2，ANSI 系统上默认值为 1。 此字段为只读。
            </summary>
        </member>
        <member name="P:AIO.MarshalUtils.SystemMaxDBCSCharSize">
            <summary>
            表示用于当前操作系统的双字节字符集 (DBCS) 的最大大小（以字节为单位）。 此字段为只读。
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.SizeOf``1(``0)">
            <summary>
            获取 结构体实例 空间大小
            </summary>
            <param name="obj">返回对象的非托管大小 以字节为单位</param>
        </member>
        <member name="M:AIO.MarshalUtils.SizeOf``1">
            <summary>
            获取 结构体实例 空间大小
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.AllocHGlobal(System.Int32)">
            <summary>
            使用指定的字节数从进程的非托管内存中分配内存。
            </summary>
            <param name="size">内存中所需的字节数</param>
            <returns>一个指向新分配内存的指针 这个内存必须使用Marshal.FreeHGlobal 来释放 </returns>
        </member>
        <member name="M:AIO.MarshalUtils.AddRef(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.AllocCoTaskMem(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.AreComObjectsAvailableForCleanup">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.BindToMoniker(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.CleanupUnusedObjectsInCurrentContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.AllocHGlobal(System.IntPtr)">
            <summary>
            使用指定的字节数从进程的非托管内存中分配内存。
            </summary>
            <param name="ptr">内存中所需的字节数</param>
            <returns>一个指向新分配内存的指针 这个内存必须使用Marshal.FreeHGlobal 来释放 </returns>
        </member>
        <member name="M:AIO.MarshalUtils.FreeHGlobal(System.IntPtr)">
            <summary>
            释放内存中指针
            </summary>
            <param name="hglobal">内存中的指针</param>
        </member>
        <member name="M:AIO.MarshalUtils.CreateAggregatedObject``1(System.IntPtr,``0)">
            <summary>
            创建聚合对象
            </summary>
            <param name="ptr">指针</param>
            <param name="obj">数据</param>
        </member>
        <member name="M:AIO.MarshalUtils.CreateWrapperOfType``1(System.Object)">
            <summary>
            创建类型的包装器
            </summary>
            <typeparam name="T">结构类型</typeparam>
            <param name="obj">数据</param>
            <returns>包装数据</returns>
        </member>
        <member name="M:AIO.MarshalUtils.CreateWrapperOfType``2(``0)">
            <summary>
            创建类型的包装器
            </summary>
            <typeparam name="T">结构类型</typeparam>
            <typeparam name="TWrapper">包装器</typeparam>
            <param name="obj">数据</param>
            <returns>包装器</returns>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadByte(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadByte(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadByte(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt16(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt16(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt16(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt32(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt32(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt32(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt64(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt64(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt64(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadIntPtr(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadIntPtr(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadIntPtr(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteByte(System.Object,System.Int32,System.Byte)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteByte(System.IntPtr,System.Int32,System.Byte)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteByte(System.IntPtr,System.Byte)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt16(System.IntPtr,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt16(System.IntPtr,System.Int16)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt16(System.IntPtr,System.Int32,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt16(System.Object,System.Int32,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt16(System.Object,System.Int32,System.Int16)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt32(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt32(System.Object,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt64(System.Object,System.Int32,System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt64(System.IntPtr,System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteIntPtr(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ZeroFreeBSTR(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.DestroyStructure(System.IntPtr,System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.DestroyStructure``1(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.FinalReleaseComObject(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.FreeBSTR(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.FreeCoTaskMem(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
            <summary>
            将数据从托管对象封送到非托管内存块
            </summary>
            <typeparam name="T">保存要封送的数据的托管对象 此对象必须是格式化类的结构或实例</typeparam>
            <param name="obj">实例</param>
            <param name="ptr">指向非托管内存块的指针，在调用此方法之前必须分配该内存块</param>
            <param name="fDeleteOld">在ptr参数上使用DestroyStructure方法复制数据</param>
        </member>
        <member name="M:AIO.MarshalUtils.ThrowExceptionForHR(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ThrowExceptionForHR(System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.IsComObject(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.OffsetOf(System.Type,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.OffsetOf``1(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Prelink(System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PrelinkAll(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToBSTR(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToCoTaskMemAnsi(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToCoTaskMemAuto(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToCoTaskMemUni(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToHGlobalAnsi(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToHGlobalAuto(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToHGlobalUni(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.SecureStringToBSTR(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Release(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReleaseComObject(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringAnsi(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringAnsi(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringAuto(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringAuto(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringBSTR(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringUni(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringUni(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStructure(System.IntPtr,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStructure(System.IntPtr,System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStructure``1(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStructure``1(System.IntPtr,``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetComInterfaceForObject``2(``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetComInterfaceForObject(System.Object,System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetDelegateForFunctionPointer``1(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetExceptionCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetExceptionForHR(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetExceptionForHR(System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetFunctionPointerForDelegate(System.Delegate)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetFunctionPointerForDelegate``1(``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetHRForException(System.Exception)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetHRForLastWin32Error">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetIUnknownForObject(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetLastWin32Error">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetNativeVariantForObject(System.Object,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetNativeVariantForObject``1(``0,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetObjectForIUnknown(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetObjectForNativeVariant(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetObjectForNativeVariant``1(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="aSrcNativeVariant"></param>
            <param name="cVars"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.MarshalUtils.GetStartComSlot(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.MarshalUtils.GetTypeFromCLSID(System.Guid)">
            <summary>
            
            </summary>
            <param name="clsid"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.MarshalUtils.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetUniqueObjectForIUnknown(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIO.SystemInfoUtils">
            <summary>
            设备信息 .NET API
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetEquipmentName">
            <summary>
            获取用户设备名
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetPlatform">
            <summary>
            获取平台名称
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetNowVersion">
            <summary>
            获取平台版本号
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetUserDomainName">
            <summary>
            获取当前设备 连接网络名称
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetSystemDirectory">
            <summary>
            获取系统跟目录
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetNowTime">
            <summary>
            获取系统当前时间
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetStartSystemTickCount">
            <summary>
            获取系统启动后 经过的毫秒数
            </summary>
        </member>
        <member name="T:AIO.CharUnit">
            <summary>
            只读变量
            </summary>
        </member>
        <member name="F:AIO.CharUnit.C0">
            <summary>
            0的字符
            </summary>
        </member>
        <member name="F:AIO.CharUnit.BEL">
            <summary>
            响铃
            </summary>
        </member>
        <member name="F:AIO.CharUnit.BackSpace">
            <summary>
            回格
            </summary>
        </member>
        <member name="F:AIO.CharUnit.TABH">
            <summary>
            tab(水平制表符)
            </summary>
        </member>
        <member name="F:AIO.CharUnit.NewLine">
            <summary>
            换行
            </summary>
        </member>
        <member name="F:AIO.CharUnit.TABV">
            <summary>
            tab(垂直制表符)
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Page">
            <summary>
            换页
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:AIO.CharUnit.EnterNewLine" -->
        <member name="F:AIO.CharUnit.End">
            <summary>
            结束 End
            </summary>
        </member>
        <member name="F:AIO.CharUnit.PauseBreak">
            <summary>
            脱离 Pause Break
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Space">
            <summary>
            空格
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Exclamation">
            <summary>
            !
            </summary>
        </member>
        <member name="F:AIO.CharUnit.DoubleQuote">
            <summary>
            "
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Pound">
            <summary>
            #
            </summary>
        </member>
        <member name="F:AIO.CharUnit.USD">
            <summary>
            $
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Modulus">
            <summary>
            -%
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:AIO.CharUnit.AND" -->
        <member name="F:AIO.CharUnit.SingleQuote">
            <summary>
            -’
            </summary>
        </member>
        <member name="F:AIO.CharUnit.LeftBracket">
            <summary>
            -(
            </summary>
        </member>
        <member name="F:AIO.CharUnit.RightBracket">
            <summary>
            -)
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Asterisk">
            <summary>
            *
            </summary>
        </member>
        <member name="F:AIO.CharUnit.ADD">
            <summary>
            +
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Comma">
            <summary>
            ,
            </summary>
        </member>
        <member name="F:AIO.CharUnit.SUB">
            <summary>
            -
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Point">
            <summary>
            .
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Slash">
            <summary>
            /
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N0">
            <summary>
            0
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N1">
            <summary>
            1
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N2">
            <summary>
            2
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N3">
            <summary>
            3
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N4">
            <summary>
            4
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N5">
            <summary>
            5
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N6">
            <summary>
            6
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N7">
            <summary>
            7
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N8">
            <summary>
            8
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N9">
            <summary>
            9
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Colon">
            <summary>
            :
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Semicolon">
            <summary>
            ;
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:AIO.CharUnit.LessThanSign" -->
        <member name="F:AIO.CharUnit.Equality">
            <summary>
            61 =
            </summary>
        </member>
        <member name="F:AIO.CharUnit.EA">
            62 >　
            63 ?
            64 @
            <summary>
            65 A
            </summary>
        </member>
        <member name="F:AIO.CharUnit.EZ">
            66 B
            67 C
            68 D
            69 E
            70 F
            71 G
            72 H
            73 I
            74 J
            75 K
            76 L
            77 M
            78 N
            79 O
            80 P
            81 Q
            82 R
            83 S
            84 T
            85 U
            86 V
            87 W
            88 X
            89 Y
            <summary>
            90 Z
            </summary>
        </member>
        <member name="F:AIO.CharUnit.EAlphaBet">
            <summary>
            大写A-大写Z
            </summary>
        </member>
        <member name="F:AIO.CharUnit.UnderLine">
            91 [
            92 /　
            92 /
            93]
            94 ^
            <summary>
            95 _
            </summary>
        </member>
        <member name="F:AIO.CharUnit.ea">
            96 `
            <summary>
            97 a
            </summary>
        </member>
        <member name="F:AIO.CharUnit.ez">
            98 b
            99 c
            100 d
            101 e
            102 f
            103 g
            104 h
            105 i
            106 j
            107 k
            108 l
            109 m
            110 n
            111 o
            112 p
            113 q
            114 r
            115 s
            116 t
            117 u
            118 v
            119 w
            120 x
            121 y
            <summary>
            122 z
            </summary>
        </member>
        <member name="F:AIO.CharUnit.eAlphaBet">
            <summary>
            小写e-小写z
            </summary>
        </member>
        <member name="T:AIO.ChineseUnit">
            <summary>
            中文单位
            </summary>
        </member>
        <member name="F:AIO.ChineseUnit.CNSNum">
            <summary>
            数字单位:个数组
            </summary>
        </member>
        <member name="F:AIO.ChineseUnit.CNSDigit">
            <summary>
            数字单位:位数组
            </summary>
        </member>
        <member name="F:AIO.ChineseUnit.CNSUnits">
            <summary>
            数字单位:单位数组
            </summary>
        </member>
        <member name="F:AIO.ChineseUnit.NumberChar">
            <summary>
            数字字符串
            </summary>
        </member>
        <member name="T:AIO.ColorUnit">
            <summary>
            颜色库
            </summary>
        </member>
        <member name="F:AIO.ColorUnit.Wirte">
            <summary> 白色 1 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Red">
            <summary> 红色 5 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Green">
            <summary> 绿色 3 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Blue">
            <summary> 蓝色 4 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Peony">
            <summary> 牡丹红 5 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Cyan">
            <summary> 青色 6 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Yellow">
            <summary> 黄色 7 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Black">
            <summary> 黑色 8 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Gary">
            <summary> 灰色 41 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Bulesea">
            <summary> 海蓝 9 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Orange">
            <summary> 橙色 81 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Chocolate">
            <summary> 巧克力色 10 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Bluelyons">
            <summary> 蓝紫色 11 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Brassiness">
            <summary> 黄铜色 12 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Brightgolden">
            <summary> 亮金色 13 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Brown">
            <summary> 棕色 14 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Aeneous1">
            <summary> 青铜色1 15 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Aeneous2">
            <summary> 青铜色2 16 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Bluewore">
            <summary> 士官服蓝色 17 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Coppercold">
            <summary> 冷铜色 18 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Coppery">
            <summary> 铜色 19 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Redcoral">
            <summary> 珊瑚红 20 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Hyacinthine">
            <summary> 紫蓝色 21 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Copperdeep">
            <summary> 深铜 22 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Greendeep">
            <summary> 深绿 23 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Darkcoppergreen">
            <summary> 深铜绿色 24 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Darkolivegreen">
            <summary> 深橄榄绿 25 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Bluedeep">
            <summary> 深蓝花色 26 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Modena">
            <summary> 深紫色 27 </summary>
        </member>
        <member name="F:AIO.ColorUnit.BlueSLATEdeep">
            <summary> 深石板蓝 28 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Slabsdeep">
            <summary> 深铅灰色 29 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Browndark">
            <summary> 深棕褐色 30 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Turquoisedeep">
            <summary> 深绿松石色 32 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Colordark">
            <summary> 暗木色 33 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Greylight">
            <summary> 淡灰色 34 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Redearthgreyrose">
            <summary> 土灰玫瑰红色 35 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Longstone">
            <summary> 长石色 36 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Firebrick">
            <summary> 火砖色 37 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Greenforest">
            <summary> 森林绿 38 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Golden">
            <summary> 金色 39 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Foresythia">
            <summary> 鲜黄色 40 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Aerugo">
            <summary> 铜绿色 42 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Yellowbluish">
            <summary> 青黄色 43 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Greenhunter">
            <summary> 猎人绿 44 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Redindian">
            <summary> 印度红 45 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Yellowearthy">
            <summary> 土黄色 46 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Wathet">
            <summary> 浅蓝色 47 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Greyfrench">
            <summary> 浅灰色 48 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Bluelightsteel">
            <summary> 浅钢蓝色 49 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Colorlight">
            <summary> 浅木色 59 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Greenlime">
            <summary> 石灰绿色 60 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Bisque">
            <summary> 桔黄色 61 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Maroon">
            <summary> 褐红色 62 </summary> 62
        </member>
        <member name="T:AIO.ScriptType">
            <summary>
            脚本类型
            </summary>
        </member>
        <member name="F:AIO.ScriptType.CScript">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Lua">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Java">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Python">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Shell">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Bat">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Object_C">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIO.Suffix">
            <summary>
            后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.TextureSuffix">
            <summary>
            图片文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.VideoSuffix">
            <summary>
            视频文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.SoundSuffix">
            <summary>
            音频文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.TextSuffix">
            <summary>
            文本文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.ShaderSuffix">
            <summary>
            shader文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.FontSuffix">
            <summary>
            字体后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.Animation">
            <summary>
            动画文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.Animator">
            <summary>
            控制器文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.Material">
            <summary>
            材质文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.PrefabSuffix">
            <summary>
            预制体文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.RTextureSuffix">
            <summary>
            渲染纹理后缀
            </summary>
        </member>
        <member name="T:AIO.TimeUnit">
            <summary>
            时间
            </summary>
        </member>
        <member name="T:AIO.TimeUnit.SencondUnit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.TimeUnit.SencondUnit.SECOND">
            <summary> 秒 </summary>
        </member>
        <member name="F:AIO.TimeUnit.SencondUnit.MILLISCOND">
            <summary> 毫秒 </summary>
        </member>
        <member name="F:AIO.TimeUnit.SencondUnit.MICROSECOND">
            <summary> 微秒 </summary>
        </member>
        <member name="F:AIO.TimeUnit.SencondUnit.NANOSECOND">
            <summary> 纳秒 </summary>
        </member>
        <member name="F:AIO.TimeUnit.SencondUnit.NANOSECOND_100">
            <summary> 100纳秒计数单位 </summary>
        </member>
        <member name="M:AIO.TimeUnit.GetSencondUnit(AIO.TimeUnit.SencondUnit)">
            <summary>
            获取秒 计数单位 秒
            </summary>
        </member>
        <member name="M:AIO.TimeUnit.GetMinUnit(AIO.TimeUnit.SencondUnit)">
            <summary>
            获取秒 计数单位 分
            </summary>
        </member>
        <member name="M:AIO.TimeUnit.GetHourUnit(AIO.TimeUnit.SencondUnit)">
            <summary>
            获取秒 计数单位 时
            </summary>
        </member>
        <member name="M:AIO.TimeUnit.GetDayUnit(AIO.TimeUnit.SencondUnit)">
            <summary>
            获取秒 计数单位 时
            </summary>
        </member>
        <member name="M:AIO.TimeUnit.GetWeekUnit(AIO.TimeUnit.SencondUnit)">
            <summary>
            获取秒 计数单位 时
            </summary>
        </member>
        <member name="T:AIO.TimeUnit.DateTimeUnit">
            <summary>
            时间间隔
            </summary>
        </member>
        <member name="F:AIO.TimeUnit.DateTimeUnit.Day">
            <summary> 日 </summary>
        </member>
        <member name="F:AIO.TimeUnit.DateTimeUnit.Week">
            <summary> 周 </summary>
        </member>
        <member name="F:AIO.TimeUnit.DateTimeUnit.Month">
            <summary> 月 </summary>
        </member>
        <member name="F:AIO.TimeUnit.DateTimeUnit.Season">
            <summary> 季 </summary>
        </member>
        <member name="F:AIO.TimeUnit.DateTimeUnit.Year">
            <summary> 年 </summary>
        </member>
        <member name="F:AIO.TimeUnit.UNIT_WEEK_DAY">
            <summary> 一周7天 </summary>
        </member>
        <member name="F:AIO.TimeUnit.UNIT_DAY_HOUR">
            <summary> 一天24时 </summary>
        </member>
        <member name="F:AIO.TimeUnit.UNIT_HOUR_MIN">
            <summary> 一时60分 </summary>
        </member>
        <member name="F:AIO.TimeUnit.UNIT_MIN_SECOND">
            <summary> 一分60秒 </summary>
        </member>
        <member name="F:AIO.TimeUnit.SECOND">
            <summary> 秒 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.TimeUnit.SECOND_MIN">
            <summary> 分 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.TimeUnit.SECOND_HOUR">
            <summary> 时 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.TimeUnit.SECOND_DAY">
            <summary> 日 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.TimeUnit.SECOND_WEEK">
            <summary> 周 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.TimeUnit.MS_SECOND">
            <summary> 秒 单位时间（毫秒） ms </summary>
        </member>
        <member name="F:AIO.TimeUnit.MS_MIN">
            <summary> 分 单位时间（毫秒） ms  </summary>
        </member>
        <member name="F:AIO.TimeUnit.MS_HOUR">
            <summary> 时 单位时间（毫秒） ms  </summary>
        </member>
        <member name="F:AIO.TimeUnit.MS_DAY">
            <summary> 日 单位时间（毫秒） ms  </summary>
        </member>
        <member name="F:AIO.TimeUnit.MS_WEEK">
            <summary> 周 单位时间（毫秒） ms  </summary>
        </member>
        <member name="F:AIO.TimeUnit.μS_SECOND">
            <summary> 秒 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.TimeUnit.μS_MIN">
            <summary> 分 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.TimeUnit.μS_HOUR">
            <summary> 时 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.TimeUnit.μS_DAY">
            <summary> 天 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.TimeUnit.μS_WEEK">
            <summary> 周 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.TimeUnit.NS_SECOND">
            <summary> 秒 单位时间（纳秒） ns </summary>
        </member>
        <member name="F:AIO.TimeUnit.NS_MIN">
            <summary> 分 单位时间（纳秒） ns </summary>
        </member>
        <member name="F:AIO.TimeUnit.NS_HOUR">
            <summary> 时 单位时间（纳秒） ns </summary>
        </member>
        <member name="F:AIO.TimeUnit.NS_DAY">
            <summary> 天 单位时间（纳秒） ns </summary>
        </member>
        <member name="F:AIO.TimeUnit.NS_WEEK">
            <summary> 周 单位时间（纳秒） ns </summary>
        </member>
        <member name="P:AIO.TimeUnit.Milliseconds">
            <summary> 1毫秒 </summary>
        </member>
        <member name="P:AIO.TimeUnit.Second">
            <summary> 1秒钟 </summary>
        </member>
        <member name="P:AIO.TimeUnit.Minute">
            <summary> 1分钟 </summary>
        </member>
        <member name="P:AIO.TimeUnit.Hour">
            <summary> 1小时 </summary>
        </member>
        <member name="P:AIO.TimeUnit.Day">
            <summary> 1天 </summary>
        </member>
        <member name="F:AIO.TimeUnit.GREENWICH">
            <summary> 格林威治时间UTC参照点：1970年1月1日0时0分0秒 </summary>
        </member>
    </members>
</doc>

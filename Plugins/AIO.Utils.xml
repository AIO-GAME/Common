<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AIO.Utils</name>
    </assembly>
    <members>
        <member name="T:AssemblyInfo">
            <summary>
            程序集信息
            </summary>
        </member>
        <member name="F:AssemblyInfo.KEY">
            <summary>
            密钥信息
            </summary>
        </member>
        <member name="F:AssemblyInfo.PublicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="F:AssemblyInfo.Token">
            <summary>
            公钥Token
            </summary>
        </member>
        <member name="F:AssemblyInfo.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:AssemblyInfo.FileVersion">
            <summary>
            指示编译器使用 Win32 文件版本资源的特定版本号。 Win32 文件版本不需要与程序集的版本号相同。
            </summary>
        </member>
        <member name="F:AssemblyInfo.KeyFile">
            <summary>
            密钥位置
            </summary>
        </member>
        <member name="F:AssemblyInfo.KeyName">
            <summary>
            密钥位置
            </summary>
        </member>
        <member name="F:AssemblyInfo.Company">
            <summary>
            作者
            </summary>
        </member>
        <member name="F:AssemblyInfo.Copyright">
            <summary>
            程序集属性
            </summary>
        </member>
        <member name="F:AssemblyInfo.Culture">
            <summary>
            支持的区域性
            </summary>
        </member>
        <member name="T:AIO.IKeyedCollection`2">
            <summary>
            键迭代器
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:AIO.IKeyedCollection`2.Item(`0@)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="P:AIO.IKeyedCollection`2.Item(System.Int32@)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:AIO.IKeyedCollection`2.TryGetValue(`0@,`1@)">
            <summary>
            尝试获取值
            </summary>
        </member>
        <member name="M:AIO.IKeyedCollection`2.Contains(`0@)">
            <summary>
            存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IKeyedCollection`2.Remove(`0@)">
            <summary>
            移除
            </summary>
            <param name="key">值</param>
            <returns>返回值</returns>
        </member>
        <member name="T:AIO.IMergedCollection`1">
            <summary>
            合并集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AIO.IMergedCollection`1.Includes``1">
            <summary>
            包含
            </summary>
        </member>
        <member name="M:AIO.IMergedCollection`1.Includes(System.Type)">
            <summary>
            包含
            </summary>
        </member>
        <member name="T:AIO.ISet`1">
            <summary>
            这是一个泛型集合接口，保证其元素的唯一性，这个唯一性是由某个比较器定义的。它还支持基本的集合操作，如并集、交集、补集和排他补集。
            </summary>
        </member>
        <member name="M:AIO.ISet`1.Add(`0)">
            <summary>
            将ITEM添加到集合中，如果已存在，则返回false；
            </summary>
            <param name="item"></param>
            <returns>Ture:不存在 False:已存在</returns>
        </member>
        <member name="M:AIO.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            对该集合进行与另一个IEnumerable (T)对象的并集运算；
            </summary>
        </member>
        <member name="M:AIO.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            对该集合进行与另一个IEnumerable (T)对象的交集运算；
            </summary>
        </member>
        <member name="M:AIO.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            将该集合中与其他集合重复的元素移除；
            </summary>
        </member>
        <member name="M:AIO.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            将该集合变换成只包含在该集合或者另一个集合中而不同时属于两个集合的元素；
            </summary>
        </member>
        <member name="M:AIO.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的子集；
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的超集；
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的真超集；
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否是另一个集合的真子集；
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否与另一个集合存在共同的元素；
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            判断该集合是否与另一个集合有完全相同的元素，且仅有这些元素。
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIO.MergedCollection`1">
            <summary>
            合并合计
            </summary>
        </member>
        <member name="M:AIO.MergedCollection`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:AIO.MergedCollection`1.Count">
            <inheritdoc />
        </member>
        <member name="P:AIO.MergedCollection`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.Include``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            包含
            </summary>
        </member>
        <member name="M:AIO.MergedCollection`1.Includes``1">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.Includes(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.ForType``1">
            <summary>
            获取指定类型合集
            </summary>
        </member>
        <member name="M:AIO.MergedCollection`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:AIO.MergedCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:AIO.VariantCollection`2">
            <summary>
            变种泛型 TImplementation必须是TBase的子类或本身
            </summary>
            <typeparam name="TBase"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:AIO.VariantCollection`2.#ctor(System.Collections.Generic.ICollection{`1}@)">
            <summary>
            初始化VariantCollection对象，
            </summary>
            <param name="implementation"></param>
        </member>
        <member name="P:AIO.VariantCollection`2.Implementation">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AIO.VariantCollection`2.Count">
            <summary>
            获取 Implementation 中包含的元素数。
            </summary>
        </member>
        <member name="P:AIO.VariantCollection`2.IsReadOnly">
            <summary>
            获取一个值，该值指示 Implementation 是否为只读。
            </summary>
        </member>
        <member name="M:AIO.VariantCollection`2.GetEnumerator">
            <summary>
            返回一个IEnumerator(TBase)类型的枚举器，用于遍历 implementatio n中的元素；
            </summary>
            <returns>支持在泛型集合上进行简单迭代</returns>
        </member>
        <member name="M:AIO.VariantCollection`2.Add(`0)">
            <summary>
            将某项添加到 implementatio 中。
            </summary>
        </member>
        <member name="M:AIO.VariantCollection`2.Clear">
            <summary>
            从implementation中移除所有元素；
            </summary>
        </member>
        <member name="M:AIO.VariantCollection`2.Contains(`0)">
            <summary>
            判断implementation是否包含某个TBase类型的item。
            如果item不是TImplementation类型，则抛出NotSupportedException异常；
            </summary>
        </member>
        <member name="M:AIO.VariantCollection`2.Remove(`0)">
            <summary>
            从implementation中移除指定的TBase类型的item。
            如果item不是TImplementation类型，则抛出NotSupportedException异常；
            </summary>
        </member>
        <member name="M:AIO.VariantCollection`2.CopyTo(`0[],System.Int32)">
            <summary>
            将implementation中的元素复制到一个TBase类型的数组中。
            如果array为null，则抛出ArgumentNullException异常；
            如果arrayIndex小于0，则抛出ArgumentOutOfRangeException异常；
            如果array的长度减去arrayIndex小于Count，则抛出ArgumentException异常。
            </summary>
        </member>
        <member name="T:AIO.INotifiedCollectionItem">
            <summary>
            通知集合
            </summary>
        </member>
        <member name="M:AIO.INotifiedCollectionItem.BeforeAdd">
            <summary>
            广播之后添加
            </summary>
        </member>
        <member name="M:AIO.INotifiedCollectionItem.AfterAdd">
            <summary>
            广播之前添加
            </summary>
        </member>
        <member name="M:AIO.INotifiedCollectionItem.BeforeRemove">
            <summary>
            广播之后移除
            </summary>
        </member>
        <member name="M:AIO.INotifiedCollectionItem.AfterRemove">
            <summary>
            广播之前移除
            </summary>
        </member>
        <member name="T:AIO.DebugDictionary`2">
            <summary>
            输出字典
            </summary>
        </member>
        <member name="P:AIO.DebugDictionary`2.Item(`0)">
            <summary>
            输出字典Value值
            </summary>
        </member>
        <member name="P:AIO.DebugDictionary`2.label">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:AIO.DebugDictionary`2.debug">
            <summary>
            是否输出
            </summary>
        </member>
        <member name="P:AIO.DebugDictionary`2.Count">
            <inheritdoc cref="T:System.Collections.ICollection" />
        </member>
        <member name="P:AIO.DebugDictionary`2.Keys">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="P:AIO.DebugDictionary`2.Values">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.Clear">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.GetEnumerator">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.ContainsKey(`0)">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.Add(`0,`1)">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.Remove(`0)">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:AIO.DebugDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc cref="T:System.Collections.IDictionary" />
        </member>
        <member name="T:AIO.FlexibleDictionary`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:AIO.FlexibleDictionary`2.Item(`0)">
            <summary>
            获取V值
            </summary>
        </member>
        <member name="T:AIO.INotifyCollectionChanged`1">
            <summary>
            通知集合 改变事件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:AIO.INotifyCollectionChanged`1.ItemAdded">
            <summary>
            添加事件
            </summary>
        </member>
        <member name="E:AIO.INotifyCollectionChanged`1.ItemRemoved">
            <summary>
            移除事件
            </summary>
        </member>
        <member name="E:AIO.INotifyCollectionChanged`1.CollectionChanged">
            <summary>
            修改事件
            </summary>
        </member>
        <member name="T:AIO.HashUtils">
            <summary>
            hash工具
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetHashCode``1(``0@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetHashCode``2(``0@,``1@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetHashCode``3(``0@,``1@,``2@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetHashCode``4(``0@,``1@,``2@,``3@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetHashCode``5(``0@,``1@,``2@,``3@,``4@)">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetHashCodeAlloc(System.Object[])">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.GetMD5(System.IO.Stream,System.Int64)">
            <summary>
            通过HashAlgorithm的TransformBlock方法对流进行叠加运算获得MD5
            实现稍微复杂，但可使用与传输文件或接收文件时同步计算MD5值
            可自定义缓冲区大小，计算速度较快
            </summary>
            <param name="stream">数据流</param>
            <param name="bufferSize">自定义缓冲区大小16K</param>
            <returns>MD5Hash</returns>
        </member>
        <member name="M:AIO.HashUtils.GetMD5ByHashAlgorithm(System.IO.Stream,System.Int64)">
            <summary>
            通过HashAlgorithm的TransformBlock方法对流进行叠加运算获得MD5
            实现稍微复杂，但可使用与传输文件或接收文件时同步计算MD5值
            可自定义缓冲区大小，计算速度较快
            </summary>
            <param name="stream"></param>
            <param name="bufferSize">自定义缓冲区大小16K</param>
        </member>
        <member name="M:AIO.HashUtils.ToHash(System.Byte[])">
            <summary>
            转化为哈希值
            </summary>
        </member>
        <member name="M:AIO.HashUtils.VerifyCrc32Hash(System.String,System.String)">
            <summary>
            比较32位校验码
            </summary>
            <param name="input"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:AIO.IOUtils">
            <summary>
            IO ByteBuffer
            </summary>
            <summary> IO 核心方法 </summary>
            <summary>
            IO 加密
            </summary>
            <summary>
            文件读写操作工具集
            </summary>
            <summary> 获取属性 </summary>
            <summary>
            文件读写操作工具集
            </summary>
            <summary>
            IO 读取
            </summary>
            <summary>
            IO Image
            </summary>
            <summary>
            IO 写入
            </summary>
            <summary>
            ZIP工具
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadByteArray(System.String)">
            <summary>
            加载 Byte Array
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:AIO.IOUtils.ReadByteArrayAsync(System.String)">
            <summary>
            异步 加载 Byte Array
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:AIO.IOUtils.WriteByteArray(System.String,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            写入数据
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteByteArrayAsync(System.String,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            异步 写入数据
            </summary>
        </member>
        <member name="M:AIO.IOUtils.CopyChildNode(System.String,System.String,System.Boolean)">
            <summary>
            拷贝子节点
            </summary>
        </member>
        <member name="M:AIO.IOUtils.CopyFolderPart(System.String,System.String,System.Boolean)">
            <summary>
            复制文件夹及文件 部分 根文件名不会复制 适合重命名
            </summary>
            <param name="Source">原文件路径</param>
            <param name="Dest">目标文件路径</param>
            <param name="Overwrite"></param>
        </member>
        <member name="M:AIO.IOUtils.CopyFolderAll(System.String,System.String,System.Boolean)">
            <summary>
            复制文件夹及文件 全部
            </summary> 根文件名一起复制
            <param name="Source">原文件路径</param>
            <param name="Dest">目标文件路径</param>
            <param name="Overwrite"></param>
        </member>
        <member name="M:AIO.IOUtils.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            复制文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.CopyFile(System.String,System.String,System.Int32)">
            <summary>
            复制文件
            </summary>
            <param name="sourceFilePath">源文件的路径</param>
            <param name="destinationFilePath">目标文件的路径</param>
            <param name="bufferSize">缓冲区大小，用于每次读取和写入的字节数</param>
            <returns>是否成功复制文件</returns>
        </member>
        <member name="M:AIO.IOUtils.Write(System.String,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            将指定数据从offset开始写入length长度到文件中,是否追加到文件尾
            </summary>
            <param name="path">路径</param>
            <param name="bytes">内容</param>
            <param name="offset">写入内容位置</param>
            <param name="length">长度</param>
            <param name="concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.WriteAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            异步写入 将指定数据从offset开始写入length长度到文件中,是否追加到文件尾
            </summary>
            <param name="path">路径</param>
            <param name="bytes">内容</param>
            <param name="offset">写入内容位置</param>
            <param name="length">长度</param>
            <param name="concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.ReadAsync(System.String)">
            <summary>
            异步读取
            </summary>
        </member>
        <member name="M:AIO.IOUtils.Read(System.String)">
            <summary>
            读取
            </summary>
        </member>
        <member name="M:AIO.IOUtils.EncodingBitByte(System.Byte)">
            <summary>
            字节位运算加密
            </summary>
        </member>
        <member name="M:AIO.IOUtils.FindPaths(System.String,System.IO.SearchOption,System.String[])">
            <summary>
            查询匹配 返回符合条件的路径
            </summary>
            <param name="dir">文件夹路径</param>
            <param name="partterns">条件 "*value*"</param>
            <param name="op">匹配模式</param>
            <returns></returns>
        </member>
        <member name="M:AIO.IOUtils.GetFilesInfo(System.String,System.Func{System.IO.FileInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取当前所有文件夹中所有文件信息
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜查模式</param>
            <returns>所有文件信息数组</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFilesInfo(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取当前所有文件夹中所有文件信息
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件 绝对路径
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹 绝对路径</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFiles(System.String,System.Func{System.IO.FileInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件 绝对路径
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹 绝对路径</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFilesRelative(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件 相对路径
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹 相对路径</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFilesRelative(System.String,System.Func{System.IO.FileInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件 相对路径
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹 相对路径</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFilesName(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件名称
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件名称</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFilesName(System.String,System.Func{System.IO.FileInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件名称
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件名称</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFlodersInfo(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取文件夹数组
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹名称</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFlodersInfo(System.String,System.Func{System.IO.DirectoryInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取文件夹数组
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹名称</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFloders(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取文件夹数组
            </summary>
            <param name="value">路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹名称</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFloders(System.String,System.Func{System.IO.DirectoryInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取文件夹数组
            </summary>
            <param name="value">路径</param>
            <param name="filtration">过滤函数 Ture:过滤 False:不过滤</param>
            <param name="pattern">匹配模式</param>
            <param name="option">搜索模式</param>
            <returns>所有文件夹名称</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFlodersName(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件夹名 不含子文件夹 不包含自己
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetFlodersName(System.String,System.Func{System.IO.DirectoryInfo,System.Boolean},System.String,System.IO.SearchOption)">
            <summary>
            获取该文件夹下所有文件夹名 不含子文件夹 不包含自己
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetFileSize(System.String,System.Single)">
            <summary>
            返回文件大小 默认单位KB
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetFileLength(System.String)">
            <summary>
            返回文件字节长度
            </summary>
            <param name="Path">文件相对路径</param>
        </member>
        <member name="M:AIO.IOUtils.GetFileName(System.String,System.Boolean)">
            <summary>
            返回文件名，不含路径 默认带文件名后缀
            </summary>
            <param name="file">文件路径</param>
            <param name="extension">是否有后缀</param>
            <returns>文件名</returns>
        </member>
        <member name="M:AIO.IOUtils.GetFileInfo(System.String)">
            <summary>
            获取当前所有文件夹中所有文件信息
            </summary>
            <param name="value">文件夹路径</param>
        </member>
        <member name="M:AIO.IOUtils.GetFileHash(System.String)">
            <summary>
            获取文件的哈希值
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetFileMD5(System.String,System.Int64)">
            <summary>
            获取文件的MD5值
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetMD5ByHashAlgorithm(System.IO.Stream,System.Int64)">
            <summary>
            通过HashAlgorithm的TransformBlock方法对流进行叠加运算获得MD5
            实现稍微复杂，但可使用与传输文件或接收文件时同步计算MD5值
            可自定义缓冲区大小，计算速度较快
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetLastWriteTimeUtc(System.String)">
            <summary>
            获取最后写入时间
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetCreationTimeUtc(System.String)">
            <summary>
            获取创建文件时间
            </summary>
        </member>
        <member name="M:AIO.IOUtils.GetAttributes(System.String)">
            <summary>
            获取文件属性
            </summary>
        </member>
        <member name="F:AIO.IOUtils.EMPTY_BYTES">
            <summary> 空字节数组 </summary>
        </member>
        <member name="M:AIO.IOUtils.Exists(System.String)">
            <summary>
            判断当前路径是否存在 不管是以文件夹 还是 文件的形式存在
            </summary>
            <returns>True:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.IOUtils.FileExists(System.String@)">
            <summary>
            判断文件是否存在
            </summary>
            <returns>True:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.IOUtils.DirExists(System.String@)">
            <summary>
            判断目录是否存在
            </summary>
            <returns>True:存在 False:不存在</returns>
        </member>
        <member name="M:AIO.IOUtils.DeleteFile(System.String@)">
            <summary>
            删除单个文件
            </summary>
            <param name="path">文件相对路径</param>
        </member>
        <member name="M:AIO.IOUtils.DeleteFile(System.IO.FileInfo@)">
            <summary>
            删除单个文件
            </summary>
            <param name="path">文件相对路径</param>
        </member>
        <member name="M:AIO.IOUtils.DeleteFiles(System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            删除单个文件
            </summary>
            <param name="paths">文件相对路径</param>
        </member>
        <member name="M:AIO.IOUtils.DeleteFilesAsync(System.String,System.String,System.IO.SearchOption)">
            <summary>
            删除指定文件夹下 指定类型文件
            </summary>
            <param name="folder">文件夹路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">查询模式</param>
        </member>
        <member name="M:AIO.IOUtils.DeleteFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            删除指定文件夹下 指定类型文件
            </summary>
            <param name="folder">文件夹路径</param>
            <param name="pattern">匹配模式</param>
            <param name="option">查询模式</param>
        </member>
        <member name="M:AIO.IOUtils.DeleteFolderAsync(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFolder(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFolderAsync(System.IO.DirectoryInfo,System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFolder(System.IO.DirectoryInfo,System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFlodersAsync(System.Collections.Generic.IEnumerable{System.String},System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFloders(System.Collections.Generic.IEnumerable{System.String},System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFloders(System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo},System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.DeleteFlodersAsync(System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo},System.IO.SearchOption,System.Boolean)">
            <summary>
            删除文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.CreateFloder(System.String,System.Boolean)">
            <summary>
            创建文件夹
            </summary>
            <param name="folder">文件夹路径</param>
            <param name="clear">清除</param>
        </member>
        <member name="M:AIO.IOUtils.ClearFloder(System.String)">
            <summary>
            清空当前文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ClearFloder(System.IO.DirectoryInfo)">
            <summary>
            清空当前文件夹
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadFileAsync(System.String)">
            <summary>
            使用异步 从文件中读取数据
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadFile(System.String)">
            <summary>
            从文件中读取数据
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteFileAsync(System.String,System.Byte[],System.Boolean)">
            <summary>
            将数据写入文件,是否追加到文件尾 默认覆盖文件
            </summary>
            <param name="Path">路径</param>
            <param name="Bytes">内容</param>
            <param name="Concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.WriteFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            将数据写入文件,是否追加到文件尾 默认覆盖文件
            </summary>
            <param name="Path">路径</param>
            <param name="Bytes">内容</param>
            <param name="Concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.ReadPhoto(System.String)">
            <summary>
            读取图片
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadUnicode(System.String)">
            <summary>
            按照UTF-8读取文本文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteUnicode(System.String,System.String,System.Boolean)">
            <summary>
            将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.ReadText(System.String,System.String)">
            <summary>
            按照指定编码读取文本文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadUnicodeAsync(System.String)">
            <summary>
            异步 按照UTF-8读取文本文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteUnicodeAsync(System.String,System.String,System.Boolean)">
            <summary>
            异步 将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.WriteText(System.String,System.String,System.String,System.Boolean)">
            <summary>
            将字符串按照指定编码写入文件,是否追加到文件尾
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Charset">保存文本格式</param>
            <param name="Concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.WriteTextAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            异步 将字符串按照指定编码写入文件,是否追加到文件尾
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Charset">保存文本格式</param>
            <param name="Concat">true:拼接 | false:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.ReadTextAsync(System.String,System.String)">
            <summary>
            异步 按照指定编码读取文本文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteUTF8(System.String,System.String,System.Boolean)">
            <summary>
            将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.WriteUTF8(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.ReadUTF8(System.String)">
            <summary>
            按照UTF-8读取文本文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadUTF8Async(System.String)">
            <summary>
            异步 按照UTF-8读取文本文件
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteUTF8Async(System.String,System.String,System.Boolean)">
            <summary>
            异步 将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.WriteUTF8Async(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            异步 将字符串按照UTF-8写入文件,默认覆盖
            </summary>
            <param name="Path">路径</param>
            <param name="Text">内容</param>
            <param name="Concat">Ture:追加 False:覆盖</param>
        </member>
        <member name="M:AIO.IOUtils.ReadJson``1(System.String,System.String)">
            <summary>
            读取Json文件 根据编码
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadJsonAsync``1(System.String,System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadJsonUTF8``1(System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadJsonUTF8Async``1(System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteJson``1(System.String,``0,System.Boolean,System.String)">
            <summary>
            写入Json文件 根据编码
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteJsonAsync``1(System.String,``0,System.Boolean,System.String)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteJsonUTF8``1(System.String,``0,System.Boolean)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteJsonUTF8Async``1(System.String,``0,System.Boolean)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadXml``1(System.String,System.String)">
            <summary>
            读取Json文件 根据编码
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadXmlAsync``1(System.String,System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadXmlUTF8``1(System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadXmlUTF8Async``1(System.String)">
            <summary>
            读取Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteXml``1(System.String,``0,System.String)">
            <summary>
            写入Json文件 根据编码
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteXmlAsync``1(System.String,``0,System.String)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteXmlUTF8``1(System.String,``0)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WriteXmlUTF8Async``1(System.String,``0)">
            <summary>
            写入Json文件 编码utf-8
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadPList(System.String)">
            <summary>
            读取 Plist
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePList(System.String,AIO.PList.PListRoot)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePList(System.String,AIO.PList.PListDict)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePListAsync(System.String,AIO.PList.PListRoot)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePListAsync(System.String,AIO.PList.PListDict)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePListBinary(System.String,AIO.PList.PListRoot)">
            <summary>
            写入 Plist 二进制
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePListBinary(System.String,AIO.PList.PListDict)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePListBinaryAsync(System.String,AIO.PList.PListRoot)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.WritePListBinaryAsync(System.String,AIO.PList.PListDict)">
            <summary>
            写入 Plist XML
            </summary>
        </member>
        <member name="M:AIO.IOUtils.ReadZip(System.String,System.String,System.Action{System.Single},System.Action{System.String})">
            <summary>
            解压
            </summary>
            <param name="zip">解压包路径</param>
            <param name="save">保存路径</param>
            <param name="progressAction">进度回调</param>
            <param name="entryAction"></param>
        </member>
        <member name="T:AIO.ZipUitls">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.ZipUitls.Compress(System.String@)">
            <summary>
            
            </summary>
            <param name="srcFile"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ZipUitls.Compress(System.Byte[],System.Int32@)">
            <summary>
            解压ZIP文件
            </summary>
            <param name="bts"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ZipUitls.Decompress(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bts"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ZipUitls.Decompress(System.Byte[],System.Text.Encoding,System.Int32)">
            <summary>
            
            </summary>
            <param name="bts"></param>
            <param name="encoding"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:AIO.HexUtils">
            <summary>
            16进制操作类
            </summary>
        </member>
        <member name="F:AIO.HexUtils.HEX_BIT">
            <summary>
            16进制位控制符
            </summary>
        </member>
        <member name="F:AIO.HexUtils.EMPTY_BYTE_ARRAY">
            <summary>
            空字节数组
            </summary>
        </member>
        <member name="F:AIO.HexUtils.HEX_DIGIT">
            <summary>
            大写16进制数字字符
            </summary>
        </member>
        <member name="F:AIO.HexUtils.HEX_DIGIT_LOWER">
            <summary>
            小写写16进制数字字符
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToDigit(System.Char@)">
            <summary>
            将16进制字符转换为数字
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHexChar(System.Int32@,System.Boolean@)">
            <summary>
            将数字转换为16进制字符
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Char@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            将一个char转换为16进制并添加到字节缓存
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Byte@,System.Boolean@)">
            <summary>
            将一个字节转换为16进制
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Byte@,System.Text.StringBuilder@,System.Boolean@)">
            <summary>
            将一个字节转换为16进制 ，并添加到字节缓存
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Int16,System.Boolean)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Int16,System.Text.StringBuilder,System.Boolean)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Int32,System.Boolean)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Int32,System.Text.StringBuilder,System.Boolean)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Int64@,System.Boolean@)">
            <summary>
            转换为16进制
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Collections.Generic.IList{System.Byte}@)">
            <summary>
            转换为16进制数据
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Collections.Generic.IList{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            转换为16进制数据
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Collections.Generic.IList{System.Byte}@,System.Boolean@)">
            <summary>
            转换为16进制数据
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ToHex(System.Collections.Generic.IList{System.Byte}@,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            转换为16进制数据
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ParseByte(System.String@)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ParseShort(System.String)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ParseInt(System.String)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ParseLong(System.String@)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ParseLong(System.String@,System.Int32,System.Int32)">
            <summary>
            将指定16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="M:AIO.HexUtils.ParseLong(System.Collections.Generic.IList{System.Char}@,System.Int32,System.Int32)">
            <summary>
            将指定16进制字符数组转换为10进制数字
            </summary>
        </member>
        <member name="T:AIO.MathUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.InMask(System.Int32,System.Int32@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.InMask(System.Int64,System.Int64@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.OutMask(System.Int32,System.Int32@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.OutMask(System.Int64,System.Int64@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.ArrayPerCent(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            数组百分比计算
            </summary>
        </member>
        <member name="M:AIO.MathUtils.ArrayPerCent(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            数组百分比计算
            </summary>
        </member>
        <member name="M:AIO.MathUtils.ArrayPerCent(System.Collections.Generic.IList{System.Single}@)">
            <summary>
            数组百分比计算
            </summary>
        </member>
        <member name="F:AIO.MathUtils.EARTH_RADIUS">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.MathUtils.Deg2Rad">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.MathUtils.Rad2Deg">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Distance(System.Single,System.Single,System.Single,System.Single)">
            <summary> 
            距离
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Sin(System.Double)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Asin(System.Double)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Cos(System.Double)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Acos(System.Double)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Abs(System.Double)">
            <summary> 
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Abs(System.Single)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Abs(System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Round(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Ceil(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Floor(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Mod(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.GetGPSDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.Rad(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.GetDistance(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MathUtils.GetDecimal(System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIO.SortUtils">
            <summary>
            排序工具
            默认排序方向 从小到大
            </summary>
        </member>
        <member name="M:AIO.SortUtils.AutomaticArray``1(System.Array@,``0@)">
            <summary>
            自动扩容，并保存数据
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Counting(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            计数排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Counting(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            计数排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Radix(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Radix(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Radix(System.Collections.Generic.IList{System.Int16}@)">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bucket(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bucket(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bucket(System.Collections.Generic.IList{System.Int16}@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bucket(System.Collections.Generic.IList{System.Single}@,System.Int32@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bucket(System.Collections.Generic.IList{System.Double}@,System.Int32@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bucket(System.Collections.Generic.IList{System.Decimal}@,System.Int32@)">
            <summary>
            桶排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.InsertIntoLinkList``1(System.Collections.Generic.LinkedList{``0}@,``0@)">
            <summary>  
            按升序插入 linklist   
            </summary>  
            <param name="linkedList"> 要排序的链表 </param>  
            <param name="num"> 要插入排序的数字 </param>  
        </member>
        <member name="M:AIO.SortUtils.Merge``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            归并排序
            数据量:1000以下适用
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Merge``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            归并排序
            数据量:1000以下适用
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Heap``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            堆排序
            数据量:1000以下适用
            </summary>
        </member>
        <member name="M:AIO.SortUtils.HeapSort_MaxHeaping``1(System.Collections.Generic.IList{``0}@,System.Int32@,System.Int32@)">
            <summary>
            将指定的结点调整为堆。
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Heap``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            堆排序
            数据量:1000以下适用
            </summary>
        </member>
        <member name="M:AIO.SortUtils.HeapSort_MaxHeaping``1(System.Collections.Generic.IList{``0}@,System.Int32@,System.Int32@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            将指定的结点调整为堆。
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Select``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            选择排序 数据量:100以下适用
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Select``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            选择排序 数据量:100以下适用
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Shell``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            希尔排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Shell``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            希尔排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Insert``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            插入排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Insert``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            插入排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Quick``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            快速排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Quick``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            快速排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bubble``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            单向冒泡排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.Bubble``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            单向冒泡排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.BubbleTwoWay``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            双向冒泡排序
            </summary>
        </member>
        <member name="M:AIO.SortUtils.BubbleTwoWay``1(System.Collections.Generic.IList{``0}@,System.Func{``0,``0,System.Int32}@)">
            <summary>
            双向冒泡排序
            </summary>
        </member>
        <member name="T:AIO.StatusUtils">
            <summary>
            状态值比较
            </summary>
            <summary>
            状态值比较类
            </summary>
            <summary>
            状态值比较类
            </summary>
            <summary>
            状态值比较类
            </summary>
            <summary>
            状态值比较类
            </summary>
            <summary>
            状态比较 推荐使用Int值 并且 不推荐使用枚举 装箱拆箱性能消耗与int值相比 差距是两倍
            实例 10000000次
            耗时 枚举转换 4
            耗时 Int转换  2
            耗时 long转换  4
            耗时 Convert转换  1504
            </summary>
        </member>
        <member name="M:AIO.StatusUtils.Square(System.Int32,System.Int32)">
            <summary>
            2次幂运算 判断是否相等
            </summary>
            <param name="index">次幂值 T:1,2,3..</param>
            <param name="mask">对比值 T:4,8,16,32..</param>
            <returns>Ture:相等 Flase:不相等</returns>
            <!--
            1 << 2 = 4 相等
            1 << 3 = 8 不相等
            -->
        </member>
        <member name="M:AIO.StatusUtils.Square(System.Int64,System.Int64)">
            <summary>
            2次幂运算 判断是否相等
            </summary>
            <param name="index">次幂值 T:1,2,3..</param>
            <param name="mask">对比值 T:4,8,16,32..</param>
            <returns>Ture:相等 Flase:不相等</returns>
        </member>
        <member name="M:AIO.StatusUtils.Mix(System.Enum,System.Enum)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AIO.StatusUtils.Mix(System.Byte@,System.Byte@)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AIO.StatusUtils.Mix(System.Int16@,System.Int16@)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AIO.StatusUtils.Mix(System.Int32@,System.Int32@)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AIO.StatusUtils.Mix(System.Int64@,System.Int64@)">
            <summary>
            源状态和指定状态是否有交集
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>true有相交</returns>
        </member>
        <member name="M:AIO.StatusUtils.Set``1(``0,``0,System.Boolean@)">
            <summary>
            设置状态 要求枚举结构顺序为 幂次序
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <param name="b">Ture 状态添加 false 状态移除</param>
        </member>
        <member name="M:AIO.StatusUtils.Set(System.Int16@,System.Int16@,System.Boolean@)">
            <summary>
            设置状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <param name="b">Ture 状态添加 false 状态移除</param>
        </member>
        <member name="M:AIO.StatusUtils.Set(System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            设置状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <param name="b">Ture 状态添加 false 状态移除</param>
        </member>
        <member name="M:AIO.StatusUtils.Set(System.Int64@,System.Int64@,System.Boolean@)">
            <summary>
            设置状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <param name="b">Ture 状态添加 false 状态移除</param>
        </member>
        <member name="M:AIO.StatusUtils.Has(System.Enum@,System.Enum@)">
            <summary>
            是否有指定状态（包含指定状态，但不限于指定状态）
            </summary>
        </member>
        <member name="M:AIO.StatusUtils.Has(System.Int16@,System.Int16@)">
            <summary>
            是否有指定状态（包含指定状态，但不限于指定状态）
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Has(System.Int32@,System.Int32@)">
            <summary>
            是否有指定状态（包含指定状态，但不限于指定状态）
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Has(System.Int64@,System.Int64@)">
            <summary>
            是否有指定状态（包含指定状态，但不限于指定状态）
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only``1(``0@,``0@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.Int32@,System.Int32@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.Int64@,System.UInt32@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.Int64@,System.Int64@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.UInt64@,System.UInt64)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.Int16@,System.Int16@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.UInt16@,System.UInt16@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.Byte@,System.Byte@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Only(System.Single@,System.Single@)">
            <summary>
            是否是指定状态 仅仅是指定状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
        </member>
        <member name="M:AIO.StatusUtils.Del``1(``0@,``0@)">
            <summary>
            删除状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="M:AIO.StatusUtils.Del(System.Byte@,System.Byte@)">
            <summary>
            删除状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="M:AIO.StatusUtils.Del(System.Int16@,System.Int16@)">
            <summary>
            删除状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="M:AIO.StatusUtils.Del(System.Int32@,System.Int32@)">
            <summary>
            删除状态
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="M:AIO.StatusUtils.Del(System.Int64@,System.Int64@)">
            <summary>
            删除状态 2次幂序
            </summary>
            <param name="source">源状态</param>
            <param name="status">操作状态</param>
            <returns>新状态</returns>
        </member>
        <member name="T:AIO.TimeUtils">
            <summary>
            时间方法库
            </summary>
        </member>
        <member name="P:AIO.TimeUtils.StartBeforeDay">
            <summary>
            昨天开始时间 单位毫秒
            </summary>
        </member>
        <member name="P:AIO.TimeUtils.StartYesterDay">
            <summary>
            昨天开始时间 单位毫秒
            </summary>
        </member>
        <member name="P:AIO.TimeUtils.StartToday">
            <summary>
            当天开始时间 单位毫秒
            </summary>
        </member>
        <member name="P:AIO.TimeUtils.StartTomorrowDay">
            <summary>
            明天开始时间 单位毫秒
            </summary>
        </member>
        <member name="P:AIO.TimeUtils.StartAfterDay">
            <summary>
            后天开始时间 单位毫秒
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetCurrTimeStr(System.String)">
            <summary>
            获取当前时间 文字格式
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetCurrTime(AIO.TimeUnit.SencondUnit)">
            <summary>
            获取当前时间搓
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetDateTime(System.String,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取时间搓
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.Format(System.Int64,System.String,AIO.TimeUnit.SencondUnit)">
            <summary>
            格式化时间，参数：格林威治时间，格式化格式（具体见文件末尾）
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetDateTime(System.Int64,AIO.TimeUnit.SencondUnit)">
            <summary>
            © 获取DateTime 时间磋单位支持 纳秒 微秒 毫秒 秒
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetTimeSpan(System.Int64,AIO.TimeUnit.SencondUnit)">
            <summary>
            © 获取TimeSpan 时间磋单位支持 纳秒 微秒 毫秒 秒
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.Normalize(System.DateTime,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取指定单位的时间搓
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetCurrDateToDay(System.Int32,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取当天差距 时间信息
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetTimeStartByType(System.Int64,AIO.TimeUnit.DateTimeUnit,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取开始时间
            </summary>
            <param name="time">时间搓</param>
            <param name="DateType">获取类型 年 季 月 周 日</param>
            <param name="Unit">时间搓 单位 纳秒 微秒 毫秒 秒</param>
        </member>
        <member name="M:AIO.TimeUtils.GetTimeEndByType(System.Int64,AIO.TimeUnit.DateTimeUnit,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取结束时间
            </summary>
            <param name="time">时间搓</param>
            <param name="DateType">获取类型 年 季 月 周 日</param>
            <param name="Unit">时间搓 单位 纳秒 微秒 毫秒 秒</param>
        </member>
        <member name="M:AIO.TimeUtils.GetCountDown(System.Int64,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取时间倒计时字符串表示(ms) 01:59:08
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetPreHumanityTime(System.Int64,AIO.TimeUnit.SencondUnit)">
            <summary>
            获取传入时间距离当前时间的文字描述
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.CompareNowTime(System.DateTime)">
            <summary>
            与当前时间比较 如果小于当前时间为Ture
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.CompareNowTime(System.Int64,AIO.TimeUnit.SencondUnit)">
            <summary>
            与当前时间比较 如果小于当前时间为Ture
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.DateStringFromNow(System.DateTime)">
            <summary>
            求离最近发表时间的函数
            </summary>
            <returns> 返回时间描述 </returns>
        </member>
        <member name="M:AIO.TimeUtils.CompareDateDay(System.String,System.String,System.Int32)">
            <summary>
            日期比较
            </summary>
            <param name="today">当前日期</param>
            <param name="writeDate">输入日期</param>
            <param name="n">比较天数</param>
            <returns>大于天数返回true，小于返回false</returns>
        </member>
        <member name="M:AIO.TimeUtils.GetDisTime(System.DateTime,System.DateTime,System.String)">
            <summary>
            获取两时间相差
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.GetDisTime(System.Int64,System.Int64,System.String)">
            <summary>
            获取两时间相差
            </summary>
        </member>
        <member name="M:AIO.TimeUtils.IsToday(System.Int64,System.Int64,AIO.TimeUnit.SencondUnit)">
            <summary>
            判断是否同日
            </summary>
        </member>
        <member name="T:AIO.HttpDownloadInfo">
            <summary>
            文件下载信息
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.URL">
            <summary>
            下载地址
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.SavePath">
            <summary>
            保存路径
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.FullPath">
            <summary>
            保存路径
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Name">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.DownloadedSize">
            <summary>
            下载文件大小
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Exception">
            <summary>
            下载异常信息
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Time">
            <summary>
            下载总时间
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.IsResume">
            <summary>
            是否为断点续传
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.MD5">
            <summary>
            文件MD5
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Stopwatch">
            <summary>
            测量时间
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.Response">
            <summary>
            请求体
            </summary>
        </member>
        <member name="P:AIO.HttpDownloadInfo.CancelToken">
            <summary>
            取消
            </summary>
        </member>
        <member name="M:AIO.HttpDownloadInfo.#ctor(System.String@,System.String@,System.String@)">
            <summary>
            下载信息
            </summary>
            <param name="url">下载地址</param>
            <param name="savePath">保存文件夹</param>
            <param name="name">文件名</param>
        </member>
        <member name="M:AIO.HttpDownloadInfo.Cancel">
            <summary>
            取消下载
            </summary>
        </member>
        <member name="M:AIO.HttpDownloadInfo.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:AIO.HttpDownload">
            <summary>
            Http下载
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.Urls">
            <summary>
            文件地址
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.SavePath">
            <summary>
            保存地址
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.Client">
            <summary>
            Http客户端
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.MD5Client">
            <summary>
            Http客户端
            </summary>
        </member>
        <member name="P:AIO.HttpDownload.MaxDownloadNum">
            <summary>
            最大下载数量
            </summary>
        </member>
        <member name="F:AIO.HttpDownload.ProgressAction">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="F:AIO.HttpDownload.CompleteAction">
            <summary>
            完成回调
            </summary>
        </member>
        <member name="F:AIO.HttpDownload.ExceptionAction">
            <summary>
            完成回调
            </summary>
        </member>
        <member name="F:AIO.HttpDownload.ClientHandler">
            <summary>
            Http头信息
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.#ctor(System.Collections.Generic.IList{System.String}@,System.String@)">
            <summary>
            初始化
            </summary>
            <param name="downloadUrls">下载地址</param>
            <param name="downloadPath">保存地址</param>
        </member>
        <member name="M:AIO.HttpDownload.#ctor(System.Collections.Generic.IList{System.String}@,System.String@,System.Net.Http.HttpClientHandler@)">
            <summary>
            初始化
            </summary>
            <param name="downloadUrls">下载地址</param>
            <param name="downloadPath">保存地址</param>
            <param name="handler">表头参数</param>
        </member>
        <member name="M:AIO.HttpDownload.#ctor(System.String@,System.String@)">
            <summary>
            初始化
            </summary>
            <param name="downloadUrls">下载地址</param>
            <param name="downloadPath">保存地址</param>
        </member>
        <member name="M:AIO.HttpDownload.Async(System.Int32)">
            <summary>
            开启异步下载
            </summary>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:AIO.HttpDownload.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.SetDownloadNum(System.Int32@)">
            <summary>
            设置最大下载数量
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.OnComplete(System.Action{AIO.HttpDownloadInfo}@)">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.OnException(System.Action{AIO.HttpDownloadInfo}@)">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.OnProgress(System.Action{AIO.HttpDownloadInfo}@)">
            <summary>
            进度回调
            </summary>
        </member>
        <member name="M:AIO.HttpDownload.GetAwaiter">
            <summary>
            获取异步等待器
            </summary>
        </member>
        <member name="T:AIO.HttpUtils">
            <summary>
            Http 工具类
            </summary>
        </member>
        <member name="T:AIO.RandomUtils">
            <summary>
            随机数工具类
            </summary>
        </member>
        <member name="M:AIO.RandomUtils.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.RandomUtils.Refresh(System.Random@)">
            <summary>
            
            </summary>
            <param name="random"></param>
        </member>
        <member name="M:AIO.RandomUtils.Refresh(System.Int32@)">
            <summary>
            
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:AIO.RandomUtils.RandArray``1(System.Int32,System.Collections.Generic.ICollection{``0}@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandArray``1(System.Int32@,System.Collections.Generic.IList{``0}@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandArray``1(System.Int32,System.Collections.Generic.IList{``0},System.Int32@,System.Int32)">
            <param name="array"></param>
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
            <param name="count"></param>
        </member>
        <member name="M:AIO.RandomUtils.RandArray``2(System.Int32@,System.Collections.Generic.IDictionary{``0,``1}@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="array"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayValue``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayValue``1(System.Collections.Generic.ICollection{``0}@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayValue``2(System.Collections.Generic.IDictionary{``0,``1}@)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayValue``1(System.Collections.Generic.IList{``0}@,System.Int32@,System.Int32@)">
            <param name="array"></param>
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayValue``1(System.Collections.Generic.ICollection{``0}@,System.Int32@,System.Int32)">
            <param name="array"></param>
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayValue``2(System.Collections.Generic.IDictionary{``0,``1}@,System.Int32@,System.Int32)">
            <param name="array"></param>
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayWeight(System.Collections.Generic.IList{System.Single}@)">
            <summary>
            随机权重 
            </summary>
            <param name="weights">传入数组的总和 应为1</param>
        </member>
        <member name="M:AIO.RandomUtils.RandArrayWeight``1(System.Collections.Generic.IList{System.Single}@,System.Collections.Generic.IList{``0}@)">
            <summary>
            随机权重
            </summary>
            <param name="weights">传入数组的总和 应为1</param>
            <param name="values"></param>
        </member>
        <member name="M:AIO.RandomUtils.RandBool">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandBoolArray(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandBytes(System.Byte@,System.Int32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandByteArray(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandByteArray(System.Int32@,System.Int32@,System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:AIO.RandomUtils.RandSByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandSByteArray(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandSByteArray(System.Int32@,System.SByte@,System.SByte@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt16(System.UInt16@,System.Int32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt16Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt32(System.UInt32@,System.UInt32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt32Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt64(System.UInt64@,System.UInt64@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandUInt64Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt16(System.Int16@,System.Int32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandInt16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt16Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt32(System.Int32@,System.Int32@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandInt32Array(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <param name="count"></param>
            <param name="minValue">下限-包含</param>
            <param name="maxValue">上限-不包含</param>
            <param name="hasRepeat">是否包含重复 Ture:包含 False:不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandInt32ArrayWeight(System.Collections.Generic.IList{System.Int32})">
            <summary>
            
            </summary>
            <param name="weights"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt32ArrayWeight(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            
            </summary>
            <param name="weights"></param>
            <param name="weightRandomMinVal"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandInt64(System.Int64@,System.Int64@)">
            <param name="lower">下限-包含</param>
            <param name="upper">上限-不包含</param>
        </member>
        <member name="M:AIO.RandomUtils.RandInt64Array(System.Int32@)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandFloat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandFloat(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="hasNan"></param>
            <param name="hasInfinity"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.RandDouble">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.RandomUtils.BreakArray``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <param name="array"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AIO.RandomUtils.BreakArray``1(System.Collections.Generic.IList{``0},System.Int32@,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:AIO.RandomUtils.NextLong(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:AIO.ParseUtils">
            <summary>
            Dat文件 解析
            </summary>
            <summary>
            Json 工具类
            </summary>
            <see>
                <cref>https://www.newtonsoft.com/json/help/html/N_Newtonsoft_Json.htm</cref>
            </see>
            <summary>
            XML 工具类
            </summary>
            <summary>
            Yaml 解析
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.BinarySerialize``1(``0)">
            <summary>
            序列化 未加密
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.Base64Serialize``1(``0)">
            <summary>
            序列化 未加密
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.Base64Deserialize``1(System.String)">
            <summary>
            反序列化 未加密
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.BinaryDeserialize``1(System.Byte[])">
            <summary>
            反序列化 未加密
            </summary>
        </member>
        <member name="F:AIO.ParseUtils.normalSettings">
            <see>
                <cref>https://www.newtonsoft.com/json/help/html/Properties_T_Newtonsoft_Json_JsonSerializerSettings.htm</cref>
            </see>
        </member>
        <member name="P:AIO.ParseUtils.JSONNormalSettings">
            <summary>
            Json默认设置
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonSerialize(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonSerialize``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonDeserialize(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonDeserialize``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonDeserialize(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonPopulateObject``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化 填充对象
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.JsonPopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化 填充对象
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.UriParamSerialize(System.Object)">
            <summary>
            Model对象转换为uri网址参数形式
            </summary>
            <param name="obj">Model对象</param>
        </member>
        <member name="M:AIO.ParseUtils.XmlSerialize``1(``0,System.String,System.Text.Encoding)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.XmlDeserialize``1(System.String,System.Text.Encoding)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.YamlSerialize(System.Object)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.YamlToJson(System.String)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:AIO.ParseUtils.YamlDeserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="T:AIO.PList.IPListElementExten">
            <summary>
            A .Net representation of a  PList element exten
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsString(AIO.PList.IPListElement)">
            <summary>
            转换为 String
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsReal(AIO.PList.IPListElement)">
            <summary>
            转换为 Real
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsBool(AIO.PList.IPListElement)">
            <summary>
            转换为 Bool
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsDict(AIO.PList.IPListElement)">
            <summary>
            转换为 Dict
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsInteger(AIO.PList.IPListElement)">
            <summary>
            转换为 Integer
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsDate(AIO.PList.IPListElement)">
            <summary>
            转换为 Date
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsData(AIO.PList.IPListElement)">
            <summary>
            转换为 Data
            </summary>
        </member>
        <member name="M:AIO.PList.IPListElementExten.AsArray(AIO.PList.IPListElement)">
            <summary>
            转换为 Null
            </summary>
        </member>
        <member name="T:AIO.PList.IPListElement">
            <summary>
            A .Net representation of a  PList element
            </summary>
        </member>
        <member name="P:AIO.PList.IPListElement.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.IPListElement.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="M:AIO.PList.IPListElement.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.IPListElement.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>The count of PList elements in this element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="P:AIO.PList.IPListElement.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.IPListElement.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.IPListElement.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListBinaryReader">
            <summary>
            A class, used to read binary formated <see cref="T:CE.iPhone.IPListElemnet"/> from a stream
            </summary>
        </member>
        <member name="P:AIO.PList.PListBinaryReader.BaseStream">
            <summary>
            Gets the basestream.
            </summary>
            <value>The basestream.</value>
        </member>
        <member name="P:AIO.PList.PListBinaryReader.ElementIdxSize">
            <summary>
            Gets or sets the size of the element idx.
            </summary>
            <value>The size of the element idx.</value>
        </member>
        <member name="M:AIO.PList.PListBinaryReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListBinaryReader"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListBinaryReader.Read(System.IO.Stream)">
            <summary>
            Reads a binary formated <see cref="T:CE.iPhone.IPListElemnet"/> from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElemnet"/>, read from the specified stream</returns>
        </member>
        <member name="P:AIO.PList.PListBinaryReader.CurrentElementTypeCode">
            <summary>
            Gets the current element type code.
            </summary>
            <value>The current element type code.</value>
        </member>
        <member name="P:AIO.PList.PListBinaryReader.CurrentElementLength">
            <summary>
            Gets the length of the current element.
            </summary>
            <value>The length of the current element.</value>
        </member>
        <member name="M:AIO.PList.PListBinaryReader.ReadInternal(System.Int32)">
            <summary>
            Reads the <see cref="T:CE.iPhone.IPListElemnet"/> at the specified idx.
            </summary>
            <param name="elemIdx">The elem idx.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElemnet"/> at the specified idx.</returns>
        </member>
        <member name="M:AIO.PList.PListBinaryReader.ReadInternal">
            <summary>
            Reads the <see cref="T:CE.iPhone.IPListElemnet"/> at the current stream position.
            </summary>
            <returns>The <see cref="T:CE.iPhone.IPListElemnet"/> at the current stream position.</returns>
        </member>
        <member name="T:AIO.PList.PListBinaryWriter">
            <summary>
            A class, used to write a <see cref="T:CE.iPhone.IPListElemnet"/>  binary formated to a stream
            </summary>
        </member>
        <member name="F:AIO.PList.PListBinaryWriter.s_PListHeader">
            <summary>
            The Header (bplist00)
            </summary>
        </member>
        <member name="P:AIO.PList.PListBinaryWriter.BaseStream">
            <summary>
            Gets the basestream.
            </summary>
            <value>The basestream.</value>
        </member>
        <member name="P:AIO.PList.PListBinaryWriter.ElementIdxSize">
            <summary>
            Gets or sets the size of the element idx.
            </summary>
            <value>The size of the element idx.</value>
        </member>
        <member name="P:AIO.PList.PListBinaryWriter.Offsets">
            <summary>
            Gets the offset table.
            </summary>
            <value>The offset table.</value>
        </member>
        <member name="M:AIO.PList.PListBinaryWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListBinaryWriter"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListBinaryWriter.Write(System.IO.Stream,AIO.PList.IPListElement)">
            <summary>
            Writers a <see cref="T:CE.iPhone.IPListElemnet"/> to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:AIO.PList.PListBinaryWriter.FormatIdx(System.Int32)">
            <summary>
            Formats an element idx based on the ElementIdxSize.
            </summary>
            <param name="idx">The idx.</param>
            <returns>The formated idx.</returns>
        </member>
        <member name="M:AIO.PList.PListBinaryWriter.WriteInternal(AIO.PList.IPListElement)">
            <summary>
            Writers a <see cref="T:CE.iPhone.IPListElemnet"/> to the current stream position
            </summary>
            <param name="element">The element.</param>
            <returns>The Inx of the written element</returns>
        </member>
        <member name="T:AIO.PList.PListArray">
            <summary>
            Represents an array of an <see cref="T:CE.iPhone.IPListElement"/> objects
            </summary>
        </member>
        <member name="P:AIO.PList.PListArray.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListArray.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListArray.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.PListArray.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListArray.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListArray.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListArray.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListArray.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListArray.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListArray.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PList.PListDict">
            <summary>
            Represents an dictionary with <see cref="T:System.String"/> keys and <see cref="T:CE.iPhone.IPListElement"/> values
            </summary>
        </member>
        <member name="P:AIO.PList.PListDict.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListDict.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListDict.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.PListDict.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDict.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDict.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDict.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDict.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListDict.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListDict.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PList.PListElement`1">
            <summary>
            An abstract base class for primitive PList types
            </summary>
            <typeparam name="T">The .Net equivalent to the PList type</typeparam>
        </member>
        <member name="P:AIO.PList.PListElement`1.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListElement`1.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListElement`1.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AIO.PList.PListElement`1.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListElement`1.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a
            custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/>
            to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListElement`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:AIO.PList.PListElement`1.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListElement`1.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>The XML String representation of the Value.</returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.op_Implicit(AIO.PList.PListElement{`0})~`0">
            <summary>
            </summary>
            <param name="element">The elem.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListElement`1.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListElement`1.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListElement`1.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListElement`1.Equals(AIO.PList.IPListElement)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:AIO.PList.PListElement`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListElement`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIO.PList.PListElementFactory">
            <summary>
            Singleton class which generates concrete <see cref="T:CE.iPhone.IPListElement"/> from the Tag or TypeCode
            </summary>
        </member>
        <member name="P:AIO.PList.PListElementFactory.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:AIO.PList.PListElementFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListElementFactory"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListElementFactory.Register``1(``0)">
            <summary>
            Registers the specified element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
        </member>
        <member name="M:AIO.PList.PListElementFactory.Register``1(System.String,System.Byte,``0)">
            <summary>
            Registers the specified element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag">The tag.</param>
            <param name="typeCode">The type code.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:AIO.PList.PListElementFactory.Create(System.Byte,System.Int32)">
            <summary>
            Creates a concrete <see cref="T:CE.iPhone.IPListElement"/> object secified specified by it's typecode.
            </summary>
            <param name="typeCode">The typecode of the element.</param>
            <param name="length">The length of the element
            (required only for <see cref="T:CE.iPhone.PListBool"/>, <see cref="T:CE.iPhone.PListNull"/> and <see cref="T:CE.iPhone.PListFill"/>).</param>
            <returns>The created <see cref="T:CE.iPhone.IPListElement"/> object</returns>
        </member>
        <member name="M:AIO.PList.PListElementFactory.Create(System.String)">
            <summary>
            Creates a concrete <see cref="T:CE.iPhone.IPListElement"/> object secified specified by it's tag.
            </summary>
            <param name="tag">The tag of the element.</param>
            <returns>The created <see cref="T:CE.iPhone.IPListElement"/> object</returns>
        </member>
        <member name="M:AIO.PList.PListElementFactory.CreateLengthElement(System.Int32)">
            <summary>
            Creates a <see cref="T:CE.iPhone.IPListElement"/> object used for exteded length information.
            </summary>
            <param name="length">The exteded length information.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElement"/> object used for exteded length information.</returns>
        </member>
        <member name="M:AIO.PList.PListElementFactory.CreateKeyElement(System.String)">
            <summary>
            Creates a <see cref="T:CE.iPhone.IPListElement"/> object used for dictionary keys.
            </summary>
            <param name="key">The key.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElement"/> object used for dictionary keys.</returns>
        </member>
        <member name="T:AIO.PList.PListException">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:AIO.PList.PListFormatException">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListFormatException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListFormatException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListFormatException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:AIO.PList.PListFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:AIO.PList.PListFormat">
            <summary>
            The Format of a PList File
            </summary>
        </member>
        <member name="F:AIO.PList.PListFormat.Binary">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.PList.PListFormat.Xml">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIO.PList.PListBool">
            <summary>
            Represents a Boolean Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListBool.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListBool.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListBool.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AIO.PList.PListBool.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListBool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListBool"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListBool.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListBool"/> class.
            </summary>
            <param name="value">The Value of this element</param>
        </member>
        <member name="M:AIO.PList.PListBool.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListBool.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:AIO.PList.PListBool.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListBool.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListBool.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListBool.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListBool.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListData">
            <summary>
            Represents a Byte[] Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListData.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListData.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListData.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListData"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListData"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:AIO.PList.PListData.Parse(System.String)">
            <summary>
            Parses the specified value from a given String (encoded as Base64), read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListData.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value (encoded as Base64).
            </returns>
        </member>
        <member name="M:AIO.PList.PListData.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListData.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListData.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListDate">
            <summary>
            Represents a DateTime Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListDate.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListDate.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListDate.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListDate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListDate"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListDate.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListDate"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:AIO.PList.PListDate.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListDate.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListDate.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDate.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListDate.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListFill">
            <summary>
            Represents a fill element in a PList
            </summary>
            <remarks>Is skipped in Xml-Serialization</remarks>
        </member>
        <member name="P:AIO.PList.PListFill.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListFill.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListFill.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.PListFill.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListFill.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListFill.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListFill.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListFill.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListFill.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListFill.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PList.PListInteger">
            <summary>
            Represents an integer Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListInteger.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListInteger.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListInteger.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListInteger"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListInteger.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListInteger"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:AIO.PList.PListInteger.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListInteger.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListInteger.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListInteger.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListInteger.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListNull">
            <summary>
            Represents a null element in a PList
            </summary>
            <remarks>Is skipped in Xml-Serialization</remarks>
        </member>
        <member name="P:AIO.PList.PListNull.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListNull.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListNull.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AIO.PList.PListNull.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListNull.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListNull.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListNull.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListNull.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListNull.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListNull.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.PList.PListReal">
            <summary>
            Represents a double Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListReal.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListReal.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:AIO.PList.PListReal.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListReal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListReal"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListReal.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListReal"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:AIO.PList.PListReal.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListReal.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListReal.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListReal.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListReal.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:AIO.PList.PListString">
            <summary>
            Represents an string Value from a PList
            </summary>
        </member>
        <member name="P:AIO.PList.PListString.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:AIO.PList.PListString.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="M:AIO.PList.PListString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListString"/> class.
            </summary>
        </member>
        <member name="M:AIO.PList.PListString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AIO.PList.PListString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:AIO.PList.PListString.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:AIO.PList.PListString.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:AIO.PList.PListString.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:AIO.PList.PListString.ReadBinary(AIO.PList.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListString.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListString.WriteBinary(AIO.PList.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:AIO.PList.PListString.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIO.PList.PListString.Equals(System.Object)">
            <summary>
            比较
            </summary>
        </member>
        <member name="M:AIO.PList.PListString.op_Equality(AIO.PList.PListString,AIO.PList.PListString)">
            <summary>
            相等
            </summary>
        </member>
        <member name="M:AIO.PList.PListString.op_Inequality(AIO.PList.PListString,AIO.PList.PListString)">
            <summary>
            不相等
            </summary>
        </member>
        <member name="M:AIO.PList.PListString.op_Implicit(System.String)~AIO.PList.PListString">
            <summary>
            隐式转换
            </summary>
        </member>
        <member name="T:AIO.PList.PListRoot">
            <summary>
            Represents a PList File
            </summary>
        </member>
        <member name="P:AIO.PList.PListRoot.Format">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:AIO.PList.PListRoot"/> is stored in binary format.
            </summary>
            <value><c>true</c> if stored in binary format; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:AIO.PList.PListRoot.Load(System.String)">
            <summary>
            Loads the PList from specified file.
            </summary>
            <param name="fileName">The path of the PList.</param>
            <returns>A <see cref="T:AIO.PList.PListRoot"/> object loaded from the file</returns>
        </member>
        <member name="M:AIO.PList.PListRoot.Load(System.IO.Stream)">
            <summary>
            Loads the PList from specified stream.
            </summary>
            <param name="stream">The stream containing the PList.</param>
            <returns>A <see cref="T:AIO.PList.PListRoot"/> object loaded from the stream</returns>
        </member>
        <member name="M:AIO.PList.PListRoot.Save(System.String,AIO.PList.PListFormat)">
            <summary>
            Saves the PList to the specified path.
            </summary>
            <param name="fileName">The path of the PList.</param>
            <param name="format">The format of the PList (Binary/Xml).</param>
        </member>
        <member name="M:AIO.PList.PListRoot.Save(System.String)">
            <summary>
            Saves the PList to the specified path.
            </summary>
            <param name="fileName">The path of the PList.</param>
        </member>
        <member name="M:AIO.PList.PListRoot.Save(System.IO.Stream)">
            <summary>
            Saves the PList to the specified stream.
            </summary>
            <param name="stream">The stream in which the PList is saves.</param>
        </member>
        <member name="M:AIO.PList.PListRoot.Save(System.IO.Stream,AIO.PList.PListFormat)">
            <summary>
            Saves the PList to the specified stream.
            </summary>
            <param name="stream">The stream in which the PList is saves.</param>
            <param name="format">The format of the PList (Binary/Xml).</param>
        </member>
        <member name="P:AIO.PList.PListRoot.Root">
            <summary>
            Gets or sets the root PList-Element.
            </summary>
            <value>The root PList-Element.</value>
        </member>
        <member name="M:AIO.PList.PListRoot.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a
            custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/>
            to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            method.
            </returns>
        </member>
        <member name="M:AIO.PList.PListRoot.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:AIO.PList.PListRoot.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:AIO.IDNoUtils">
            <summary>
            身份证判断方法
            </summary>
        </member>
        <member name="F:AIO.IDNoUtils.REGEX_ID_NO_18">
            <summary>
            18位二代身份证号码的正则表达式
            </summary>
        </member>
        <member name="F:AIO.IDNoUtils.W">
            <summary>
            加权因子
            </summary>
        </member>
        <member name="F:AIO.IDNoUtils.CheckNumberArray">
            <summary>
             
            </summary>
        </member>
        <member name="M:AIO.IDNoUtils.CheckIDNo(System.String)">
            <summary>
            判断当前字符是否符合中国身份证
            </summary>
        </member>
        <member name="M:AIO.IDNoUtils.CheckIDNo18(System.String)">
            <summary>
            判断当前字符是否符合中国18位身份证
            </summary>
        </member>
        <member name="M:AIO.IDNoUtils.UpdateIDNo15to18(System.String)">
            <summary>
            
            </summary>
            <param name="IDNo"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.IDNoUtils.ComputeCheckNumber(System.String)">
            <summary>
            计算校验码 适用于18位的二代身份证号码
            </summary>
            <param name="masterNumber">本体码</param>
            <returns>校验码</returns>
        </member>
        <member name="M:AIO.IDNoUtils.ValidateCheckNumber(System.String)">
            <summary>
            校验身份证号码的验证码
            </summary>
        </member>
        <member name="T:AIO.MaskWordUtils">
            <summary> 
            屏蔽字
            </summary>
        </member>
        <member name="M:AIO.MaskWordUtils.Replace(System.String)">
            <summary>
            替换屏蔽字为*
            </summary>
        </member>
        <member name="M:AIO.MaskWordUtils.LoadMaskWord(System.String)">
            <summary> 加载屏蔽文本 </summary>
        </member>
        <member name="T:AIO.StringUtils">
            <summary>
            字符串工具库
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateMonth(System.String@)">
            <summary>
            验证一年的12个月
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateChinese(System.String@)">
            <summary>
            验证输入汉字
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateLength(System.String@,System.Int32)">
            <summary>
            验证输入字符串 是否满足指定个数
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateMinMaxLength(System.String@,System.Int32,System.Int32)">
            <summary>
            验证当前字符串是否在指定长度范围内
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateDay(System.String@)">
            <summary>
            验证一个月的31天
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidate2Decimal(System.String@)">
            <summary>
            验证两位小数
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsNullOrEmpty(System.String@)">
            <summary> 判断字符是否为空 </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateNumeric(System.String@)">
            <summary>
            是否为Numeric
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateInt(System.String@)">
            <summary>
            是否为Int
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateBool(System.String@)">
            <summary>
            是否为Bool
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateNum(System.String)">
            <summary>
            是否为整数
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateUnsign(System.String)">
            <summary>
            是否为Unsign
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateDate(System.String@)">
            <summary>
            验证是否为 YYYY MM DD 格式 包含闰年 平年
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateDateString(System.String@)">
            <summary>
            判断字符串是否是yy-mm-dd字符串
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidatePhone(System.String@)">
            <summary>
            验证手机号码
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateIPSect(System.String@)">
            <summary>
            是否为IP分段
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateEmail(System.String@)">
            <summary>
            是否电子邮件
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsPostalcode(System.String@)">
            <summary>
            验证邮编
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateIDcard(System.String@)">
            <summary>
            验证身份证号
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateIDcard18(System.String@)">
            <summary>
            验证中国身份证号18
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateIDcard15(System.String@)">
            <summary>
            验证身份证号15
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IDcard15To18(System.String@)">
            <summary>
            15位省份证号码升18位
            </summary>
        </member>
        <member name="M:AIO.StringUtils.GetHttpHost(System.String@)">
            <summary>
            获取Http主机名 如果有端口 包含端口
            </summary>
        </member>
        <member name="M:AIO.StringUtils.GetRegexMatches(System.String@,System.String)">
            <summary>
            根据正则表达式 获取对应内容
            </summary>
        </member>
        <member name="M:AIO.StringUtils.IsValidateUrl(System.String,System.String)">
            <summary>
            验证URL是否有效
            </summary>
        </member>
        <member name="M:AIO.StringUtils.ToConvertBlock(System.String[])">
            <summary>
            转化为区块
            </summary>
        </member>
        <member name="M:AIO.StringUtils.ToConvertSpace(System.String[])">
            <summary>
            转化为区块
            </summary>
        </member>
        <member name="M:AIO.StringUtils.ToConvert(AIO.StringBlock@,System.String[])">
            <summary>
            转化为区块
            </summary>
        </member>
        <member name="M:AIO.StringUtils.ToConverUnitsCNS(System.String,System.Int32@)">
            <summary>
            阿拉伯数字全部转化为中文数字 有单位 传入需全部为数字字符 简体中文
            </summary>
            <param name="num"></param>
            <param name="unitNum">单位截止下标,默认0,1:万后,2:亿后,3:万亿</param>
        </member>
        <member name="M:AIO.StringUtils.ToConverNoUnitsCNS(System.String)">
            <summary>
            阿拉伯数字全部转化为中文数字 无单位 传入需全部为数字字符 简体中文
            </summary>
        </member>
        <member name="M:AIO.StringUtils.StringToHexView(System.Byte[]@,System.Int32)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.StringToHex(System.Byte[]@,System.Int32)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.HexStringToBytes(System.String@)">
            <summary>
            
            </summary>
            <param name="hexStr"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.BtsToBase64(System.Byte[]@)">
            <summary>
            
            </summary>
            <param name="buff"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.Base64ToBts(System.String@)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.GetMD5(System.String@,System.Text.Encoding@)">
            <summary>
            
            </summary>
            <param name="sDataIn"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.GetMD5(System.Collections.Generic.ICollection{System.String}@,System.Text.Encoding@)">
            <summary>
            
            </summary>
            <param name="sDataIn"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringUtils.IsNullOrWhiteSpace(System.String@)">
            <summary>
            是空还是空白
            </summary>
        </member>
        <member name="M:AIO.StringUtils.FallbackEmpty(System.String,System.String@)">
            <summary>
            如果指示指定的字符串是 null 还是 System.String.Empty 字符串。
            则回退
            </summary>
        </member>
        <member name="M:AIO.StringUtils.FallbackWhitespace(System.String,System.String@)">
            <summary>
            如果所有字符串为空白则回退
            </summary>
        </member>
        <member name="T:AIO.StringBlock">
            <summary>
            字符串区块 字符单位
            </summary>
        </member>
        <member name="P:AIO.StringBlock.Top">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIO.StringBlock.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIO.StringBlock.IgnoreChinese">
            <summary>
            忽略中文
            </summary>
        </member>
        <member name="M:AIO.StringBlock.#ctor(System.Collections.Generic.IList{System.Char},System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="units"></param>
            <param name="width"></param>
            <param name="ignoreChinese"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AIO.StringBlock.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="units"></param>
            <param name="width"></param>
            <param name="ignoreChinese"></param>
        </member>
        <member name="M:AIO.StringBlock.Convert(System.String[])">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.StringBlock.Convert(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:AIO.AssemblyUtils">
            <summary>
            程序集
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetAllType">
            <summary>
            获取所有的类
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetAllType``1">
            <summary>
            获取所有的类
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetReferanceAssemblies(System.AppDomain)">
            <summary>
            获取所有程序集
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetAllAssemblieHasAttributeType``1">
            <summary>
            获取全部程序集中 包含指定特性的类 输出 key=命名空间加类名 value=类
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetMethodInfo(System.String,System.String,System.String)">
            <summary>
            获取方法
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetMethodInfo(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            获取方法
            </summary>
        </member>
        <member name="M:AIO.AssemblyUtils.GetMethodInfo``1(``0,System.String)">
            <summary>
            获取方法
            </summary>
        </member>
        <member name="T:AIO.ClassUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.ClassUtils.RemoveAllEvent``1(``0,System.String)">
            <summary>
            清除事件
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
        </member>
        <member name="M:AIO.ClassUtils.GetMembers(System.Object,System.Reflection.BindingFlags)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ClassUtils.GetMethods(System.Object,System.Reflection.BindingFlags)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.ClassUtils.GetType(System.String)">
            <summary>
            C# Type类获取类型方法(通过字符串型的类名)
            </summary>
        </member>
        <member name="T:AIO.GCUtils">
            <see>
                <cref>https://docs.microsoft.com/zh-cn/dotnet/api/system.gc?view=net-5.0</cref>
            </see>
            <!--公共语言运行时中的垃圾回收器支持使用代的对象老化。 代是内存中对象的相对生存期的单位。
            对象的代数或 age 指示对象所属的代。 最近创建的对象是较新的生成的一部分，其生成号比之前在应用程序生命周期中创建的对象的生成号要低。
            最近一代中的对象位于第0代中。 垃圾回收器的这种实现支持三代对象，第0代、第1代和第2代。
            可以检索属性的值 MaxGeneration ，以确定系统支持的最大代数。-->
        </member>
        <member name="P:AIO.GCUtils.MaxGeneration">
            <summary>
            获取系统当前支持的最大代数
            </summary>
        </member>
        <member name="M:AIO.GCUtils.SuppressFinalize(System.Object)">
            <summary>
            阻止GC调用Finalize方法
            </summary>
            <!--因为Finalize方法的调用会牺牲部分性能。如果你的Dispose方法已经对委托管资源作了清理，就没必要让GC再调用对象的Finalize方法-->
        </member>
        <member name="M:AIO.GCUtils.Collect">
            <summary>
            强制对所有代进行即时垃圾回收
            </summary>
        </member>
        <member name="M:AIO.GCUtils.Collect(System.Int32)">
            <summary>
            强制对 0 代到指定代进行即时垃圾回收。
            </summary>
            <param name="generation">代</param>
        </member>
        <member name="M:AIO.GCUtils.Collect(System.Int32,System.GCCollectionMode)">
            <summary>
            强制在 GCCollectionMode 值所指定的时间对 0 代到指定代进行垃圾回收。
            </summary>
            <param name="generation">代</param>
            <param name="gCCollectionMode">GC模式集合</param>
        </member>
        <member name="M:AIO.GCUtils.Collect(System.Int32,System.GCCollectionMode,System.Boolean)">
            <summary>
            在由 GCCollectionMode 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收是否应该为阻碍性。
            </summary>
            <param name="generation">代</param>
            <param name="gCCollectionMode">GC模式集合</param>
            <param name="blocking">阻塞</param>
        </member>
        <member name="M:AIO.GCUtils.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)">
            <summary>
            在由 GCCollectionMode 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收应该为阻碍性还是压缩性。
            </summary>
            <param name="generation">代</param>
            <param name="gCCollectionMode">GC模式集合</param>
            <param name="blocking">阻塞</param>
            <param name="compacting">压缩</param>
        </member>
        <member name="M:AIO.GCUtils.CollectionCount(System.Int32)">
            <summary>
            返回已经对对象的指定代进行的垃圾回收次数。
            </summary>
            <param name="generation">代</param>
        </member>
        <member name="M:AIO.GCUtils.CancelFullGCNotification">
            <summary>
            取消注册垃圾回收通知。
            </summary>
        </member>
        <member name="M:AIO.GCUtils.AddMemoryPressure(System.Int64)">
            <summary>
            通知运行时在安排垃圾回收时应考虑分配大量的非托管内存
            </summary>
            <param name="bytesAllocated">分配的字节数</param>
        </member>
        <member name="M:AIO.GCUtils.RemoveMemoryPressure(System.Int64)">
            <summary>
            通知运行时已释放非托管内存，在安排垃圾回收时不需要再考虑它。
            </summary>
            <param name="bytesAllocated">分配的字节数</param>
        </member>
        <member name="M:AIO.GCUtils.TryStartNoGCRegion(System.Int64)">
            <summary>
            如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收。
            </summary>
            <param name="totalSize">总空间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AIO.GCUtils.TryStartNoGCRegion(System.Int64,System.Boolean)">
            <summary>
            如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收；
            并在初始没有足够内存可用的情况下，
            控制垃圾回收器是否进行完整的阻碍性垃圾回收。
            </summary>
            <param name="totalSize">总空间</param>
            <param name="disallowFullBlockingGC">禁止完全阻塞GC</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AIO.GCUtils.TryStartNoGCRegion(System.Int64,System.Int64)">
            <summary>
            如果指定数量的内存可用于大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收。
            </summary>
            <param name="totalSize">总空间</param>
            <param name="lohSize">大对象堆</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AIO.GCUtils.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)">
            <summary>
            如果指定数量的内存可用大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收；
            并在初始没有足够内存可用的情况下，控制垃圾回收器是否进行完整的阻碍性垃圾回收。
            </summary>
            <param name="totalSize">总空间</param>
            <param name="lohSize">大对象堆</param>
            <param name="disallowFullBlockingGC">禁止完全阻塞GC</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AIO.GCUtils.EndNoGCRegion">
            <summary>
            结束无 GC 区域延迟模式
            </summary>
        </member>
        <member name="M:AIO.GCUtils.GetGeneration(System.Object)">
            <summary>
            返回指定对象的当前代数。
            </summary>
            <param name="obj">数据</param>
            <returns>代</returns>
        </member>
        <member name="M:AIO.GCUtils.GetGeneration(System.WeakReference)">
            <summary>
            返回指定弱引用的目标的当前代数。
            </summary>
            <param name="obj">数据</param>
            <returns>代</returns>
        </member>
        <member name="M:AIO.GCUtils.GetTotalMemory(System.Boolean)">
            <summary>
            检索当前认为要分配的字节数
            </summary>
            <param name="forceFullCollection">是否可以等待较短间隔再返回，以便系统回收垃圾和终结对象。</param>
            <returns>全部内存大小</returns>
        </member>
        <member name="M:AIO.GCUtils.KeepAlive(System.Object)">
            <summary>
            引用指定对象，使其从当前例程开始到调用此方法的那一刻为止均不符合进行垃圾回收的条件。
            </summary>
            <param name="obj">指定对象</param>
        </member>
        <member name="M:AIO.GCUtils.RegisterForFullGCNotification(System.Int32,System.Int32)">
            <summary>
            注册完整GC通知
            </summary>
            <param name="maxGenerationThreshold">马克斯代阈值</param>
            <param name="largeObjectHeapThreshold">大对象堆阈值</param>
        </member>
        <member name="M:AIO.GCUtils.ReRegisterForFinalize(System.Object)">
            <summary>
            请求系统调用指定对象的终结器，此前已为该对象调用 SuppressFinalize(Object)。
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:AIO.GCUtils.WaitForFullGCApproach">
            <summary>
            返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。
            </summary>
            <returns>GC通知状态</returns>
        </member>
        <member name="M:AIO.GCUtils.WaitForFullGCApproach(System.Int32)">
            <summary>
            在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。
            </summary>
            <param name="millisecondsTimeout">毫秒超时时间</param>
            <returns>GC通知状态</returns>
        </member>
        <member name="M:AIO.GCUtils.WaitForFullGCComplete">
            <summary>
            返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。
            </summary>
            <returns>GC通知状态</returns>
        </member>
        <member name="M:AIO.GCUtils.WaitForFullGCComplete(System.Int32)">
            <summary>
            在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。
            </summary>
            <param name="millisecondsTimeout">毫秒超时时间</param>
            <returns>GC通知状态</returns>
        </member>
        <member name="M:AIO.GCUtils.WaitForPendingFinalizers">
            <summary>
            挂起当前线程，直到处理终结器队列的线程清空该队列为止。
            </summary>
        </member>
        <member name="T:AIO.Define">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_IDENTICARDID">
            <summary>
            maximum length of identicardid
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_NAME">
            <summary>
            maximum length of name
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_COUNTRY">
            <summary>
            maximum length of country
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_NATION">
            <summary>
            maximum length of nation
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_BIRTHDAY">
            <summary>
            maximum length of birthday
            </summary>
        </member>
        <member name="F:AIO.Define.MAX_LENGTH_OF_ADDRESS">
            <summary>
            maximum length of address
            </summary>
        </member>
        <member name="T:AIO.MarshalUtils">
            <summary>
            Marshal 类
            </summary>
            <see>
                <cref>https://msdn.microsoft.com/zh-cn/library/system.runtime.interopservices.marshal(VS.80).aspx</cref>
            </see>
            <!--提供了一个方法集，这些方法用于分配非托管内存、复制非托管内存块、将托管类型转换为非托管类型 此外还提供了在与非托管代码交互时使用的其他杂项方法-->
            <!--备注 Marshal 类中定义的 static 方法对于处理非托管代码至关重要。此类中定义的大多数方法通常由需要-->
            <!--此类型的任何公共静态（Visual Basic 中的 Shared）成员都是线程安全的，但不保证所有实例成员都 是线程安全的-->
        </member>
        <member name="P:AIO.MarshalUtils.SystemDefaultCharSize">
            <summary>
            表示系统上的默认字符大小；Unicode 系统上默认值为 2，ANSI 系统上默认值为 1。 此字段为只读。
            </summary>
        </member>
        <member name="P:AIO.MarshalUtils.SystemMaxDBCSCharSize">
            <summary>
            表示用于当前操作系统的双字节字符集 (DBCS) 的最大大小（以字节为单位）。 此字段为只读。
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.SizeOf``1(``0)">
            <summary>
            获取 结构体实例 空间大小
            </summary>
            <param name="obj">返回对象的非托管大小 以字节为单位</param>
        </member>
        <member name="M:AIO.MarshalUtils.SizeOf``1">
            <summary>
            获取 结构体实例 空间大小
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.AllocHGlobal(System.Int32)">
            <summary>
            使用指定的字节数从进程的非托管内存中分配内存。
            </summary>
            <param name="size">内存中所需的字节数</param>
            <returns>一个指向新分配内存的指针 这个内存必须使用Marshal.FreeHGlobal 来释放 </returns>
        </member>
        <member name="M:AIO.MarshalUtils.AddRef(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.AllocCoTaskMem(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.AreComObjectsAvailableForCleanup">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.BindToMoniker(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.CleanupUnusedObjectsInCurrentContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.AllocHGlobal(System.IntPtr)">
            <summary>
            使用指定的字节数从进程的非托管内存中分配内存。
            </summary>
            <param name="ptr">内存中所需的字节数</param>
            <returns>一个指向新分配内存的指针 这个内存必须使用Marshal.FreeHGlobal 来释放 </returns>
        </member>
        <member name="M:AIO.MarshalUtils.FreeHGlobal(System.IntPtr)">
            <summary>
            释放内存中指针
            </summary>
            <param name="hglobal">内存中的指针</param>
        </member>
        <member name="M:AIO.MarshalUtils.CreateAggregatedObject``1(System.IntPtr,``0)">
            <summary>
            创建聚合对象
            </summary>
            <param name="ptr">指针</param>
            <param name="obj">数据</param>
        </member>
        <member name="M:AIO.MarshalUtils.CreateWrapperOfType``1(System.Object)">
            <summary>
            创建类型的包装器
            </summary>
            <typeparam name="T">结构类型</typeparam>
            <param name="obj">数据</param>
            <returns>包装数据</returns>
        </member>
        <member name="M:AIO.MarshalUtils.CreateWrapperOfType``2(``0)">
            <summary>
            创建类型的包装器
            </summary>
            <typeparam name="T">结构类型</typeparam>
            <typeparam name="TWrapper">包装器</typeparam>
            <param name="obj">数据</param>
            <returns>包装器</returns>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadByte(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadByte(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadByte(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt16(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt16(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt16(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt32(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt32(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt32(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt64(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt64(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadInt64(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadIntPtr(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadIntPtr(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReadIntPtr(System.Object,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteByte(System.Object,System.Int32,System.Byte)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteByte(System.IntPtr,System.Int32,System.Byte)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteByte(System.IntPtr,System.Byte)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt16(System.IntPtr,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt16(System.IntPtr,System.Int16)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt16(System.IntPtr,System.Int32,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt16(System.Object,System.Int32,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt16(System.Object,System.Int32,System.Int16)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt32(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt32(System.Object,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt64(System.Object,System.Int32,System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteInt64(System.IntPtr,System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteIntPtr(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ZeroFreeBSTR(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.DestroyStructure(System.IntPtr,System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.DestroyStructure``1(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.FinalReleaseComObject(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.FreeBSTR(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.FreeCoTaskMem(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
            <summary>
            将数据从托管对象封送到非托管内存块
            </summary>
            <typeparam name="T">保存要封送的数据的托管对象 此对象必须是格式化类的结构或实例</typeparam>
            <param name="obj">实例</param>
            <param name="ptr">指向非托管内存块的指针，在调用此方法之前必须分配该内存块</param>
            <param name="fDeleteOld">在ptr参数上使用DestroyStructure方法复制数据</param>
        </member>
        <member name="M:AIO.MarshalUtils.ThrowExceptionForHR(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ThrowExceptionForHR(System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.IsComObject(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.OffsetOf(System.Type,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.OffsetOf``1(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Prelink(System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PrelinkAll(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToBSTR(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToCoTaskMemAnsi(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToCoTaskMemAuto(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToCoTaskMemUni(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToHGlobalAnsi(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToHGlobalAuto(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.StringToHGlobalUni(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.SecureStringToBSTR(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.Release(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.ReleaseComObject(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringAnsi(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringAnsi(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringAuto(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringAuto(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringBSTR(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringUni(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStringUni(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStructure(System.IntPtr,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStructure(System.IntPtr,System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStructure``1(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.PtrToStructure``1(System.IntPtr,``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetComInterfaceForObject``2(``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetComInterfaceForObject(System.Object,System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetDelegateForFunctionPointer``1(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetExceptionCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetExceptionForHR(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetExceptionForHR(System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetFunctionPointerForDelegate(System.Delegate)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetFunctionPointerForDelegate``1(``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetHRForException(System.Exception)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetHRForLastWin32Error">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetIUnknownForObject(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetLastWin32Error">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetNativeVariantForObject(System.Object,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetNativeVariantForObject``1(``0,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetObjectForIUnknown(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetObjectForNativeVariant(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetObjectForNativeVariant``1(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="aSrcNativeVariant"></param>
            <param name="cVars"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AIO.MarshalUtils.GetStartComSlot(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.MarshalUtils.GetTypeFromCLSID(System.Guid)">
            <summary>
            
            </summary>
            <param name="clsid"></param>
            <returns></returns>
        </member>
        <member name="M:AIO.MarshalUtils.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIO.MarshalUtils.GetUniqueObjectForIUnknown(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIO.SystemInfoUtils">
            <summary>
            设备信息 .NET API
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetEquipmentName">
            <summary>
            获取用户设备名
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetPlatform">
            <summary>
            获取平台名称
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetNowVersion">
            <summary>
            获取平台版本号
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetUserDomainName">
            <summary>
            获取当前设备 连接网络名称
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetSystemDirectory">
            <summary>
            获取系统跟目录
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetNowTime">
            <summary>
            获取系统当前时间
            </summary>
        </member>
        <member name="M:AIO.SystemInfoUtils.GetStartSystemTickCount">
            <summary>
            获取系统启动后 经过的毫秒数
            </summary>
        </member>
        <member name="T:AIO.CharUnit">
            <summary>
            只读变量
            </summary>
        </member>
        <member name="F:AIO.CharUnit.C0">
            <summary>
            0的字符
            </summary>
        </member>
        <member name="F:AIO.CharUnit.BEL">
            <summary>
            响铃
            </summary>
        </member>
        <member name="F:AIO.CharUnit.BackSpace">
            <summary>
            回格
            </summary>
        </member>
        <member name="F:AIO.CharUnit.TABH">
            <summary>
            tab(水平制表符)
            </summary>
        </member>
        <member name="F:AIO.CharUnit.NewLine">
            <summary>
            换行
            </summary>
        </member>
        <member name="F:AIO.CharUnit.TABV">
            <summary>
            tab(垂直制表符)
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Page">
            <summary>
            换页
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:AIO.CharUnit.EnterNewLine" -->
        <member name="F:AIO.CharUnit.End">
            <summary>
            结束 End
            </summary>
        </member>
        <member name="F:AIO.CharUnit.PauseBreak">
            <summary>
            脱离 Pause Break
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Space">
            <summary>
            空格
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Exclamation">
            <summary>
            !
            </summary>
        </member>
        <member name="F:AIO.CharUnit.DoubleQuote">
            <summary>
            "
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Pound">
            <summary>
            #
            </summary>
        </member>
        <member name="F:AIO.CharUnit.USD">
            <summary>
            $
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Modulus">
            <summary>
            -%
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:AIO.CharUnit.AND" -->
        <member name="F:AIO.CharUnit.SingleQuote">
            <summary>
            -’
            </summary>
        </member>
        <member name="F:AIO.CharUnit.LeftBracket">
            <summary>
            -(
            </summary>
        </member>
        <member name="F:AIO.CharUnit.RightBracket">
            <summary>
            -)
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Asterisk">
            <summary>
            *
            </summary>
        </member>
        <member name="F:AIO.CharUnit.ADD">
            <summary>
            +
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Comma">
            <summary>
            ,
            </summary>
        </member>
        <member name="F:AIO.CharUnit.SUB">
            <summary>
            -
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Point">
            <summary>
            .
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Slash">
            <summary>
            /
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N0">
            <summary>
            0
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N1">
            <summary>
            1
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N2">
            <summary>
            2
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N3">
            <summary>
            3
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N4">
            <summary>
            4
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N5">
            <summary>
            5
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N6">
            <summary>
            6
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N7">
            <summary>
            7
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N8">
            <summary>
            8
            </summary>
        </member>
        <member name="F:AIO.CharUnit.N9">
            <summary>
            9
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Colon">
            <summary>
            :
            </summary>
        </member>
        <member name="F:AIO.CharUnit.Semicolon">
            <summary>
            ;
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:AIO.CharUnit.LessThanSign" -->
        <member name="F:AIO.CharUnit.Equality">
            <summary>
            61 =
            </summary>
        </member>
        <member name="F:AIO.CharUnit.EA">
            62 >　
            63 ?
            64 @
            <summary>
            65 A
            </summary>
        </member>
        <member name="F:AIO.CharUnit.EZ">
            66 B
            67 C
            68 D
            69 E
            70 F
            71 G
            72 H
            73 I
            74 J
            75 K
            76 L
            77 M
            78 N
            79 O
            80 P
            81 Q
            82 R
            83 S
            84 T
            85 U
            86 V
            87 W
            88 X
            89 Y
            <summary>
            90 Z
            </summary>
        </member>
        <member name="F:AIO.CharUnit.EAlphaBet">
            <summary>
            大写A-大写Z
            </summary>
        </member>
        <member name="F:AIO.CharUnit.UnderLine">
            91 [
            92 /　
            92 /
            93]
            94 ^
            <summary>
            95 _
            </summary>
        </member>
        <member name="F:AIO.CharUnit.ea">
            96 `
            <summary>
            97 a
            </summary>
        </member>
        <member name="F:AIO.CharUnit.ez">
            98 b
            99 c
            100 d
            101 e
            102 f
            103 g
            104 h
            105 i
            106 j
            107 k
            108 l
            109 m
            110 n
            111 o
            112 p
            113 q
            114 r
            115 s
            116 t
            117 u
            118 v
            119 w
            120 x
            121 y
            <summary>
            122 z
            </summary>
        </member>
        <member name="F:AIO.CharUnit.eAlphaBet">
            <summary>
            小写e-小写z
            </summary>
        </member>
        <member name="T:AIO.ChineseUnit">
            <summary>
            中文单位
            </summary>
        </member>
        <member name="F:AIO.ChineseUnit.CNSNum">
            <summary>
            数字单位:个数组
            </summary>
        </member>
        <member name="F:AIO.ChineseUnit.CNSDigit">
            <summary>
            数字单位:位数组
            </summary>
        </member>
        <member name="F:AIO.ChineseUnit.CNSUnits">
            <summary>
            数字单位:单位数组
            </summary>
        </member>
        <member name="F:AIO.ChineseUnit.NumberChar">
            <summary>
            数字字符串
            </summary>
        </member>
        <member name="T:AIO.ColorUnit">
            <summary>
            颜色库
            </summary>
        </member>
        <member name="F:AIO.ColorUnit.Wirte">
            <summary> 白色 1 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Red">
            <summary> 红色 5 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Green">
            <summary> 绿色 3 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Blue">
            <summary> 蓝色 4 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Peony">
            <summary> 牡丹红 5 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Cyan">
            <summary> 青色 6 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Yellow">
            <summary> 黄色 7 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Black">
            <summary> 黑色 8 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Gary">
            <summary> 灰色 41 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Bulesea">
            <summary> 海蓝 9 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Orange">
            <summary> 橙色 81 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Chocolate">
            <summary> 巧克力色 10 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Bluelyons">
            <summary> 蓝紫色 11 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Brassiness">
            <summary> 黄铜色 12 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Brightgolden">
            <summary> 亮金色 13 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Brown">
            <summary> 棕色 14 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Aeneous1">
            <summary> 青铜色1 15 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Aeneous2">
            <summary> 青铜色2 16 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Bluewore">
            <summary> 士官服蓝色 17 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Coppercold">
            <summary> 冷铜色 18 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Coppery">
            <summary> 铜色 19 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Redcoral">
            <summary> 珊瑚红 20 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Hyacinthine">
            <summary> 紫蓝色 21 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Copperdeep">
            <summary> 深铜 22 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Greendeep">
            <summary> 深绿 23 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Darkcoppergreen">
            <summary> 深铜绿色 24 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Darkolivegreen">
            <summary> 深橄榄绿 25 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Bluedeep">
            <summary> 深蓝花色 26 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Modena">
            <summary> 深紫色 27 </summary>
        </member>
        <member name="F:AIO.ColorUnit.BlueSLATEdeep">
            <summary> 深石板蓝 28 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Slabsdeep">
            <summary> 深铅灰色 29 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Browndark">
            <summary> 深棕褐色 30 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Turquoisedeep">
            <summary> 深绿松石色 32 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Colordark">
            <summary> 暗木色 33 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Greylight">
            <summary> 淡灰色 34 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Redearthgreyrose">
            <summary> 土灰玫瑰红色 35 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Longstone">
            <summary> 长石色 36 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Firebrick">
            <summary> 火砖色 37 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Greenforest">
            <summary> 森林绿 38 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Golden">
            <summary> 金色 39 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Foresythia">
            <summary> 鲜黄色 40 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Aerugo">
            <summary> 铜绿色 42 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Yellowbluish">
            <summary> 青黄色 43 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Greenhunter">
            <summary> 猎人绿 44 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Redindian">
            <summary> 印度红 45 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Yellowearthy">
            <summary> 土黄色 46 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Wathet">
            <summary> 浅蓝色 47 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Greyfrench">
            <summary> 浅灰色 48 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Bluelightsteel">
            <summary> 浅钢蓝色 49 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Colorlight">
            <summary> 浅木色 59 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Greenlime">
            <summary> 石灰绿色 60 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Bisque">
            <summary> 桔黄色 61 </summary>
        </member>
        <member name="F:AIO.ColorUnit.Maroon">
            <summary> 褐红色 62 </summary> 62
        </member>
        <member name="T:AIO.ScriptType">
            <summary>
            脚本类型
            </summary>
        </member>
        <member name="F:AIO.ScriptType.CScript">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Lua">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Java">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Python">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Shell">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Bat">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.ScriptType.Object_C">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIO.Suffix">
            <summary>
            后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.TextureSuffix">
            <summary>
            图片文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.VideoSuffix">
            <summary>
            视频文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.SoundSuffix">
            <summary>
            音频文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.TextSuffix">
            <summary>
            文本文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.ShaderSuffix">
            <summary>
            shader文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.FontSuffix">
            <summary>
            字体后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.Animation">
            <summary>
            动画文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.Animator">
            <summary>
            控制器文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.Material">
            <summary>
            材质文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.PrefabSuffix">
            <summary>
            预制体文件后缀
            </summary>
        </member>
        <member name="F:AIO.Suffix.RTextureSuffix">
            <summary>
            渲染纹理后缀
            </summary>
        </member>
        <member name="T:AIO.TimeUnit">
            <summary>
            时间
            </summary>
        </member>
        <member name="T:AIO.TimeUnit.SencondUnit">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIO.TimeUnit.SencondUnit.SECOND">
            <summary> 秒 </summary>
        </member>
        <member name="F:AIO.TimeUnit.SencondUnit.MILLISCOND">
            <summary> 毫秒 </summary>
        </member>
        <member name="F:AIO.TimeUnit.SencondUnit.MICROSECOND">
            <summary> 微秒 </summary>
        </member>
        <member name="F:AIO.TimeUnit.SencondUnit.NANOSECOND">
            <summary> 纳秒 </summary>
        </member>
        <member name="F:AIO.TimeUnit.SencondUnit.NANOSECOND_100">
            <summary> 100纳秒计数单位 </summary>
        </member>
        <member name="M:AIO.TimeUnit.GetSencondUnit(AIO.TimeUnit.SencondUnit)">
            <summary>
            获取秒 计数单位 秒
            </summary>
        </member>
        <member name="M:AIO.TimeUnit.GetMinUnit(AIO.TimeUnit.SencondUnit)">
            <summary>
            获取秒 计数单位 分
            </summary>
        </member>
        <member name="M:AIO.TimeUnit.GetHourUnit(AIO.TimeUnit.SencondUnit)">
            <summary>
            获取秒 计数单位 时
            </summary>
        </member>
        <member name="M:AIO.TimeUnit.GetDayUnit(AIO.TimeUnit.SencondUnit)">
            <summary>
            获取秒 计数单位 时
            </summary>
        </member>
        <member name="M:AIO.TimeUnit.GetWeekUnit(AIO.TimeUnit.SencondUnit)">
            <summary>
            获取秒 计数单位 时
            </summary>
        </member>
        <member name="T:AIO.TimeUnit.DateTimeUnit">
            <summary>
            时间间隔
            </summary>
        </member>
        <member name="F:AIO.TimeUnit.DateTimeUnit.Day">
            <summary> 日 </summary>
        </member>
        <member name="F:AIO.TimeUnit.DateTimeUnit.Week">
            <summary> 周 </summary>
        </member>
        <member name="F:AIO.TimeUnit.DateTimeUnit.Month">
            <summary> 月 </summary>
        </member>
        <member name="F:AIO.TimeUnit.DateTimeUnit.Season">
            <summary> 季 </summary>
        </member>
        <member name="F:AIO.TimeUnit.DateTimeUnit.Year">
            <summary> 年 </summary>
        </member>
        <member name="F:AIO.TimeUnit.UNIT_WEEK_DAY">
            <summary> 一周7天 </summary>
        </member>
        <member name="F:AIO.TimeUnit.UNIT_DAY_HOUR">
            <summary> 一天24时 </summary>
        </member>
        <member name="F:AIO.TimeUnit.UNIT_HOUR_MIN">
            <summary> 一时60分 </summary>
        </member>
        <member name="F:AIO.TimeUnit.UNIT_MIN_SECOND">
            <summary> 一分60秒 </summary>
        </member>
        <member name="F:AIO.TimeUnit.SECOND">
            <summary> 秒 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.TimeUnit.SECOND_MIN">
            <summary> 分 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.TimeUnit.SECOND_HOUR">
            <summary> 时 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.TimeUnit.SECOND_DAY">
            <summary> 日 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.TimeUnit.SECOND_WEEK">
            <summary> 周 单位时间（秒） s </summary>
        </member>
        <member name="F:AIO.TimeUnit.MS_SECOND">
            <summary> 秒 单位时间（毫秒） ms </summary>
        </member>
        <member name="F:AIO.TimeUnit.MS_MIN">
            <summary> 分 单位时间（毫秒） ms  </summary>
        </member>
        <member name="F:AIO.TimeUnit.MS_HOUR">
            <summary> 时 单位时间（毫秒） ms  </summary>
        </member>
        <member name="F:AIO.TimeUnit.MS_DAY">
            <summary> 日 单位时间（毫秒） ms  </summary>
        </member>
        <member name="F:AIO.TimeUnit.MS_WEEK">
            <summary> 周 单位时间（毫秒） ms  </summary>
        </member>
        <member name="F:AIO.TimeUnit.μS_SECOND">
            <summary> 秒 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.TimeUnit.μS_MIN">
            <summary> 分 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.TimeUnit.μS_HOUR">
            <summary> 时 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.TimeUnit.μS_DAY">
            <summary> 天 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.TimeUnit.μS_WEEK">
            <summary> 周 单位时间（微秒） μs </summary>
        </member>
        <member name="F:AIO.TimeUnit.NS_SECOND">
            <summary> 秒 单位时间（纳秒） ns </summary>
        </member>
        <member name="F:AIO.TimeUnit.NS_MIN">
            <summary> 分 单位时间（纳秒） ns </summary>
        </member>
        <member name="F:AIO.TimeUnit.NS_HOUR">
            <summary> 时 单位时间（纳秒） ns </summary>
        </member>
        <member name="F:AIO.TimeUnit.NS_DAY">
            <summary> 天 单位时间（纳秒） ns </summary>
        </member>
        <member name="F:AIO.TimeUnit.NS_WEEK">
            <summary> 周 单位时间（纳秒） ns </summary>
        </member>
        <member name="P:AIO.TimeUnit.Milliseconds">
            <summary> 1毫秒 </summary>
        </member>
        <member name="P:AIO.TimeUnit.Second">
            <summary> 1秒钟 </summary>
        </member>
        <member name="P:AIO.TimeUnit.Minute">
            <summary> 1分钟 </summary>
        </member>
        <member name="P:AIO.TimeUnit.Hour">
            <summary> 1小时 </summary>
        </member>
        <member name="P:AIO.TimeUnit.Day">
            <summary> 1天 </summary>
        </member>
        <member name="F:AIO.TimeUnit.GREENWICH">
            <summary> 格林威治时间UTC参照点：1970年1月1日0时0分0秒 </summary>
        </member>
    </members>
</doc>

using System;
using UnityEngine;
using UnityEngine.Events;
using Random = UnityEngine.Random;

namespace AIO.System.Calendar.Test
{
    [RequireComponent(typeof(TimeManager))]
    public class Tutorial_PopUp_Controller : MonoBehaviour
    {
        public TimeManager time_manager;

        public CalendarController calendar_controller;

        public GameObject popup_prefab;

        private string string_1 =
            "1/10 Welcome to the DateTime and Calendar system. This project provides a full event system based on the MSDN DateTime struct as well as some GUI prefabs to allow you to start developing right away. This system allows a time passage mechanic to be added to any Unity project, particularly useful in strategy games. This short tutorial will show you the main features and capabilities of the package. ";

        private string string_2 =
            "2/10 The TimeManager simulates the passage of time. Time may be sped up or slowed down by setting the time multiplier. DateTimes are accurate from 0 A.D to 9999 A.D. with milisecond accuracy. The TimeManager class is also responsible for evaluating the events as time passes.";

        private string string_3 =
            "3/10 In addition to the event system, this package also contains GUI Prefabs for viewing and controlling the date and time. This scene contains a box calendar, a time controller, an analog clock, and a digital clock. The provided prefabs have some features pre-implemented for you, however it is up to you to customize the UI elements to suit your needs.";

        private string string_4 =
            "4/10 The CalendarController manages how the date and time is displayed. When build_calendar is called, old UI elements are cleared and rebuilt depending on the current displayed date. The other UI elements control or display parameters of the TimeManager component.";

        private string string_5 =
            "5/10 We will now discuss how the event system works. Using this package, you can track the date, simulate the passage of time, and call events at specific DateTimes. There are two types of events that are evaluated, repeating events and event stack events.";

        private string string_6 =
            "6/10 Repeating events are invoked by the TimeManager on a repeating basis. For example, the tick_day event is called whenever a new day passes. Subscribe a function that needs to be repeated every day to this event.";

        private string string_7 =
            "7/10 Event stack events are invoked by the TimeManager on a specific DateTime. Events are stored in a SortedSet, making them quick to test and evaluate during runtime. Subscribe a function that needs to be called on a specific date and time using the event stack.";

        private string string_8 =
            "8/10 These popups were created by generating an event stack event 2 seconds after the intalization time. Every time you click a button, the currently displayed popup is destroyed and the next one is created.";

        private string string_9 = "9/10 Each subsquent popup is created when the previous one is destroyed. In that way this is really a chain of popups created from a single event stack event.";

        private string string_10 =
            "10/10 We are now going to try something slightly different. The next popup will be generated by adding an event to the event stack that will create a popup three (3) seconds in the future. Are you ready?";

        private string string_11 = "1/2  Wow, there wasn't a popup for three whole seconds. How exhilerating.";

        private string string_12 =
            "2/2  We are going to do the same thing as before, but instead create the popup one (1) hour into the future. You could wait for an actual hour to pass in real time to continue the tutorial, but I recommend using the buttons on the TimeController to speed up the passage of time.";

        private string string_13 =
            "1/2 Time flies when your having fun huh. I hope you can now see how we can control the passage of time, and how we can add events to the event stack to be evaluated.";

        private string string_14 =
            "2/2 We are now going to demonstrate repeating events. Every day at lunch time (12pm), a popup will be shown indicating that it is time for lunch. After three lunches we will unsubscribe the function and continue the tutorial.";

        private int lunch_counter = 0;

        private string string_15 =
            "1/6 Those were some delicious lunches! I hope you now understand how we can subscribe and unsubscribe to repeating events to fire functions at regular intervals. Any function call can be subscribed to any event. ";

        private string string_16 = "2/6 To finish the tutorial, we will go over some of the features of the GUI Prefabs provided to you.";

        private string string_17 =
            "3/6 There is a simple color pallette system implemented for you. The color pallette defines some basic colors for you to choose from. You can access these colors programatically by getting the component. The UpdateUIPallette function finds all GameObjects in the scene that are tagged by the color names (eg. \"alt_color_1\") and attempts to set the image and text colors accordingly.";

        private string string_18 =
            "4/6 The color pallette system is also expanded upon with the Calendar DAY_STYLE enum. DAY_STYLEs define different colors and behaviours that can be used to decorate individual CalendarDateItems. The displayed BoxCalendar automatically sets days on the weekend with the DAY_STYLE.Weekend theme for example. Using this system, you can implement custom visual effects for different events.";

        private string string_19 =
            "5/6 The DateCalendarItems have both a background color and a highlight color. If the highlight color is set then the item will be changed to that color. If the highlight color is removed, the item will be reverted to the original background color.";

        private string string_20 =
            "6/6 We give future events a style so that they are rendered on the calendar in a unique way. We are going to make another event, 3 days in the future and highlight the event with the holiday DAY_STYLE. The holiday DAY_STYLE sets the forground color to dark_color and the highlight color to alt_color_3";

        private string string_21 =
            "1/2 This event has now fired. The current displayed day highlight effect will overwrite the alt_color_1 and delete the event effect. The event is removed from the stack so it won't be rendered again.";

        private string string_22 =
            "2/2 This concludes the tutorial scene for the Date and Time Event System. I hope this asset is useful to you. If you have any questions or support, my website is https://aerojacob.online/contact/, it has my most up-to-date contact info. My current email is at jacob.booth@gmail.com";


        // Start is called before the first frame update
        void Start()
        {
            time_manager = GetComponent<TimeManager>();
            calendar_controller = FindObjectOfType<CalendarController>();

            DateTimeEvent d1 = DateTimeEvent.InstantiateDateTimeEvent(time_manager.start_date.AddSeconds(1),
                () => { evaluate_popup_chain_1(); }
            );
            time_manager.AddEventToStack(d1, calendar_controller);
        }

        private void evaluate_popup_chain_1()
        {
            PopUp p = make_new_simple_popup(string_1, "Continue...", () =>
                {
                    p = make_new_simple_popup(string_2, "Interesting, this asset seems useful...", () =>
                    {
                        p = make_new_simple_popup(string_3, "Continue...", () =>
                        {
                            p = make_new_simple_popup(string_4, "Continue...", () =>
                            {
                                p = make_new_simple_popup(string_5, "Let's learn about repeating events...", () =>
                                {
                                    p = make_new_simple_popup(string_6, "Let's learn about event stack events...", () =>
                                    {
                                        p = make_new_simple_popup(string_7, "Continue...", () =>
                                        {
                                            p = make_new_simple_popup(string_8, "Continue...", () =>
                                            {
                                                p = make_new_simple_popup(string_9, "Continue...", () =>
                                                {
                                                    p = make_new_simple_popup(string_10, "I am ready to continue!", () =>
                                                        {
                                                            // Create the event 3 seconds in the future
                                                            DateTimeEvent d2 = DateTimeEvent.InstantiateDateTimeEvent(time_manager.date.AddSeconds(3f), evaluate_popup_chain_2);

                                                            // Add the event to the stack
                                                            time_manager.AddEventToStack(d2, calendar_controller);
                                                        }
                                                    );
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                }
            );
        }


        private void evaluate_popup_chain_2()
        {
            PopUp p = make_new_simple_popup(string_11, "Continue...", () =>
            {
                p = make_new_simple_popup(string_12, "See you in an hour!", () =>
                    {
                        // Create the event 1 hour in the future
                        DateTimeEvent d3 = DateTimeEvent.InstantiateDateTimeEvent(time_manager.date.AddHours(1f), evaluate_popup_chain_3);

                        // Add the event to the stack
                        time_manager.AddEventToStack(d3, calendar_controller);
                    }
                );
            });
        }

        private void evaluate_popup_chain_3()
        {
            PopUp p = make_new_simple_popup(string_13, "Continue...", () =>
            {
                p = make_new_simple_popup(string_14, "See you at lunchtime!", () => { time_manager.tick_noon += evaluate_lunch; }
                );
            });
        }

        private void evaluate_lunch(object sender, DateTime d)
        {
            lunch_counter++;

            PopUp p = make_new_simple_popup("It is noon, time for some lunch!", "Continue...", null);

            if (lunch_counter >= 3)
            {
                time_manager.tick_noon -= evaluate_lunch;

                // Create the event 15 minutes in the future
                DateTimeEvent d4 = DateTimeEvent.InstantiateDateTimeEvent(time_manager.date.AddHours(0.25f), evaluate_popup_chain_4);

                // Add the event to the stack
                time_manager.AddEventToStack(d4, calendar_controller);
            }
        }

        private void evaluate_popup_chain_4()
        {
            time_manager.BumpMultiplierIndex(-2);

            PopUp p = make_new_simple_popup(string_15, "Continue...", () =>
                {
                    p = make_new_simple_popup(string_16, "Continue...", () =>
                    {
                        p = make_new_simple_popup(string_17, "Continue...", () =>
                        {
                            p = make_new_simple_popup(string_18, "Continue...", () =>
                            {
                                p = make_new_simple_popup(string_19, "Continue...", () =>
                                {
                                    p = make_new_simple_popup(string_20, "Continue...", () =>
                                    {
                                        // Create the event 3 days in the future
                                        DateTimeEvent d5 = DateTimeEvent.InstantiateDateTimeEvent(time_manager.date.AddDays(3f), evaluate_popup_chain_5, DAY_STYLE.AltColor2);

                                        // Get the CalendarController component
                                        // Add the event to the stack
                                        time_manager.AddEventToStack(d5, calendar_controller);
                                    });
                                });
                            });
                        });
                    });
                }
            );
        }

        private void evaluate_popup_chain_5()
        {
            PopUp p = make_new_simple_popup(string_21, "Alright...", () =>
            {
                p = make_new_simple_popup(string_22, "Continue...", () =>
                {
                    DateTime d = time_manager.date;
                    DateTime end = time_manager.date.AddDays(30);

                    for (int i = 0; i < 30; i++)
                    {
                        if (Random.value > 0.2f)
                        {
                            DateTimeEvent d6 = DateTimeEvent.InstantiateDateTimeEvent(d.AddDays(i), () => { do_nothing(); }, (DAY_STYLE)Random.Range(11, 16));
                            time_manager.AddEventToStack(d6, calendar_controller);
                        }
                    }
                });
            });
        }

        /// <summary>
        /// Creates a simple popup with a text field, and a single button that calls a function.
        /// 
        /// If the function is left null, the button simply destroys the popup.
        /// </summary>
        /// <param name="text">Text to fill the simple popup</param>
        /// <param name="button_text">Text to fill the button</param>
        /// <param name="func">A function to call when the button gets clicked.</param>
        private PopUp make_new_simple_popup(string text = "", string button_text = "", UnityAction func = null)
        {
            PopUp p = PopUp.Create_Popup(popup_prefab, FindObjectOfType<Canvas>().gameObject, text, button_text, null);

            if (func == null)
            {
                p.main_button_func = () => Destroy(p.gameObject);
            }
            else
            {
                p.main_button_func = func;
                p.add_action(() => Destroy(p.gameObject));
            }

            return p;
        }

        private void do_nothing()
        {
            return;
        }
    }
}
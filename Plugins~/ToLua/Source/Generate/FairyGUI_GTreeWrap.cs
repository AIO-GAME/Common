//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_GTreeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FairyGUI.GTree), typeof(FairyGUI.GList));
		L.RegFunction("GetSelectedNode", GetSelectedNode);
		L.RegFunction("GetSelectedNodes", GetSelectedNodes);
		L.RegFunction("SelectNode", SelectNode);
		L.RegFunction("UnselectNode", UnselectNode);
		L.RegFunction("ExpandAll", ExpandAll);
		L.RegFunction("CollapseAll", CollapseAll);
		L.RegFunction("Setup_BeforeAdd", Setup_BeforeAdd);
		L.RegFunction("New", _CreateFairyGUI_GTree);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("treeNodeRender", get_treeNodeRender, set_treeNodeRender);
		L.RegVar("treeNodeWillExpand", get_treeNodeWillExpand, set_treeNodeWillExpand);
		L.RegVar("rootNode", get_rootNode, null);
		L.RegVar("indent", get_indent, set_indent);
		L.RegVar("clickToExpand", get_clickToExpand, set_clickToExpand);
		L.RegFunction("TreeNodeWillExpandDelegate", FairyGUI_GTree_TreeNodeWillExpandDelegate);
		L.RegFunction("TreeNodeRenderDelegate", FairyGUI_GTree_TreeNodeRenderDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFairyGUI_GTree(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				FairyGUI.GTree obj = new FairyGUI.GTree();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FairyGUI.GTree.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSelectedNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			FairyGUI.GTree obj = (FairyGUI.GTree)ToLua.CheckObject<FairyGUI.GTree>(L, 1);
			FairyGUI.GTreeNode o = obj.GetSelectedNode();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSelectedNodes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				FairyGUI.GTree obj = (FairyGUI.GTree)ToLua.CheckObject<FairyGUI.GTree>(L, 1);
				System.Collections.Generic.List<FairyGUI.GTreeNode> o = obj.GetSelectedNodes();
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				FairyGUI.GTree obj = (FairyGUI.GTree)ToLua.CheckObject<FairyGUI.GTree>(L, 1);
				System.Collections.Generic.List<FairyGUI.GTreeNode> arg0 = (System.Collections.Generic.List<FairyGUI.GTreeNode>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<FairyGUI.GTreeNode>));
				System.Collections.Generic.List<FairyGUI.GTreeNode> o = obj.GetSelectedNodes(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: FairyGUI.GTree.GetSelectedNodes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SelectNode(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				FairyGUI.GTree obj = (FairyGUI.GTree)ToLua.CheckObject<FairyGUI.GTree>(L, 1);
				FairyGUI.GTreeNode arg0 = (FairyGUI.GTreeNode)ToLua.CheckObject<FairyGUI.GTreeNode>(L, 2);
				obj.SelectNode(arg0);
				return 0;
			}
			else if (count == 3)
			{
				FairyGUI.GTree obj = (FairyGUI.GTree)ToLua.CheckObject<FairyGUI.GTree>(L, 1);
				FairyGUI.GTreeNode arg0 = (FairyGUI.GTreeNode)ToLua.CheckObject<FairyGUI.GTreeNode>(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.SelectNode(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: FairyGUI.GTree.SelectNode");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnselectNode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FairyGUI.GTree obj = (FairyGUI.GTree)ToLua.CheckObject<FairyGUI.GTree>(L, 1);
			FairyGUI.GTreeNode arg0 = (FairyGUI.GTreeNode)ToLua.CheckObject<FairyGUI.GTreeNode>(L, 2);
			obj.UnselectNode(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExpandAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				FairyGUI.GTree obj = (FairyGUI.GTree)ToLua.CheckObject<FairyGUI.GTree>(L, 1);
				obj.ExpandAll();
				return 0;
			}
			else if (count == 2)
			{
				FairyGUI.GTree obj = (FairyGUI.GTree)ToLua.CheckObject<FairyGUI.GTree>(L, 1);
				FairyGUI.GTreeNode arg0 = (FairyGUI.GTreeNode)ToLua.CheckObject<FairyGUI.GTreeNode>(L, 2);
				obj.ExpandAll(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: FairyGUI.GTree.ExpandAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CollapseAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				FairyGUI.GTree obj = (FairyGUI.GTree)ToLua.CheckObject<FairyGUI.GTree>(L, 1);
				obj.CollapseAll();
				return 0;
			}
			else if (count == 2)
			{
				FairyGUI.GTree obj = (FairyGUI.GTree)ToLua.CheckObject<FairyGUI.GTree>(L, 1);
				FairyGUI.GTreeNode arg0 = (FairyGUI.GTreeNode)ToLua.CheckObject<FairyGUI.GTreeNode>(L, 2);
				obj.CollapseAll(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: FairyGUI.GTree.CollapseAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Setup_BeforeAdd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			FairyGUI.GTree obj = (FairyGUI.GTree)ToLua.CheckObject<FairyGUI.GTree>(L, 1);
			FairyGUI.Utils.ByteBuffer arg0 = (FairyGUI.Utils.ByteBuffer)ToLua.CheckObject<FairyGUI.Utils.ByteBuffer>(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.Setup_BeforeAdd(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_treeNodeRender(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.GTree obj = (FairyGUI.GTree)o;
			FairyGUI.GTree.TreeNodeRenderDelegate ret = obj.treeNodeRender;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index treeNodeRender on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_treeNodeWillExpand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.GTree obj = (FairyGUI.GTree)o;
			FairyGUI.GTree.TreeNodeWillExpandDelegate ret = obj.treeNodeWillExpand;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index treeNodeWillExpand on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rootNode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.GTree obj = (FairyGUI.GTree)o;
			FairyGUI.GTreeNode ret = obj.rootNode;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rootNode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_indent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.GTree obj = (FairyGUI.GTree)o;
			int ret = obj.indent;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index indent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_clickToExpand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.GTree obj = (FairyGUI.GTree)o;
			int ret = obj.clickToExpand;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clickToExpand on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_treeNodeRender(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.GTree obj = (FairyGUI.GTree)o;
			FairyGUI.GTree.TreeNodeRenderDelegate arg0 = (FairyGUI.GTree.TreeNodeRenderDelegate)ToLua.CheckDelegate<FairyGUI.GTree.TreeNodeRenderDelegate>(L, 2);
			obj.treeNodeRender = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index treeNodeRender on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_treeNodeWillExpand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.GTree obj = (FairyGUI.GTree)o;
			FairyGUI.GTree.TreeNodeWillExpandDelegate arg0 = (FairyGUI.GTree.TreeNodeWillExpandDelegate)ToLua.CheckDelegate<FairyGUI.GTree.TreeNodeWillExpandDelegate>(L, 2);
			obj.treeNodeWillExpand = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index treeNodeWillExpand on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_indent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.GTree obj = (FairyGUI.GTree)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.indent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index indent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_clickToExpand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FairyGUI.GTree obj = (FairyGUI.GTree)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.clickToExpand = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clickToExpand on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_GTree_TreeNodeWillExpandDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.GTree.TreeNodeWillExpandDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.GTree.TreeNodeWillExpandDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FairyGUI_GTree_TreeNodeRenderDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<FairyGUI.GTree.TreeNodeRenderDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<FairyGUI.GTree.TreeNodeRenderDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}


//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FairyGUI_ListLayoutTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(FairyGUI.ListLayoutType));
		L.RegVar("SingleColumn", get_SingleColumn, null);
		L.RegVar("SingleRow", get_SingleRow, null);
		L.RegVar("FlowHorizontal", get_FlowHorizontal, null);
		L.RegVar("FlowVertical", get_FlowVertical, null);
		L.RegVar("Pagination", get_Pagination, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<FairyGUI.ListLayoutType>.Check = CheckType;
		StackTraits<FairyGUI.ListLayoutType>.Push = Push;
	}

	static void Push(IntPtr L, FairyGUI.ListLayoutType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(FairyGUI.ListLayoutType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SingleColumn(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.ListLayoutType.SingleColumn);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SingleRow(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.ListLayoutType.SingleRow);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FlowHorizontal(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.ListLayoutType.FlowHorizontal);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FlowVertical(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.ListLayoutType.FlowVertical);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Pagination(IntPtr L)
	{
		ToLua.Push(L, FairyGUI.ListLayoutType.Pagination);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		FairyGUI.ListLayoutType o = (FairyGUI.ListLayoutType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}


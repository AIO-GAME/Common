<#@ template language="C#" #>
<#@ include file="$(SolutionDir)Packages\com.self.package\T4~\ClassParam.ttinclude" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>

<#+
    public class ClassParamSingleton
    {
        public ClassParam ClassParams { get; }

        private static FunctionParam _Style;

        private static FunctionParam Style
        {
            get
            {
                if (_Style is null)
                {
                    _Style = new FunctionParam("GUIStyle", "style", "style")
                    {
                        Comments = "样式",
                    };
                }
                return _Style;
            }
        }

        private static FunctionParam _Options;

        private static FunctionParam Options
        {
            get
            {
                if (_Options is null)
                {
                    _Options = new FunctionParam("GUILayoutOption", "options", "options")
                    {
                        Comments = "排版格式",
                        IsParams = true
                    };
                }
                return _Options;
            }
        }

        public ClassParamSingleton()
        {
            ClassParams = new ClassParam { Name = "GULayout", Comments = "GUILayout" };
            var methods = typeof(ClassParamSingleton).GetMethods(BindingFlags.Static | BindingFlags.NonPublic);
            foreach (var method in methods)
            {
                try
                {
                    var attr = method.GetCustomAttribute<FuncParamAttribute>();
                    if (attr is null) continue;
                    if (string.IsNullOrEmpty(attr.Group)) attr.Group = "Default";
                    if (!ClassParams.FunctionGroups.ContainsKey(attr.Group))
                        ClassParams.FunctionGroups.Add(attr.Group, new List<FunctionChunk>());

                    if (attr.IsArray)
                    {
                        var chunks = (IEnumerable<FunctionChunk>)method.Invoke(null, null);
                        ClassParams.FunctionGroups[attr.Group].AddRange(chunks);
                    }
                    else
                    {
                        var chunk = (FunctionChunk)method.Invoke(null, null);
                        ClassParams.FunctionGroups[attr.Group].Add(chunk);
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }
            }
        }

        [FuncParam(Group = "Password", IsArray = true)]
        private static List<FunctionChunk> PasswordField()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("string", "password", "password") { Comments = "文本内容" };
            var mask = new FunctionParam("char", "mask", "mask") { Comments = "屏蔽密码的字符" };
            var maxLength = new FunctionParam("int", "maxLength", "maxLength") { Comments = "输入字符串最大长度" };
            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, mask, Options, },
                new FunctionParam[] { value, mask, Style, Options, },
                new FunctionParam[] { value, mask, maxLength, Options, },
                new FunctionParam[] { value, mask, maxLength, Style, Options, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    IsStatic = true,
                    Comments = "绘制 密码框",
                    Name = "Password",
                    Params = param,
                    ReturnType = "string",
                };
                chunk.Content = $"return GUILayout.PasswordField({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            return chunks;
        }

        [FuncParam(Group = "Label", IsArray = true)]
        private static List<FunctionChunk> Label()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("string", "text", "text") { Comments = "文本内容" };
            var maxLength = new FunctionParam("int", "maxLength", "maxLength") { Comments = "输入字符串最大长度" };
            foreach (var item in new string[]
            {
                "string", "GUIContent", "float",
            })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                else if (item != "string" && item != "GUIContent") label.Output = "new GUIContent(label.ToString())";

                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { label, Options, },
                    new FunctionParam[] { label, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        IsStatic = true,
                        Comments = "绘制 标签名",
                        Name = "Label",
                        Params = param,
                        ReturnType = "void",
                    };
                    chunk.Content = $"GUILayout.Label({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Button", IsArray = true)]
        private static List<FunctionChunk> Button()
        {
            var chunks = new List<FunctionChunk>();

            var width_float = new FunctionParam("float", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_float = new FunctionParam("float", "height", "GUILayout.Width(height)") { Comments = "高度" };
            var width_int = new FunctionParam("int", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_int = new FunctionParam("int", "height", "GUILayout.Width(height)") { Comments = "高度" };
            foreach (var item in new string[] { "GUIContent", "string" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { label, Options, },
                    new FunctionParam[] { label, width_float, },
                    new FunctionParam[] { label, width_float, height_float },
                    new FunctionParam[] { label, width_int, },
                    new FunctionParam[] { label, width_int, height_int },
                    new FunctionParam[] { label, Style, Options, },
                    new FunctionParam[] { label, Style, width_float, },
                    new FunctionParam[] { label, Style, width_float, height_float },
                    new FunctionParam[] { label, Style, width_int, },
                    new FunctionParam[] { label, Style, width_int, height_int },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        IsStatic = true,
                        Comments = "绘制 按钮",
                        Name = "Button",
                        Params = param,
                        ReturnType = "bool",
                    };
                    chunk.Content = $"return GUILayout.Button({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }

            var action = new FunctionParam("Action", "action", "") { Comments = "回调" };
            foreach (var item in new string[] { "GUIContent", "string", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { label, action, Options, },
                    new FunctionParam[] { label, action, width_float, },
                    new FunctionParam[] { label, action, width_float, height_float },
                    new FunctionParam[] { label, action, width_int, },
                    new FunctionParam[] { label, action, width_int, height_int },
                    new FunctionParam[] { label, action, Style, Options, },
                    new FunctionParam[] { label, action, Style, width_float, },
                    new FunctionParam[] { label, action, Style, width_float, height_float },
                    new FunctionParam[] { label, action, Style, width_int, },
                    new FunctionParam[] { label, action, Style, width_int, height_int },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        IsStatic = true,
                        Comments = "绘制 按钮",
                        Name = "Button",
                        Params = param,
                        ReturnType = "void",
                    };
                    chunk.Content = $"if (GUILayout.Button({chunk.GetParamValues()})) action();";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Button Repeat", IsArray = true)]
        private static List<FunctionChunk> ButtonRepeat()
        {
            var chunks = new List<FunctionChunk>();

            var width_float = new FunctionParam("float", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_float = new FunctionParam("float", "height", "GUILayout.Width(height)") { Comments = "高度" };
            var width_int = new FunctionParam("int", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_int = new FunctionParam("int", "height", "GUILayout.Width(height)") { Comments = "高度" };
            foreach (var item in new string[] { "GUIContent", "string", })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { label, Options, },
                    new FunctionParam[] { label, width_float, },
                    new FunctionParam[] { label, width_float, height_float },
                    new FunctionParam[] { label, width_int, },
                    new FunctionParam[] { label, width_int, height_int },
                    new FunctionParam[] { label, Style, Options, },
                    new FunctionParam[] { label, Style, width_float, },
                    new FunctionParam[] { label, Style, width_float, height_float },
                    new FunctionParam[] { label, Style, width_int, },
                    new FunctionParam[] { label, Style, width_int, height_int },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        IsStatic = true,
                        Comments = "绘制 按钮",
                        Name = "ButtonRepeat",
                        Params = param,
                        ReturnType = "bool",
                    };
                    chunk.Content = $"return GUILayout.RepeatButton({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }

            var action = new FunctionParam("Action", "action", "") { Comments = "回调" };
            foreach (var item in new string[] { "GUIContent", "string", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { label, action, Options, },
                    new FunctionParam[] { label, action, width_float, },
                    new FunctionParam[] { label, action, width_float, height_float },
                    new FunctionParam[] { label, action, width_int, },
                    new FunctionParam[] { label, action, width_int, height_int },
                    new FunctionParam[] { label, action, Style, Options, },
                    new FunctionParam[] { label, action, Style, width_float, },
                    new FunctionParam[] { label, action, Style, width_float, height_float },
                    new FunctionParam[] { label, action, Style, width_int, },
                    new FunctionParam[] { label, action, Style, width_int, height_int },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        IsStatic = true,
                        Comments = "绘制 按钮",
                        Name = "ButtonRepeat",
                        Params = param,
                        ReturnType = "void",
                    };
                    chunk.Content = $"if (GUILayout.RepeatButton({chunk.GetParamValues()})) action();";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Field Text", IsArray = true)]
        private static List<FunctionChunk> TextField()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("string", "text", "text") { Comments = "文本内容" };
            var maxLength = new FunctionParam("int", "maxLength", "maxLength") { Comments = "输入字符串最大长度" };
            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, Options, },
                new FunctionParam[] { value, Style, Options, },
                new FunctionParam[] { value, maxLength, Options, },
                new FunctionParam[] { value, maxLength, Style, Options, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    IsStatic = true,
                    Comments = "绘制 文本框",
                    Name = "Field",
                    Params = param,
                    ReturnType = "string",
                };
                chunk.Content = $"return GUILayout.TextField({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            return chunks;
        }
    }
#>
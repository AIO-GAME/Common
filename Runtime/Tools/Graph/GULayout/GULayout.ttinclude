<#@ include file="$(SolutionDir)Packages\com.self.package\T4~\ClassChunk.ttinclude" #>
<#+
    public class ClassParamSingleton
    {
        public ClassParam ClassParams { get; }

        private static FunctionParam _Style;

        private static FunctionParam Style
        {
            get
            {
                if (_Style is null)
                {
                    _Style = new FunctionParam("GUIStyle", "style", "style")
                    {
                        Comments = "样式",
                    };
                }
                return _Style;
            }
        }

        private static FunctionParam _Options;

        private static FunctionParam Options
        {
            get
            {
                if (_Options is not null) return _Options;
                _Options = new FunctionParam("GUILayoutOption", "options", "options")
                {
                    Comments = "排版格式",
                    IsParams = true
                };
                return _Options;
            }
        }

        public ClassParamSingleton()
        {
            ClassParams = ClassHelper.Create();
            var methods = typeof(ClassParamSingleton).GetMethods(BindingFlags.Static | BindingFlags.NonPublic);
            foreach (var method in methods)
            {
                try
                {
                    var attr = method.GetCustomAttribute<FuncParamAttribute>();
                    if (attr is null) continue;
                    if (string.IsNullOrEmpty(attr.Group)) attr.Group = "Default";
                    if (!ClassParams.FunctionGroups.ContainsKey(attr.Group))
                        ClassParams.FunctionGroups.Add(attr.Group, new List<FunctionChunk>());

                    if (attr.IsArray)
                    {
                        var chunks = (IEnumerable<FunctionChunk>)method.Invoke(null, null);
                        ClassParams.FunctionGroups[attr.Group].AddRange(chunks);
                    }
                    else
                    {
                        var chunk = (FunctionChunk)method.Invoke(null, null);
                        ClassParams.FunctionGroups[attr.Group].Add(chunk);
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }
            }
            ClassParams.Comments = "Layout";
            ClassParams.Header.AppendLine("/*|✩ - - - - - |||");
            ClassParams.Header.AppendLine("|||✩ Date:     ||| -> Automatic Generate");
            ClassParams.Header.AppendLine("|||✩ Document: ||| ->");
            ClassParams.Header.AppendLine("|||✩ - - - - - |*/");
            ClassParams.Pragma.Add("warning disable CS1591 // Missing XML comment for publicly visible type or member");
            ClassParams.Using.Add("System");
            ClassParams.Using.Add("System.Collections.Generic");
            ClassParams.Using.Add("System.Linq");
            ClassParams.Using.Add("UnityEngine");
            ClassParams.NameSpace = "AIO";
            ClassParams.Name = "GULayout";
            ClassParams.IsPartial = true;
            ClassParams.State = TChunkState.None;
            ClassParams.Accessibility = "public";
        }

        [FuncParam(Group = "Toggle", IsArray = true)]
        private static List<FunctionChunk> Toggle()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("bool", "value", "value") { Comments = "值" };
            foreach (var item in new string[]
            {
                "string", "GUIContent", "Texture"
            })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { label, value, Style, Options, },
                    new FunctionParam[] { label, value, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 按钮",
                        Name = "Toggle",
                        Params = param,
                        ReturnType = "bool",
                    };
                    chunk.Content = $"return GUILayout.Toggle({chunk.GetParamValues()});".Replace("label, value,",
                        "value, label,");
                    if (!chunk.Content.Contains("style"))
                        chunk.Content = chunk.Content.Replace("options", "GUI.skin.toggle, options");
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Area Text", IsArray = true)]
        private static List<FunctionChunk> TextArea()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("string", "text", "text") { Comments = "文本内容" };
            var rect = new FunctionParam("Rect", "rect", "rect") { Comments = "绘制区域" };
            var maxLength = new FunctionParam("int", "maxLength", "maxLength") { Comments = "输入字符串最大长度" };
            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, Options, },
                new FunctionParam[] { value, Style, Options, },
                new FunctionParam[] { value, maxLength, Options, },
                new FunctionParam[] { value, maxLength, Style, Options, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 文本视图",
                    Name = "AreaText",
                    Params = param,
                    ReturnType = "string",
                };
                chunk.Content = $"return GUILayout.TextArea({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { rect, value },
                new FunctionParam[] { rect, value, Style, },
                new FunctionParam[] { rect, value, maxLength },
                new FunctionParam[] { rect, value, maxLength, Style, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 文本视图",
                    Name = "AreaText",
                    Params = param,
                    ReturnType = "string",
                };
                chunk.Content = $"return GUI.TextArea({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            return chunks;
        }

        [FuncParam(Group = "Password", IsArray = true)]
        private static List<FunctionChunk> PasswordField()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("string", "password", "password") { Comments = "文本内容" };
            var mask = new FunctionParam("char", "mask", "mask") { Comments = "屏蔽密码的字符" };
            var maxLength = new FunctionParam("int", "maxLength", "maxLength") { Comments = "输入字符串最大长度" };
            var rect = new FunctionParam("Rect", "rect", "rect") { Comments = "绘制区域" };
            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, mask, Options, },
                new FunctionParam[] { value, mask, Style, Options, },
                new FunctionParam[] { value, mask, maxLength, Options, },
                new FunctionParam[] { value, mask, maxLength, Style, Options, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 密码框",
                    Name = "Password",
                    Params = param,
                    ReturnType = "string",
                };
                chunk.Content = $"return GUILayout.PasswordField({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { rect, value, mask, },
                new FunctionParam[] { rect, value, mask, Style, },
                new FunctionParam[] { rect, value, mask, maxLength, },
                new FunctionParam[] { rect, value, mask, maxLength, Style, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 密码框",
                    Name = "Password",
                    Params = param,
                    ReturnType = "string",
                };
                chunk.Content = $"return GUI.PasswordField({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            return chunks;
        }

        [FuncParam(Group = "Label", IsArray = true)]
        private static List<FunctionChunk> Label()
        {
            var chunks = new List<FunctionChunk>();
            foreach (var item in new string[]
            {
                "string", "GUIContent", "float",
            })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                else if (item != "string" && item != "GUIContent") label.Output = "new GUIContent(label.ToString())";

                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { label, Options, },
                    new FunctionParam[] { label, Style, Options, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 标签名",
                        Name = "Label",
                        Params = param,
                        ReturnType = "void",
                    };
                    chunk.Content = $"GUILayout.Label({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Button", IsArray = true)]
        private static List<FunctionChunk> Button()
        {
            var chunks = new List<FunctionChunk>();
            var action = new FunctionParam("Action", "action", "") { Comments = "回调" };
            var rect = new FunctionParam("Rect", "rect", "rect") { Comments = "绘制区域" };
            var pos = new FunctionParam("Vector2", "pos", "new Rect(pos - size / 2, size)") { Comments = "位置" };
            var size = new FunctionParam("Vector2", "size", "") { Comments = "大小" };
            var width_float = new FunctionParam("float", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_float = new FunctionParam("float", "height", "GUILayout.Height(height)") { Comments = "高度" };
            foreach (var item in new string[] { "GUIContent", "string" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { label, Options, },
                    new FunctionParam[] { label, width_float, },
                    new FunctionParam[] { label, width_float, height_float },
                    new FunctionParam[] { label, Style, Options, },
                    new FunctionParam[] { label, Style, width_float, },
                    new FunctionParam[] { label, Style, width_float, height_float },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 按钮",
                        Name = "Button",
                        Params = param,
                        ReturnType = "bool",
                    };
                    chunk.Content = $"return GUILayout.Button({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
                paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { label, action, Options, },
                    new FunctionParam[] { label, action, width_float, },
                    new FunctionParam[] { label, action, width_float, height_float },
                    new FunctionParam[] { label, action, Style, Options, },
                    new FunctionParam[] { label, action, Style, width_float, },
                    new FunctionParam[] { label, action, Style, width_float, height_float },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 按钮",
                        Name = "Button",
                        Params = param,
                        ReturnType = "void",
                    };
                    chunk.Content = $"if (GUILayout.Button({chunk.GetParamValues()})) action();";
                    chunks.Add(chunk);
                }
            }

            foreach (var item in new string[] { "GUIContent", "string", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { rect, label, },
                    new FunctionParam[] { rect, label, Style, },
                    new FunctionParam[] { pos, size, label, },
                    new FunctionParam[] { pos, size, label, Style, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 按钮",
                        Name = "Button",
                        Params = param,
                        ReturnType = "bool",
                    };
                    chunk.Content = $"return GUI.Button({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }

                paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { rect, label, action, },
                    new FunctionParam[] { rect, label, action, Style, },
                    new FunctionParam[] { pos, size, label, action, },
                    new FunctionParam[] { pos, size, label, action, Style, },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 按钮",
                        Name = "Button",
                        Params = param,
                        ReturnType = "void",
                    };
                    chunk.ContentBuilder.AppendLine("if (action is null) return;");
                    chunk.ContentBuilder.AppendLine($"if (GUI.Button({chunk.GetParamValues()})) action();");
                    chunks.Add(chunk);
                }
            }

            return chunks;
        }

        [FuncParam(Group = "Button Repeat", IsArray = true)]
        private static List<FunctionChunk> ButtonRepeat()
        {
            var chunks = new List<FunctionChunk>();

            var width_float = new FunctionParam("float", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_float = new FunctionParam("float", "height", "GUILayout.Height(height)") { Comments = "高度" };
            foreach (var item in new string[] { "GUIContent", "string", })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { label, Options, },
                    new FunctionParam[] { label, width_float, },
                    new FunctionParam[] { label, width_float, height_float },
                    new FunctionParam[] { label, Style, Options, },
                    new FunctionParam[] { label, Style, width_float, },
                    new FunctionParam[] { label, Style, width_float, height_float },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 按钮",
                        Name = "ButtonRepeat",
                        Params = param,
                        ReturnType = "bool",
                    };
                    chunk.Content = $"return GUILayout.RepeatButton({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
            }

            var action = new FunctionParam("Action", "action", "") { Comments = "回调" };
            foreach (var item in new string[] { "GUIContent", "string", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标签" };
                if (item == "Texture") label.Output = "new GUIContent(label)";
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { label, action, Options, },
                    new FunctionParam[] { label, action, width_float, },
                    new FunctionParam[] { label, action, width_float, height_float },
                    new FunctionParam[] { label, action, Style, Options, },
                    new FunctionParam[] { label, action, Style, width_float, },
                    new FunctionParam[] { label, action, Style, width_float, height_float },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 按钮",
                        Name = "ButtonRepeat",
                        Params = param,
                        ReturnType = "void",
                    };
                    chunk.Content = $"if (GUILayout.RepeatButton({chunk.GetParamValues()})) action();";
                    chunks.Add(chunk);
                }
            }
            return chunks;
        }

        [FuncParam(Group = "Field Text", IsArray = true)]
        private static List<FunctionChunk> TextField()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("string", "text", "text") { Comments = "文本内容" };
            var maxLength = new FunctionParam("int", "maxLength", "maxLength") { Comments = "输入字符串最大长度" };
            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, Options, },
                new FunctionParam[] { value, Style, Options, },
                new FunctionParam[] { value, maxLength, Options, },
                new FunctionParam[] { value, maxLength, Style, Options, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 文本框",
                    Name = "Field",
                    Params = param,
                    ReturnType = "string",
                };
                chunk.Content = $"return GUILayout.TextField({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            return chunks;
        }

        [FuncParam(Group = "Scope Horizontal", IsArray = true)]
        private static List<FunctionChunk> Horizontal()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var width_float = new FunctionParam("float", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_float = new FunctionParam("float", "height", "GUILayout.Height(height)") { Comments = "高度" };
            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, Options, },
                new FunctionParam[] { value, width_float, },
                new FunctionParam[] { value, width_float, height_float },
                new FunctionParam[] { value, Style, Options, },
                new FunctionParam[] { value, Style, width_float, },
                new FunctionParam[] { value, Style, width_float, height_float },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 横排视图",
                    Name = "VHorizontal",
                    Params = param,
                    ReturnType = "void",
                };
                chunk.ContentBuilder.AppendLine("if (action == null) return;");
                chunk.ContentBuilder.AppendLine($"GUILayout.BeginHorizontal({chunk.GetParamValues()});");
                chunk.ContentBuilder.AppendLine("action();");
                chunk.ContentBuilder.AppendLine("GUILayout.EndHorizontal();");
                chunks.Add(chunk);
            }
            paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { width_float, },
                new FunctionParam[] { width_float, height_float, },
                new FunctionParam[] { Options, },
                new FunctionParam[] { Style, Options, },
                new FunctionParam[] { Style, width_float, },
                new FunctionParam[] { Style, width_float, height_float, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 横排视图",
                    Name = "BeginHorizontal",
                    Params = param,
                    ReturnType = "void",
                };
                chunk.Content = $"GUILayout.BeginHorizontal({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 横排视图",
                    Name = "EndHorizontal",
                    ReturnType = "void",
                    Content = "GUILayout.EndHorizontal();"
                };
                chunks.Add(chunk);
            }
            return chunks;
        }

        [FuncParam(Group = "Scope Vertical", IsArray = true)]
        private static List<FunctionChunk> Vertical()
        {
            var chunks = new List<FunctionChunk>();
            var width_float = new FunctionParam("float", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_float = new FunctionParam("float", "height", "GUILayout.Height(height)") { Comments = "高度" };
            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, Options, },
                new FunctionParam[] { value, width_float, },
                new FunctionParam[] { value, width_float, height_float },
                new FunctionParam[] { value, Style, Options, },
                new FunctionParam[] { value, Style, width_float, },
                new FunctionParam[] { value, Style, width_float, height_float },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 竖排视图",
                    Name = "Vertical",
                    Params = param,
                    ReturnType = "void",
                };
                chunk.ContentBuilder.AppendLine("if (action == null) return;");
                chunk.ContentBuilder.AppendLine($"GUILayout.BeginVertical({chunk.GetParamValues()});");
                chunk.ContentBuilder.AppendLine("action();");
                chunk.ContentBuilder.AppendLine("GUILayout.EndVertical();");
                chunks.Add(chunk);
            }
            paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { width_float, },
                new FunctionParam[] { width_float, height_float, },
                new FunctionParam[] { Options, },
                new FunctionParam[] { Style, Options, },
                new FunctionParam[] { Style, width_float, },
                new FunctionParam[] { Style, width_float, height_float, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 竖排视图",
                    Name = "BeginVertical",
                    Params = param,
                    ReturnType = "void",
                };
                chunk.Content = $"GUILayout.BeginVertical({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 竖排视图",
                    Name = "EndVertical",
                    ReturnType = "void",
                    Content = "GUILayout.EndVertical();"
                };
                chunks.Add(chunk);
            }
            return chunks;
        }

        [FuncParam(Group = "Scope ScrollView", IsArray = true)]
        private static List<FunctionChunk> ScrollView()
        {
            var chunks = new List<FunctionChunk>();
            var width_float = new FunctionParam("float", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_float = new FunctionParam("float", "height", "GUILayout.Height(height)") { Comments = "高度" };

            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var v2 = new FunctionParam("Vector2", "v2", "v2") { Comments = "视图在X和Y方向上滚动的像素距离" };
            var alwaysShowHorizontal = new FunctionParam("bool", "alwaysShowHorizontal") { Comments = "始终显示水平滚动条" };
            var alwaysShowVertical = new FunctionParam("bool", "alwaysShowVertical") { Comments = "始终显示垂直滚动条" };
            var styles_h = new FunctionParam("GUIStyle", "styles_h") { Comments = "水平滚动条风格" };
            var styles_v = new FunctionParam("GUIStyle", "styles_v") { Comments = "垂直滚动条风格" };
            var styles_b = new FunctionParam("GUIStyle", "styles_b") { Comments = "底板风格" };

            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, v2, Options, },
                new FunctionParam[] { value, v2, width_float, },
                new FunctionParam[] { value, v2, width_float, height_float },
                new FunctionParam[] { value, v2, Options, },
                new FunctionParam[] { value, v2, width_float, },
                new FunctionParam[] { value, v2, width_float, height_float },
                new FunctionParam[] { value, v2, alwaysShowHorizontal, alwaysShowVertical, Options, },
                new FunctionParam[] { value, v2, styles_h, styles_v, Options, },
                new FunctionParam[]
                { value, v2, alwaysShowHorizontal, alwaysShowVertical, styles_h, styles_v, styles_b, Options, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 滚动视图",
                    Name = "VScrollView",
                    Params = param,
                    ReturnType = "Vector2",
                };
                chunk.ContentBuilder.AppendLine("if (action == null) return v2;");
                chunk.ContentBuilder.AppendLine($"v2 = GUILayout.BeginScrollView({chunk.GetParamValues()});");
                chunk.ContentBuilder.AppendLine("action();");
                chunk.ContentBuilder.AppendLine("GUILayout.EndScrollView();");
                chunk.ContentBuilder.AppendLine("return v2;");
                chunks.Add(chunk);
            }
            paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { v2, Options, },
                new FunctionParam[] { v2, width_float, },
                new FunctionParam[] { v2, width_float, height_float },
                new FunctionParam[] { v2, Options, },
                new FunctionParam[] { v2, width_float, },
                new FunctionParam[] { v2, width_float, height_float },
                new FunctionParam[] { v2, alwaysShowHorizontal, alwaysShowVertical, Options, },
                new FunctionParam[] { v2, styles_h, styles_v, Options, },
                new FunctionParam[]
                { v2, alwaysShowHorizontal, alwaysShowVertical, styles_h, styles_v, styles_b, Options, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 滚动视图",
                    Name = "BeginScrollView",
                    Params = param,
                    ReturnType = "Vector2",
                };
                chunk.Content = $"return GUILayout.BeginScrollView({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 滚动视图",
                    Name = "EndScrollView",
                    ReturnType = "void",
                    Content = "GUILayout.EndScrollView();"
                };
                chunks.Add(chunk);
            }


            return chunks;
        }

        [FuncParam(Group = "Scope Scroll", IsArray = true)]
        private static List<FunctionChunk> Scroll()
        {
            var chunks = new List<FunctionChunk>();
            var width_float = new FunctionParam("float", "width", "GUILayout.Width(width)") { Comments = "宽度" };
            var height_float = new FunctionParam("float", "height", "GUILayout.Height(height)") { Comments = "高度" };

            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var v2 = new FunctionParam("Vector2", "v2", "v2") { Comments = "视图在X和Y方向上滚动的像素距离" };

            var viewRect = new FunctionParam("Rect", "viewRect") { Comments = "在滚动视图内部使用的矩形" };
            var rect = new FunctionParam("Rect", "rect") { Comments = "屏幕上用于滚动视图的矩形" };

            var styles_h = new FunctionParam("GUIStyle", "styles_h") { Comments = "水平滚动条风格" };
            var styles_v = new FunctionParam("GUIStyle", "styles_v") { Comments = "垂直滚动条风格" };

            var alwaysShowHorizontal = new FunctionParam("bool", "alwaysShowHorizontal") { Comments = "始终显示水平滚动条" };
            var alwaysShowVertical = new FunctionParam("bool", "alwaysShowVertical") { Comments = "始终显示垂直滚动条" };

            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, rect, v2, viewRect, },
                new FunctionParam[] { value, rect, v2, viewRect, alwaysShowHorizontal, alwaysShowVertical },
                new FunctionParam[] { value, rect, v2, viewRect, styles_h, styles_v },
                new FunctionParam[]
                { value, rect, v2, viewRect, alwaysShowHorizontal, alwaysShowVertical, styles_h, styles_v },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 滚动视图",
                    Name = "VScroll",
                    Params = param,
                    ReturnType = "Vector2",
                };
                chunk.ContentBuilder.AppendLine("if (action == null) return v2;");
                chunk.ContentBuilder.AppendLine($"v2 = GUI.BeginScrollView({chunk.GetParamValues()});");
                chunk.ContentBuilder.AppendLine("action();");
                chunk.ContentBuilder.AppendLine("GUI.EndScrollView();");
                chunk.ContentBuilder.AppendLine("return v2;");
                chunks.Add(chunk);
            }
            paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { rect, v2, viewRect, },
                new FunctionParam[] { rect, v2, viewRect, alwaysShowHorizontal, alwaysShowVertical },
                new FunctionParam[] { rect, v2, viewRect, styles_h, styles_v },
                new FunctionParam[] { rect, v2, viewRect, alwaysShowHorizontal, alwaysShowVertical, styles_h, styles_v },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 滚动视图",
                    Name = "BeginScroll",
                    Params = param,
                    ReturnType = "Vector2",
                };
                chunk.Content = $"return GUI.BeginScrollView({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 滚动视图",
                    Name = "EndScroll",
                    ReturnType = "void",
                    Content = "GUI.EndScrollView();"
                };
                chunks.Add(chunk);
            }


            return chunks;
        }

        [FuncParam(Group = "Scope Area", IsArray = true)]
        private static List<FunctionChunk> Area()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var rect = new FunctionParam("Rect", "rect", "rect") { Comments = "矩形" };


            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标题" };
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { value, rect, },
                    new FunctionParam[] { value, rect, label, },
                    new FunctionParam[] { value, rect, label, Style },
                    new FunctionParam[] { value, rect, Style },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 区域视图",
                        Name = "VArea",
                        Params = param,
                        ReturnType = "void",
                    };
                    chunk.ContentBuilder.AppendLine("if (action == null) return;");
                    chunk.ContentBuilder.AppendLine($"GUILayout.BeginArea({chunk.GetParamValues()});");
                    chunk.ContentBuilder.AppendLine("action();");
                    chunk.ContentBuilder.AppendLine("GUILayout.EndArea();");
                    chunks.Add(chunk);
                }
                paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { rect, },
                    new FunctionParam[] { rect, label, },
                    new FunctionParam[] { rect, label, Style },
                    new FunctionParam[] { rect, Style },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 区域视图",
                        Name = "BeginArea",
                        Params = param,
                        ReturnType = "void",
                    };
                    chunk.Content = $"GUILayout.BeginArea({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 区域视图",
                        Name = "EndArea",
                        ReturnType = "void",
                        Content = "GUILayout.EndArea();"
                    };
                    chunks.Add(chunk);
                }
            }

            return chunks;
        }

        [FuncParam(Group = "Scope Clip", IsArray = true)]
        private static List<FunctionChunk> Clip()
        {
            var chunks = new List<FunctionChunk>();
            var rect = new FunctionParam("Rect", "rect", "rect") { Comments = "矩形" };
            var scrollOffset = new FunctionParam("Vector2", "scrollOffset", "scrollOffset")
            {
                Comments = "滚动区域补偿"
            };
            var renderOffset = new FunctionParam("Vector2", "renderOffset", "renderOffset")
            {
                Comments = "显示区域补偿"
            };
            var rectOffset = new FunctionParam("Rect", "rectOffset", "rectOffset.position, rectOffset.size")
            {
                Comments = "区域补偿"
            };

            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var resetOffset = new FunctionParam("bool", "resetOffset") { Comments = "重置补偿" };
            var paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { value, rect, },
                new FunctionParam[] { value, rect, scrollOffset, renderOffset, resetOffset, },
                new FunctionParam[] { value, rect, rectOffset, resetOffset, },
            };

            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "绘制 裁剪视图",
                    Name = "VClip",
                    Params = param,
                    ReturnType = "void",
                };
                chunk.ContentBuilder.AppendLine("if (action == null) return;");
                chunk.ContentBuilder.AppendLine($"GUI.BeginClip({chunk.GetParamValues()});");
                chunk.ContentBuilder.AppendLine("action();");
                chunk.ContentBuilder.AppendLine("GUI.EndClip();");
                chunks.Add(chunk);
            }
            paramsList = new List<FunctionParam[]>()
            {
                new FunctionParam[] { rect, },
                new FunctionParam[] { rect, scrollOffset, renderOffset, resetOffset, },
                new FunctionParam[] { rect, rectOffset, resetOffset, },
            };
            foreach (var param in paramsList)
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "开始绘制 裁剪视图",
                    Name = "BeginClip",
                    Params = param,
                    ReturnType = "void",
                };
                chunk.Content = $"GUI.BeginClip({chunk.GetParamValues()});";
                chunks.Add(chunk);
            }
            {
                var chunk = new FunctionChunk
                {
                    State = TChunkState.Static,
                    Comments = "结束绘制 裁剪视图",
                    Name = "EndClip",
                    ReturnType = "void",
                    Content = "GUI.EndClip();"
                };
                chunks.Add(chunk);
            }
            return chunks;
        }

        [FuncParam(Group = "Scope Group", IsArray = true)]
        private static List<FunctionChunk> Group()
        {
            var chunks = new List<FunctionChunk>();
            var value = new FunctionParam("Action", "action", "") { Comments = "回调函数" };
            var rect = new FunctionParam("Rect", "rect", "rect") { Comments = "矩形" };

            foreach (var item in new string[] { "string", "GUIContent", "Texture" })
            {
                var label = new FunctionParam(item, "label", "label") { Comments = "标题" };
                var paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { value, rect, },
                    new FunctionParam[] { value, rect, label, },
                    new FunctionParam[] { value, rect, label, Style },
                    new FunctionParam[] { value, rect, Style },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 组视图",
                        Name = "VGroup",
                        Params = param,
                        ReturnType = "void",
                    };
                    chunk.ContentBuilder.AppendLine("if (action == null) return;");
                    chunk.ContentBuilder.AppendLine($"GUI.BeginGroup({chunk.GetParamValues()});");
                    chunk.ContentBuilder.AppendLine("action();");
                    chunk.ContentBuilder.AppendLine("GUI.EndGroup();");
                    chunks.Add(chunk);
                }
                paramsList = new List<FunctionParam[]>()
                {
                    new FunctionParam[] { rect, },
                    new FunctionParam[] { rect, label, },
                    new FunctionParam[] { rect, label, Style },
                    new FunctionParam[] { rect, Style },
                };
                foreach (var param in paramsList)
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 组视图",
                        Name = "BeginGroup",
                        Params = param,
                        ReturnType = "void",
                    };
                    chunk.Content = $"GUI.BeginGroup({chunk.GetParamValues()});";
                    chunks.Add(chunk);
                }
                {
                    var chunk = new FunctionChunk
                    {
                        State = TChunkState.Static,
                        Comments = "绘制 组视图",
                        Name = "EndGroup",
                        ReturnType = "void",
                        Content = "GUI.EndGroup();"
                    };
                    chunks.Add(chunk);
                }
            }

            return chunks;
        }
    }
#>
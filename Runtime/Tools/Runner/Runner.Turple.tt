<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# #>
using System;
using System.Threading;

namespace AIO
{
    partial class Runner
    {
        #region Turple Update
<#
    var genericTypes = string.Empty;
    var paramsStr = string.Empty;
    var actionParams = string.Empty;

    for (var i = 1; i <= 9; i++)
    {
        genericTypes = string.Concat(genericTypes, $", T{i}").TrimStart(',', ' ');
        paramsStr = string.Concat(paramsStr, $", T{i} param{i}").TrimStart(',', ' ');
        actionParams = string.Concat(actionParams, $", param{i}").TrimStart(',', ' ');
#>
       
        /// <summary>
        /// 在 Update 中执行
        /// </summary>
        public static void Update<<#= genericTypes #>>(Action<<#= genericTypes #>> action, <#= paramsStr #>)
        {
            if (action is null) throw new ArgumentNullException(nameof(action));
            lock (actionQueuesUpdateFunc)
            {
                actionQueuesUpdateFunc.Enqueue(new Action(Action));
                noActionQueueToExecuteUpdateFunc = false;
            }

            return;
            void Action() => action.Invoke(<#= actionParams #>);
        }

        /// <summary>
        /// 在 Update Fix 中执行
        /// </summary>
        public static void UpdateFix<<#= genericTypes #>>(Action<<#= genericTypes #>> action, <#= paramsStr #>)
        {
            if (action is null) throw new ArgumentNullException(nameof(action));
            lock (actionQueuesUpdateFunc)
            {
                actionQueuesFixedUpdateFunc.Enqueue(new Action(Action));
                noActionQueueToExecuteFixedUpdateFunc = false;
            }

            return;
            void Action() => action.Invoke(<#= actionParams #>);
        }

        /// <summary>
        /// 在 Update Fix 中执行
        /// </summary>
        public static void UpdateLate<<#= genericTypes #>>(Action<<#= genericTypes #>> action, <#= paramsStr #>)
        {
            if (action is null) throw new ArgumentNullException(nameof(action));
            lock (actionQueuesUpdateFunc)
            {
                actionQueuesLateUpdateFunc.Enqueue(new Action(Action));
                noActionQueueToExecuteLateUpdateFunc = false;
            }

            return;
            void Action() => action.Invoke(<#= actionParams #>);
        }
<#
    }
#>
        #endregion

        #region Turple Update Fix
        #endregion
    }
}

<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
    var summary = "/// <summary>\n        /// {0}\n        /// </summary>";
    
    var number = 9;
    var summaryParams = string.Format(summary, $"Starts a coroutine on the main thread.");
#>
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace AIO
{
    partial class Runner
    {
<#
    for (int i = 0; i <= number; i++)
    {
        var T = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x + 1}"));
        if (i >= 1) T = $"<{T}>";
        var parameters = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x + 1} t{x + 1}"));
        var arguments = string.Join(", ", Enumerable.Range(0, i).Select(x => $"t{x + 1}"));
#>     
        <#= summaryParams #>
<#
        for (var j = 1; j <= i ; j++)
        {
#>
        /// <typeparam name="T<#= j #>">The type of the <#= j #>th parameter.</typeparam>
<#
    }
#>
        /// <param name="action">The coroutine to start.</param>
        public static void StartCoroutine<#= T #>(Action<#= T #> action<#= string.Concat((i > 0 ? ", " : "" ), parameters)#>) { SafeStartCoroutine(ActionAsync.Create(action<#= string.Concat((i > 0 ? ", " : "" ), arguments)#>)); }
<#
    }
#>

        #region IEnumerator
<#
    for (int i = 0; i <= number; i++)
    {
        var T = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x + 1}"));
        var parameters = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x + 1} t{x + 1}"));
        var arguments = string.Join(", ", Enumerable.Range(0, i).Select(x => $"t{x + 1}"));
#>     
        <#=summaryParams#>
<#
        for (var j = 1; j <= i ; j++)
        {
#>
        /// <typeparam name="T<#= j #>">The type of the <#= j #>th parameter.</typeparam>
<#
        }
#>
        /// <param name="func">The function to be invoked.</param>
        public static void StartCoroutine<#= i >= 1 ? $"<{T}>" : "" #>(Func<<#= T + (i > 0 ? ", " : "") #>IEnumerator> func<#= string.Concat((i > 0 ? ", " : "" ), parameters)#>) { SafeStartCoroutine(func.Invoke(<#= arguments #>)); }
<#
    }
#>

        #endregion
    }
}
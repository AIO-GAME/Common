<#@ template language="C#" debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
    var summary = "/// <summary>\n        /// {0}\n        /// </summary>";
    
    var number = 3;
    var actionName = "PushUpdate";

    var c1 = "QueuesDelegateUpdate";
    var c2 = "QueuesDelegateUpdateState";
    var summaryParams = string.Format(summary, $"Pushes the specified update action to the update queue.");
#>
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace AIO
{
    partial class Runner
    {
        #region Delegation

        <#=summaryParams#>
        public static void <#=actionName#>(Delegate[] agrs)
        {
            switch (agrs.Length)
            {
                case 0: return;
                case 1:
                    <#=actionName#>(agrs[0]);
                    return;
                default:
                    <#=c1#>.Enqueue(Delegate.Combine(agrs));
                    <#=c2#> = false;
                    break;
            }
        }

        <#=summaryParams#>
        public static void <#=actionName#>(Delegate agr)
        {
            if (agr is null) throw new ArgumentNullException(nameof(agr));
            <#=c1#>.Enqueue(agr);
            <#=c2#> = false;
        }
<#
    for (var i = 2; i <= number; i++)
    {
        var types = string.Join(", ", Enumerable.Range(1, i).Select(x => $"Delegate agr{x}"));
        var @params = string.Join(", ", Enumerable.Range(1, i).Select(x => $"agr{x}"));
#>

        <#=summaryParams#>
        public static void <#=actionName#>(<#= types #>)
        {
<#
        for (var j = 1; j <= i; j++)
        {
#>
            Debug.Assert(agr<#= j #> != null, nameof(agr<#= j #>));
<#
        }
#>
            <#=c1#>.Enqueue(Delegate.Combine(<#= @params #>));
            <#=c2#> = false;
        }
<#
    }
#>

        #endregion

        #region Action

        <#=summaryParams#>
        public static void <#=actionName#>(Action arg)
        {
            if (arg is null) throw new ArgumentNullException(nameof(arg));
            <#=c1#>.Enqueue(arg);
            <#=c2#> = false;
        }

        <#=summaryParams#>
        public static void <#=actionName#>(ICollection<Action> args)
        {
            if (args is null) throw new ArgumentNullException(nameof(args));
            if (args.Count == 0) return;
            foreach (var arg in args) <#=c1#>.Enqueue(arg);
            <#=c2#> = false;
        }
<#
    for (var i = 2; i <= number; i++)
    {
        var actionTypes = string.Join(", ", Enumerable.Range(1, i).Select(x => $"Action agr{x}"));
        var actionParams = string.Join(", ", Enumerable.Range(1, i).Select(x => $"agr{x}"));
#>

        <#=summaryParams#>
        public static void <#=actionName#>(<#= actionTypes #>)
        {
<#
        for (var j = 1; j <= i; j++)
        {
#>
            Debug.Assert(agr<#= j #> != null, nameof(agr<#= j #>));
<#
        }
#>
            <#=c1#>.Enqueue(Delegate.Combine(<#= actionParams #>));
            <#=c2#> = false;
        }
<#
    }
#>

        #endregion
 
        #region Generic
<#
    for (var i = 1; i <= 9; i++)
    {
        var  genericTypes = string.Join(", ", Enumerable.Range(1, i).Select(x => $"T{x}"));
        var  paramsStr = string.Join(", ", Enumerable.Range(1, i).Select(x => $"T{x} param{x}"));
        var  actionParams = string.Join(", ", Enumerable.Range(1, i).Select(x => $"param{x}"));
#>

        <#=summaryParams#>
        public static void <#=actionName#><<#= genericTypes #>>(Action<<#= genericTypes #>> action, <#= paramsStr #>)
        {
            if (action is null) throw new ArgumentNullException(nameof(action));
            <#=c1#>.Enqueue(new Action(Delegate));
            <#=c2#> = false;
            return;
            void Delegate() => action.Invoke(<#= actionParams #>);
        }
<#
    }
#>
        #endregion

        #region IEnumerator
<#
    for (int i = 0; i <= number; i++)
    {
        var T = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x + 1}"));
        var parameters = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x + 1} t{x + 1}"));
        var arguments = string.Join(", ", Enumerable.Range(0, i).Select(x => $"t{x + 1}"));
#>     
        <#=summaryParams#>
<#
        for (var j = 1; j <= i ; j++)
        {
#>
        /// <typeparam name="T<#= j #>">The type of the <#= j #>th parameter.</typeparam>
<#
        }
#>
        /// <param name="func">The function to be invoked.</param>
        public static void <#= actionName #><#= i >= 1 ? $"<{T}>" : "" #>(Func<<#= T + (i > 0 ? ", " : "") #>IEnumerator> func<#= string.Concat((i > 0 ? ", " : "" ), parameters)#>) { QueuesCoroutine.TryAdd(func.Invoke(<#= arguments #>), CoroutineData.Create()); }
<#
    }
#>

        #endregion
    }
}
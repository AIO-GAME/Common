<#@ template language="C#" linePragmas="true" visibility="public"#>
<#@ output extension=".cs" encoding="utf-8" #>
<#
    var types = new[]
    {
        "MD5",
        "SHA1",
        "SHA256",
        "SHA384",
        "SHA512"
    };
#>

using System;
using System.Buffers;
using System.IO;
using System.Security.Cryptography;
using System.Threading;
using System.Threading.Tasks;

namespace AIO
{
    partial class StreamExtend
    {    
<#
    foreach (var type in types)
    {
#>
        #region <#= type #>

        /// <summary>
        ///     获取 <#= type #>
        /// </summary>
        /// <param name="stream">流数据</param>
        /// <param name="bufferSize">容器大小</param>
        /// <returns><#= type #> value</returns>
        /// <remarks>
        /// 通过HashAlgorithm的TransformBlock方法对流进行叠加运算获得<#= type #>
        /// 实现稍微复杂，但可使用与传输文件或接收文件时同步计算<#= type #>值
        /// 可自定义缓冲区大小，计算速度较快
        /// </remarks>
        public static string Get<#= type #>(this Stream stream, int bufferSize = BUFFER_SIZE)
        {
            var buffer = ArrayPool<byte>.Shared.Rent(bufferSize);
            var output = ArrayPool<byte>.Shared.Rent(bufferSize);
            int length;

            using var crypt = new <#= type #>CryptoServiceProvider();
            while ((length = stream.Read(buffer, 0, buffer.Length)) > 0)
                crypt.TransformBlock(buffer, 0, length, output, 0);
       
            crypt.TransformFinalBlock(buffer, 0, 0); //完成最后计算，必须调用(由于上一部循环已经完成所有运算，所以调用此方法时后面的两个参数都为0)
            ArrayPool<byte>.Shared.Return(output, true);
            ArrayPool<byte>.Shared.Return(buffer, true);
            return BitConverter.ToString(crypt.Hash).Replace("-", "").ToLower();
        }

        /// <summary>
        ///     获取<#= type #>
        /// </summary>
        /// <param name="stream">流数据</param>
        /// <param name="bufferSize">容器大小</param>
        /// <param name="cancellationToken">取消令牌</param>
        /// <remarks>
        /// 通过HashAlgorithm的TransformBlock方法对流进行叠加运算获得<#= type #>
        /// 实现稍微复杂，但可使用与传输文件或接收文件时同步计算<#= type #>值
        /// 可自定义缓冲区大小，计算速度较快
        /// </remarks>
        /// <returns><#= type #></returns>
        public static async Task<string> Get<#= type #>Async(
            this Stream       stream,
            int               bufferSize        = BUFFER_SIZE,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            if (!stream.CanRead) throw new NotSupportedException("流不支持读取操作");
            if (cancellationToken == default(CancellationToken)) cancellationToken = CancellationToken.None;

            var buffer = ArrayPool<byte>.Shared.Rent(bufferSize);
            var output = ArrayPool<byte>.Shared.Rent(bufferSize);
            int length;

            using var crypt = new <#= type #>CryptoServiceProvider();
            while ((length = await stream.ReadAsync(buffer, 0, buffer.Length, cancellationToken)) > 0)
                crypt.TransformBlock(buffer, 0, length, output, 0);

            crypt.TransformFinalBlock(buffer, 0, 0); //完成最后计算，必须调用(由于上一部循环已经完成所有运算，所以调用此方法时后面的两个参数都为0)
            ArrayPool<byte>.Shared.Return(output, true);
            ArrayPool<byte>.Shared.Return(buffer, true);
            return BitConverter.ToString(crypt.Hash).Replace("-", "").ToLower();
        }

        /// <summary>
        /// 计算文件的sha256 摘要值
        /// </summary>
        /// <param name="stream">数据流</param>
        /// <param name="bufferSize">容器大小</param>
        /// <returns>sha256摘要字符串</returns>
        public static string Get<#= type #>Digest(this Stream stream, int bufferSize = BUFFER_SIZE)
        {
            using var fs  = new BufferedStream(stream, BUFFER_SIZE);
            using var sha = <#= type #>.Create();
            return BitConverter.ToString(sha.ComputeHash(fs)).Replace("-", string.Empty);
        }

        #endregion

<#
    }
#>
    }
}
<#@ template language="C#" debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
    var number = 9;
#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace AIO
{
<#
    for (var i = 0; i <= number; i++)
    {
        var T = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x + 1}"));
        if (i >= 1) T = $"<{T}>";
        var parameters = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x + 1} t{x + 1}"));
        var arguments = string.Join(", ", Enumerable.Range(0, i).Select(x => $"t{x + 1}"));
#>
    #region ActionAsync<#= T #>

    /// <summary>
    /// Action to enumerator or async task.
    /// </summary>
    public<#=i == 0 ? " partial" : ""#> class ActionAsync<#= T #> : IEnumerator, IDisposable
    {
        private Action<#= T #> action;
<#
        for (var j = 1; j <= i ; j++)
        {
#>
        private readonly T<#= j #> t<#= j #>;
<#
        }
#>
        
        /// <inheritdoc />
        internal ActionAsync(Action<#= T #> action<#= string.Concat((i > 0 ? ", " : "" ), parameters)#>)
        {
            this.action = action;
<#
        for (var j = 1; j <= i ; j++)
        {
#>
            this.t<#= j #> = t<#= j #>;
<#
        }
#>
        }

        /// <inheritdoc />
        public bool MoveNext()
        {
            action?.Invoke(<#=arguments#>);
            return false;
        }

        /// <inheritdoc />
        public void Reset() { }

        /// <inheritdoc />
        public object Current => null;

        /// <inheritdoc />
        public void Dispose() => action = null;

        /// <summary>
        /// Get the awaiter.
        /// </summary>
        public TaskAwaiter GetAwaiter() => Task.Factory.StartNew(() => { action?.Invoke(<#=arguments#>); }).GetAwaiter();
    }

    #endregion

<#
    }
#>
    partial class ActionAsync
    {
<#
    for (var i = 0; i <= number; i++)
    {
        var T = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x + 1}"));
        if (i >= 1) T = $"<{T}>";
        var parameters = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x + 1} t{x + 1}"));
        var arguments = string.Join(", ", Enumerable.Range(0, i).Select(x => $"t{x + 1}"));
#>

        /// <summary>
        /// Create a new instance of the <see cref="ActionAsync<#= T.Replace('<','{').Replace('>','}') #>"/> class.
        /// </summary>
<#
        for (var j = 1; j <= i ; j++)
        {
#>
        /// <typeparam name="T<#= j #>">The type of the <#= j #>th parameter.</typeparam>
<#
    }
#>
        /// <param name="action">The action to invoke.</param>
        /// <returns>A new instance of the <see cref="ActionAsync{T}"/> class.</returns>
        public static ActionAsync<#= T #> Create<#= T #>(Action<#= T #> action<#= string.Concat((i > 0 ? ", " : "" ), parameters)#>) => new ActionAsync<#= T #>(action<#= string.Concat((i > 0 ? ", " : "" ), arguments)#>);
<#
    }
#>
    }
}
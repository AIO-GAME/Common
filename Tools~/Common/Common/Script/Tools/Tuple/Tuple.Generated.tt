<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>


<#@ output extension=".cs" #>

<#
    var maxcount = 8;
#>

using System;
using System.Runtime.CompilerServices;

public static class ATuple
{

<#
    for (var i = 2; i < maxcount; i++)
    {
        var index = i + 1;
        var types = string.Join(", ", Enumerable.Range(1, index).Select(x => string.Concat("T", x)));
        var createArgs = string.Join(", ", Enumerable.Range(1, index).Select(x => string.Concat("T", x, " item", x)));
        var createContent = string.Join(", ", Enumerable.Range(1, index).Select(x => string.Concat("item", x)));
        var unpackArgs = string.Join(", ", Enumerable.Range(1, index).Select(x => string.Concat("out T", x, " ref", x)));
        var unpackContent = string.Join("\n", Enumerable.Range(1, index).Select(x => string.Concat("        ref", x, " = tuple.Item", x, ";")));
#>
	#region Tuple<<#= types #>>

    public static ATuple<<#= types #>> Create<<#= types #>>(<#= createArgs #>)
    {
        return new ATuple<<#= types #>>(<#= createContent #>);
    }

    public static void Unpack<<#= types #>>(this ATuple<<#= types #>> tuple, <#= unpackArgs #>)
    {
<#= unpackContent #>
    }

	#endregion

<#
    }
#>
}

<#
    for (var i = 2; i < maxcount; i++)
    {
        var index = i + 1;
        var types = string.Join(", ", Enumerable.Range(1, index).Select(x => string.Concat("T", x)));
        var args = string.Join(", ", Enumerable.Range(1, index).Select(x => string.Concat("T", x, " item", x)));
        var toStringContent = string.Join(", ", Enumerable.Range(1, index).Select(x => string.Concat("{Item", x, "}")));
        var itemProperty = string.Join("\n", Enumerable.Range(1, index).Select(x => string.Concat("    public T", x, " Item", x, " { get; }\n")));
        var itemContent = string.Join(", ", Enumerable.Range(1, index).Select(x => string.Concat("Item", x)));
        var constructorContent = string.Join("\n", Enumerable.Range(1, index).Select(x => string.Concat("        Item", x, " = item", x, ";")));
#>
public sealed class ATuple<<#= types #>> : IComparable
{

	/// <summary>
	/// The number of items in the tuple.
	/// </summary>
	public int Length => <#= i #>;

<#= itemProperty.TrimEnd('\n') #>

	/// <summary>
	/// Initializes a new instance of the <see cref="Tuple&lt;<#= types #>>"/> class.
	/// </summary>
	public ATuple(<#= args #>)
    {
<#= constructorContent #>
    }

    public object this[int index]
    {
        get
        {
            switch (index)
            {
<#
        for (var j = 1; j <= i; j++)
        {
#>
				case <#= j-1 #>: return Item<#= j #>;
<#
        }
#>
                default: throw new IndexOutOfRangeException();
            }
        }
    }

	public override string ToString()
	{
		return $"Tuple(<#= toStringContent #>)";
	}

	public override bool Equals(object o)
	{
		if (!(o is Tuple<<#= types #>>))
		{
			return false;
		}
		var tuple = (Tuple<<#= types #>>)o;
		return this == tuple;
	}

	public bool Equals(Tuple<<#= types #>> other)
	{
		return this == other;
	}

    public int CompareTo(object obj)
    {
        if (obj is ATuple<<#= types #>> tuple && tuple == this) return 0;
        return 1;
    }

	public override int GetHashCode()
	{
		const int num0 = 17 * 23;
<#
        for (var j = 1; j <= i; j++)
        {
#>
		var num<#= j #> = (num<#= j - 1 #> + (Item<#= j #> != null ? Item1.GetHashCode() : 0))<#= j == i ? "" : " * 23" #>;
<#
        }
#>
		return num<#= i #>;
	}

	public static bool operator ==(ATuple<<#= types #>> a, Tuple<<#= types #>> b)
    {
        if ((object)a == null) return (object)b == null;
        if ((object)b == null) return false;
<#
        for (var j = 1; j <= i; j++)
        {
#>
   		if (a.Item<#= j #> == null && b.Item<#= j #> != null) return false;
        if (a.Item<#= j #> != null && !a.Item<#= j #>.Equals(b.Item<#= j #>)) return false;
<#
        }
#>
        return true;
    }

	public static bool operator !=(ATuple<<#= types #>> a, Tuple<<#= types #>> b)
    {
        return !(a == b);
    }

	public static bool operator ==(ATuple<<#= types #>> a, ATuple<<#= types #>> b)
    {
        if ((object)a == null) return (object)b == null;
        if ((object)b == null) return false;
<#
        for (var j = 1; j <= i; j++)
        {
#>
   		if (a.Item<#= j #> == null && b.Item<#= j #> != null) return false;
        if (a.Item<#= j #> != null && !a.Item<#= j #>.Equals(b.Item<#= j #>)) return false;
<#
        }
#>
        return true;
    }

	public static bool operator !=(ATuple<<#= types #>> a, ATuple<<#= types #>> b)
    {
        return !(a == b);
    }

	public void Unpack(Action<<#= types #>> unpackerDelegate)
	{
		unpackerDelegate(<#= itemContent #>);
	}
}

<#
    }
#>
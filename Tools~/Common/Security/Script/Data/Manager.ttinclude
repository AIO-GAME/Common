<#@ assembly name="mscorlib"
#><#@ assembly name="System.Core"
#><#@ assembly name="EnvDTE" 
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Collections.Generic" 
#><#@ import namespace="System.Linq" 
#><#@ import namespace="System.Text"
#><#@ import namespace="EnvDTE" 
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#+
    //JetBrains.EnvDTE.Client
    //JetBrains.EnvDTE.Host

    public class Manager
    {
        private struct Block
        {
            public string Name;
            public string FolderName;
            public int Start, Length;
        }

        private readonly List<Block> blocks = new();
        private Block currentBlock;
        private Block footerBlock;
        private Block headerBlock;
        private readonly VSManagementStrategy strategy;
        private readonly StringBuilder template;
        public string OutputPath { get; set; }

        /// <param name="host"> Host object </param>
        /// <param name="template"> Template content </param>
        /// <param name="executingProjectName"> Name of the project that is executing the template </param>
        public Manager(ITextTemplatingEngineHost host, StringBuilder template, string executingProjectName)
        {
            this.template = template;
            OutputPath = string.Empty;
            strategy = new VSManagementStrategy(host, executingProjectName);
        }

        public void StartBlock(string name)
        {
            currentBlock = new Block
            {
                Name = name,
                Start = template.Length
            };
        }

        public void StartBlock(string name, string folderName)
        {
            currentBlock = new Block
            {
                Name = name,
                FolderName = folderName,
                Start = template.Length
            };
        }

        public void StartFooter() { footerBlock.Start = template.Length; }
        public void EndFooter() { footerBlock.Length = template.Length - footerBlock.Start; }
        public void StartHeader() { headerBlock.Start = template.Length; }
        public void EndHeader() { headerBlock.Length = template.Length - headerBlock.Start; }

        public void EndBlock()
        {
            currentBlock.Length = template.Length - currentBlock.Start;
            blocks.Add(currentBlock);
        }

        public void Process()
        {
            var header = template.ToString(headerBlock.Start, headerBlock.Length);
            var footer = template.ToString(footerBlock.Start, footerBlock.Length);
            blocks.Reverse();

            foreach (var block in blocks)
            {
                var fileName = Path.Combine(OutputPath, block.Name);
                var content = string.Concat(header, template.ToString(block.Start, block.Length), footer);

                if (string.IsNullOrWhiteSpace(block.FolderName))
                    strategy.CreateFile(OutputPath, block.Name, content);
                else
                    strategy.CreateFile(OutputPath, block.Name, block.FolderName, content);

                template.Remove(block.Start, block.Length);
            }
        }

        private class VSManagementStrategy
        {
            private EnvDTE.Project project;
            private EnvDTE.ProjectItem templateProjectItem;
            private EnvDTE.DTE _dte;
            private ITextTemplatingEngineHost _host;

            internal VSManagementStrategy(ITextTemplatingEngineHost host, string executingProjectName)
            {
                var provider = (IServiceProvider)host;
                if (provider == null) throw new ArgumentNullException(nameof(host), "Could not obtain host ServiceProvider");
                var service = provider.GetService(typeof(EnvDTE.DTE)); // 获取当前活动的DTE对象 
                _dte = (EnvDTE.DTE)service ?? throw new ArgumentNullException(nameof(_dte), "Could not obtain DTE from host");
                templateProjectItem = _dte.Solution.FindProjectItem(host.TemplateFile);
                _host = host;

                var projects = _dte.Solution.Projects;
                foreach (var proj in projects.Cast<EnvDTE.Project>().Where(proj => proj.Name == executingProjectName))
                {
                    project = proj;
                    break;
                }
            }

            internal void CreateFile(string outputPath, string fileName, string content)
            {
                var path = Path.Combine(outputPath, fileName);
                Console.WriteLine($"Creating file at path: {path}");
                File.WriteAllText(path, content);
                project.ProjectItems.AddFromFile(path);
            }

            internal void CreateFile(string outputPath, string fileName, string folderName, string content)
            {
                var projItems = project.ProjectItems;
                ProjectItem folder = null;
                var folderExists = false;
                foreach (var projItem in projItems.Cast<ProjectItem>().Where(projItem => projItem.Name == folderName))
                {
                    folderExists = true;
                    folder = projItem;
                    break;
                }

                if (!folderExists) folder = projItems.AddFolder(folderName);

                var templateDirectory = Path.GetDirectoryName(_host.TemplateFile);
                if (string.IsNullOrEmpty(templateDirectory))
                {
                    Console.WriteLine($"Template directory is null or empty -> [{_host.TemplateFile}]");
                    return;
                }
                var directoryPath = Path.Combine(templateDirectory, folder.Name);
                var filePath = Path.Combine(directoryPath, fileName);
                var fullPath = Path.Combine(directoryPath, fileName);
                File.WriteAllText(fullPath, content);
                Console.WriteLine($"Creating file at path: {fullPath}");
                folder.ProjectItems.AddFromFile(filePath);
            }
        }
    }
#>
<#@ template language="C#" linePragmas="true" visibility="public"#>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    /* @formatter:off */
            var NUMBER = new List<Tuple<string, string>>
            {
                new("NInt", "int"),
                new("NLong", "long"),
                new("NShort", "short"),
                new("NUInt", "uint"),
                new("NULong", "ulong"),
                new("NUShort", "ushort"),
                new("NBool", "bool"),
                new("NByte", "byte"),
                new("NChar", "char"),
                new("NSByte", "sbyte"),
                new("NString", "string"),
                new("NFloat", "float"),
                new("NDouble", "double"),
                new("NDecimal", "decimal"),
            };
            var ToStringEX = new List<string>
            {
                "NInt",
                "NULong",
                "NLong",
                "NUInt",
                "NUShort",
                "NShort",
                "NByte",
                "NSByte",
                "NFloat",
                "NDouble",
                "NDecimal"
            };
#>
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Threading;
using System.Threading.Tasks;
using System.Globalization;

namespace AIO.Security
{
<#
            foreach (var pair in NUMBER)
            {
#>
    #region <#= pair.Item1 #>

    partial struct <#= pair.Item1 #>
    { 
        /// <inheritdoc/>
        public override bool Equals(object obj) => obj switch
        {
            <#= pair.Item1 #> a => Value.Equals(a.Value),
            <#= pair.Item2 #> b  => Value.Equals(b),
            _       => false
        };

        /// <inheritdoc/>
        public override int GetHashCode() => Value.GetHashCode();

        /// <inheritdoc/>
        public override string ToString() => Value.ToString(CultureInfo.CurrentCulture);

        /// <param name="provider"> 格式化提供者 </param>
        /// <typeparam name="T"> 格式化提供者类型 </typeparam>
        /// <returns> <see cref="string"/> </returns>
        public string ToString<T>(T provider) where T : IFormatProvider => Value.ToString(provider);
<#
                if (ToStringEX.Contains(pair.Item1))
                {
#>

        /// <param name="format"> 格式化字符串 </param>
        /// <returns> <see cref="string"/> </returns>
        public string ToString(string format) => Value.ToString(format, CultureInfo.CurrentCulture);

        /// <param name="format"> 格式化字符串 </param>
        /// <param name="provider"> 格式化提供者 </param>
        /// <typeparam name="T"> 格式化提供者类型 </typeparam>
        /// <returns> <see cref="string"/> </returns>
        public string ToString<T>(string format, T provider) where T : IFormatProvider => Value.ToString(format, provider);
<#
            }
#>

    }

    #endregion

<#
            }
#>
}
// <auto-generated> This code was generated by a tool. </auto-generated>
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

using System;

namespace AIO.Security
{
    partial struct NFloat
    { 
        /// <param name="a"> <see cref="NFloat"/> </param>
        /// <param name="b"> <see cref="NFloat"/> </param>
        public static bool operator ==(NFloat a, NFloat b) => Math.Abs(a.Value - b.Value) <= float.Epsilon;

        /// <param name="a"> <see cref="NFloat"/> </param>
        /// <param name="b"> <see cref="float"/> </param>
        public static bool operator ==(NFloat a, float b) => Math.Abs(a.Value - b) <= float.Epsilon;

        /// <param name="a"> <see cref="NFloat"/> </param>
        /// <param name="b"> <see cref="NFloat"/> </param>
        public static bool operator !=(NFloat a, NFloat b) => Math.Abs(a.Value - b.Value) > float.Epsilon;

        /// <param name="a"> <see cref="NFloat"/> </param>
        /// <param name="b"> <see cref="float"/> </param>
        public static bool operator !=(NFloat a, float b) => Math.Abs(a.Value - b) > float.Epsilon;
        /// <param name="a"> <see cref="NFloat"/> </param>
        public static NFloat operator --(NFloat a)
        {
            a.Value--;
            return a;
        }

        /// <param name="a"> <see cref="NFloat"/> </param>
        public static NFloat operator ++(NFloat a)
        {
            a.Value++;
            return a;
        }

        /// <param name="a"> <see cref="NFloat"/> </param>
        /// <param name="b"> <see cref="NFloat"/> </param>
        public static NFloat operator +(NFloat a, NFloat b) => new NFloat(a.Value + b.Value);

        /// <param name="a"> <see cref="NFloat"/> </param>
        /// <param name="b"> <see cref="float"/> </param>
        public static NFloat operator +(NFloat a, float b) => new NFloat(a.Value + b);

        /// <param name="a"> <see cref="NFloat"/> </param>
        /// <param name="b"> <see cref="NFloat"/> </param>
        public static NFloat operator -(NFloat a, NFloat b) => new NFloat(a.Value - b.Value);

        /// <param name="a"> <see cref="NFloat"/> </param>
        /// <param name="b"> <see cref="float"/> </param>
        public static NFloat operator -(NFloat a, float b) => new NFloat(a.Value - b);
    }
}

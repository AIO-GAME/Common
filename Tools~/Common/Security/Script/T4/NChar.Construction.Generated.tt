<#@ template language="C#" visibility="public" hostspecific="True"
#><#@ assembly name="System.Core"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Linq"
#><#@ include file="Manager.ttinclude"
#><#
    var NUMBER = new[]
    {
        "bool",
        "sbyte",
        "short",
        "int",
        "long",
        "byte",
        "ushort",
        "uint",
        "ulong",
        "char",
        "string",
        "float",
        "double",
        "decimal"
    };
        
    var projectDirectory = Path.GetDirectoryName(Host.TemplateFile);
    var projectFilePath = string.Empty;
    while (!string.IsNullOrEmpty(projectDirectory))
    {
        projectFilePath = Directory.GetFiles(projectDirectory, "*.csproj").FirstOrDefault();
        if (projectFilePath != null) break;
        projectDirectory = Directory.GetParent(projectDirectory)?.FullName;
    }
    
    var manager = new Manager(Host, GenerationEnvironment, "Security");
    manager.OutputPath = Path.Combine(projectDirectory, "Script", "Data");
    manager.StartBlockTemplateName($"NChar.Construction.cs", $"NChar.cs");
#>
// <auto-generated> This code was generated by a tool. </auto-generated>
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Runtime.InteropServices;

namespace AIO.Security
{
    partial struct NChar
    {
<#
    foreach (var item in NUMBER)
    {
#>
        #region <#= item #>

        /// <param name="value"> <see cref="<#= item #>"/> </param>
        public NChar(<#= item #> value = default)
        {
            _value    = 0;
            _offset   = 0;
            _oldValue = ' ';
            try
            {
                Value = Convert.ToChar(value);
            }
            catch
            {
                Console.WriteLine($"无法将{value}变为{Value.GetType()},已改为{char.MinValue}");
                Value = char.MinValue;
            }
        }

        #endregion

<#
    }
#>
    }
}
<#
    manager.EndBlock();
    manager.Process();
#>
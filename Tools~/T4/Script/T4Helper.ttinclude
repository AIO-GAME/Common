// https://damieng.com/blog/2009/11/06/multiple-outputs-from-t4-made-easy-revisited/

<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data.Linq"#>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="System.Xml"#> 
<#@ assembly name="System.Xml.Linq"#>

<#@ import namespace="System"#>  
<#@ import namespace="System.CodeDom"#>  
<#@ import namespace="System.CodeDom.Compiler"#>  
<#@ import namespace="System.Collections.Generic"#>  
<#@ import namespace="System.Data.Linq"#>  
<#@ import namespace="System.Data.Linq.Mapping"#>  
<#@ import namespace="System.IO"#>  
<#@ import namespace="System.Linq"#>  
<#@ import namespace="System.Reflection"#>  
<#@ import namespace="System.Text"#>  
<#@ import namespace="System.Xml.Linq"#>  
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>  
<#+
// T4Helper class records the various blocks so it can split them up  
    public class T4Helper
    {
        private class Block
        {
            public Encoding Encoding;
            public string Name;
            public int Start, Length;
        }

        private Block currentBlock;
        private List<Block> files = new List<Block>();
        private Block footer = new Block();
        private Block header = new Block();
        private ITextTemplatingEngineHost host;
        private StringBuilder template;
        protected List<string> generatedFileNames = new List<string>();

        public static T4Helper Create(ITextTemplatingEngineHost host, StringBuilder template)
        {
            if (host is IServiceProvider)
            {
                var dte = ((IServiceProvider)host).GetService(typeof(EnvDTE.DTE));
                if (dte != null) return new VSManager(host, template);
            }
            return new T4Helper(host, template);

            return (host is IServiceProvider) ? new VSManager(host, template) : new T4Helper(host, template);
        }

        public void StartNewFile(string name)
        {
            if (name == null)
                throw new ArgumentNullException(nameof(name));
            CurrentBlock = new Block { Name = name, Encoding = Encoding.UTF8 };
        }

        public void StartNewFile(string name, Encoding encoding)
        {
            if (name == null)
                throw new ArgumentNullException(nameof(name));
            CurrentBlock = new Block { Name = name, Encoding = encoding };
        }

        public void StartFooter()
        {
            CurrentBlock = footer;
        }

        public void StartHeader()
        {
            CurrentBlock = header;
        }

        public void EndBlock()
        {
            if (CurrentBlock == null)
                return;
            CurrentBlock.Length = template.Length - CurrentBlock.Start;
            if (CurrentBlock != header && CurrentBlock != footer)
                files.Add(CurrentBlock);
            currentBlock = null;
        }

        public virtual void Process(bool split)
        {
            if (split)
            {
                EndBlock();
                var headerText = template.ToString(header.Start, header.Length);
                var footerText = template.ToString(footer.Start, footer.Length);
                var outputPath = Path.GetDirectoryName(host.TemplateFile);
                files.Reverse();
                foreach (var block in files)
                {
                    var fileName = Path.Combine(outputPath, block.Name);
                    var content = headerText + template.ToString(block.Start, block.Length) + footerText;
                    generatedFileNames.Add(fileName);
                    CreateFile(fileName, content, block.Encoding);
                    template.Remove(block.Start, block.Length);
                }
            }
        }

        protected virtual void CreateFile(string fileName, string content, Encoding encoding)
        {
            if (IsFileContentDifferent(fileName, content))
                File.WriteAllText(fileName, content, encoding);
        }

        public virtual string GetCustomToolNamespace(string fileName)
        {
            return null;
        }

        public virtual string DefaultProjectNamespace
        {
            get { return null; }
        }

        protected bool IsFileContentDifferent(string fileName, string newContent)
        {
            return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
        }

        private T4Helper(ITextTemplatingEngineHost host, StringBuilder template)
        {
            this.host = host;
            this.template = template;
        }

        private Block CurrentBlock
        {
            get { return currentBlock; }
            set
            {
                if (CurrentBlock != null)
                    EndBlock();
                if (value != null)
                    value.Start = template.Length;
                currentBlock = value;
            }
        }

        private class VSManager : T4Helper
        {
            private EnvDTE.ProjectItem templateProjectItem;
            private EnvDTE.DTE dte;
            private Action<string> checkOutAction;
            private Action<IEnumerable<string>> projectSyncAction;

            public override string DefaultProjectNamespace
            {
                get
                {
                    return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
                }
            }

            public override string GetCustomToolNamespace(string fileName)
            {
                return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
            }

            public override void Process(bool split)
            {
                if (templateProjectItem.ProjectItems == null)
                    return;
                base.Process(split);
                projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
            }

            protected void CreateFile(string fileName, string content)
            {
                if (IsFileContentDifferent(fileName, content))
                {
                    CheckoutFileIfRequired(fileName);
                    File.WriteAllText(fileName, content);
                }
            }

            internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
                : base(host, template)
            {
                var hostServiceProvider = (IServiceProvider)host;
                if (hostServiceProvider == null)
                    throw new ArgumentNullException("Could not obtain IServiceProvider");
                dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
                if (dte == null)
                    throw new ArgumentNullException("Could not obtain DTE from host");
                templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
                checkOutAction = (string fileName) => dte.SourceControl.CheckOutItem(fileName);
                projectSyncAction =
                    (IEnumerable<string> keepFileNames) => ProjectSync(templateProjectItem, keepFileNames);
            }

            private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<string> keepFileNames)
            {
                var keepFileNameSet = new HashSet<string>(keepFileNames);
                var projectFiles = new Dictionary<string, EnvDTE.ProjectItem>();
                var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";
                foreach (EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
                    projectFiles.Add(projectItem.get_FileNames(0), projectItem);

                // Remove unused items from the project  
                foreach (var pair in projectFiles)
                    if (!keepFileNames.Contains(pair.Key) &&
                        !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                        pair.Value.Delete();

                // Add missing files to the project  
                foreach (string fileName in keepFileNameSet)
                    if (!projectFiles.ContainsKey(fileName))
                        templateProjectItem.ProjectItems.AddFromFile(fileName);
            }

            private void CheckoutFileIfRequired(string fileName)
            {
                var sc = dte.SourceControl;
                if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
                    checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
            }
        }
    }
#>